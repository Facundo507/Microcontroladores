
Plotter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000020c  2**0
                  ALLOC, LOAD, DATA
  1 .text         00000080  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  0000020c  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000000e  00000000  00000000  0000023b  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  00000249  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a17  00000000  00000000  00000289  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006de  00000000  00000000  00000ca0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000032e  00000000  00000000  0000137e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000084  00000000  00000000  000016ac  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000208  00000000  00000000  00001730  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000128  00000000  00000000  00001938  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00001a60  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  0000018a  0000018a  000001fe  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001a90  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.int0_init 0000002c  00000100  00000100  00000174  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.ForcePWMY 0000003a  000000c6  000000c6  0000013a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.__vector_1 00000024  0000012c  0000012c  000001a0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.__vector_2 00000024  00000150  00000150  000001c4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.main    00000046  00000080  00000080  000000f4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.__dummy_fini 00000002  00000192  00000192  00000206  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.__dummy_funcs_on_exit 00000002  00000194  00000194  00000208  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.__dummy_simulator_exit 00000002  00000196  00000196  0000020a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.exit    00000016  00000174  00000174  000001e8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text._Exit   00000004  0000018e  0000018e  00000202  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 96 00 	jmp	0x12c	; 0x12c <__vector_1>
   8:	0c 94 a8 00 	jmp	0x150	; 0x150 <__vector_2>
   c:	0c 94 c5 00 	jmp	0x18a	; 0x18a <__bad_interrupt>
  10:	0c 94 c5 00 	jmp	0x18a	; 0x18a <__bad_interrupt>
  14:	0c 94 c5 00 	jmp	0x18a	; 0x18a <__bad_interrupt>
  18:	0c 94 c5 00 	jmp	0x18a	; 0x18a <__bad_interrupt>
  1c:	0c 94 c5 00 	jmp	0x18a	; 0x18a <__bad_interrupt>
  20:	0c 94 c5 00 	jmp	0x18a	; 0x18a <__bad_interrupt>
  24:	0c 94 c5 00 	jmp	0x18a	; 0x18a <__bad_interrupt>
  28:	0c 94 c5 00 	jmp	0x18a	; 0x18a <__bad_interrupt>
  2c:	0c 94 c5 00 	jmp	0x18a	; 0x18a <__bad_interrupt>
  30:	0c 94 c5 00 	jmp	0x18a	; 0x18a <__bad_interrupt>
  34:	0c 94 c5 00 	jmp	0x18a	; 0x18a <__bad_interrupt>
  38:	0c 94 c5 00 	jmp	0x18a	; 0x18a <__bad_interrupt>
  3c:	0c 94 c5 00 	jmp	0x18a	; 0x18a <__bad_interrupt>
  40:	0c 94 c5 00 	jmp	0x18a	; 0x18a <__bad_interrupt>
  44:	0c 94 c5 00 	jmp	0x18a	; 0x18a <__bad_interrupt>
  48:	0c 94 c5 00 	jmp	0x18a	; 0x18a <__bad_interrupt>
  4c:	0c 94 c5 00 	jmp	0x18a	; 0x18a <__bad_interrupt>
  50:	0c 94 c5 00 	jmp	0x18a	; 0x18a <__bad_interrupt>
  54:	0c 94 c5 00 	jmp	0x18a	; 0x18a <__bad_interrupt>
  58:	0c 94 c5 00 	jmp	0x18a	; 0x18a <__bad_interrupt>
  5c:	0c 94 c5 00 	jmp	0x18a	; 0x18a <__bad_interrupt>
  60:	0c 94 c5 00 	jmp	0x18a	; 0x18a <__bad_interrupt>
  64:	0c 94 c5 00 	jmp	0x18a	; 0x18a <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <_etext>
  78:	0c 94 ba 00 	jmp	0x174	; 0x174 <exit>

0000007c <_exit>:
  7c:	f8 94       	cli

0000007e <__stop_program>:
  7e:	ff cf       	rjmp	.-2      	; 0x7e <__stop_program>

Disassembly of section .text:

0000018a <__bad_interrupt>:
 18a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

Disassembly of section .text.int0_init:

00000100 <int0_init>:


#define LED PD5

void int0_init(){
	DDRD &= ~(1 << PD2); //PD2 como entrada (INT0)
 100:	8a b1       	in	r24, 0x0a	; 10
 102:	8b 7f       	andi	r24, 0xFB	; 251
 104:	8a b9       	out	0x0a, r24	; 10
	//PORTD |= (1 << PD2); //Resistencia pull-up
	
	// Condiguracion interrupcion INT0 flanco de subida.
	
	EICRA |= (1 << ISC01);
 106:	e9 e6       	ldi	r30, 0x69	; 105
 108:	f0 e0       	ldi	r31, 0x00	; 0
 10a:	80 81       	ld	r24, Z
 10c:	82 60       	ori	r24, 0x02	; 2
 10e:	80 83       	st	Z, r24
	EICRA |= (1 << ISC00);
 110:	80 81       	ld	r24, Z
 112:	81 60       	ori	r24, 0x01	; 1
 114:	80 83       	st	Z, r24
	EICRA |= (1 << ISC11);
 116:	80 81       	ld	r24, Z
 118:	88 60       	ori	r24, 0x08	; 8
 11a:	80 83       	st	Z, r24
	EICRA |= (1 << ISC10);
 11c:	80 81       	ld	r24, Z
 11e:	84 60       	ori	r24, 0x04	; 4
 120:	80 83       	st	Z, r24
	
	EIMSK |= (1 << INT0) | (1 << INT1);
 122:	8d b3       	in	r24, 0x1d	; 29
 124:	83 60       	ori	r24, 0x03	; 3
 126:	8d bb       	out	0x1d, r24	; 29
	sei();
 128:	78 94       	sei
 12a:	08 95       	ret

Disassembly of section .text.ForcePWMY:

000000c6 <ForcePWMY>:
}

void ForcePWMY(void){
	if ((PIND & (1 << Limite_Y_D )) || (PIND & (1 << Limite_Y_A ))){
  c6:	4b 99       	sbic	0x09, 3	; 9
  c8:	02 c0       	rjmp	.+4      	; 0xce <ForcePWMY+0x8>
  ca:	4a 9b       	sbis	0x09, 2	; 9
  cc:	18 c0       	rjmp	.+48     	; 0xfe <ForcePWMY+0x38>
	PORTC &= ~(1 << RelojY);
  ce:	88 b1       	in	r24, 0x08	; 8
  d0:	87 7f       	andi	r24, 0xF7	; 247
  d2:	88 b9       	out	0x08, r24	; 8
	PORTB &= ~(1 << RelojX);
  d4:	85 b1       	in	r24, 0x05	; 5
  d6:	87 7f       	andi	r24, 0xF7	; 247
  d8:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  da:	89 ef       	ldi	r24, 0xF9	; 249
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	01 97       	sbiw	r24, 0x01	; 1
  e0:	f1 f7       	brne	.-4      	; 0xde <ForcePWMY+0x18>
  e2:	00 c0       	rjmp	.+0      	; 0xe4 <ForcePWMY+0x1e>
  e4:	00 00       	nop
	_delay_ms(1);
	PORTC |= (1 << RelojY);
  e6:	88 b1       	in	r24, 0x08	; 8
  e8:	88 60       	ori	r24, 0x08	; 8
  ea:	88 b9       	out	0x08, r24	; 8
	PORTB |= (1 << RelojX);
  ec:	85 b1       	in	r24, 0x05	; 5
  ee:	88 60       	ori	r24, 0x08	; 8
  f0:	85 b9       	out	0x05, r24	; 5
  f2:	89 ef       	ldi	r24, 0xF9	; 249
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	01 97       	sbiw	r24, 0x01	; 1
  f8:	f1 f7       	brne	.-4      	; 0xf6 <ForcePWMY+0x30>
  fa:	00 c0       	rjmp	.+0      	; 0xfc <ForcePWMY+0x36>
  fc:	00 00       	nop
  fe:	08 95       	ret

Disassembly of section .text.__vector_1:

0000012c <__vector_1>:
	_delay_ms(1);
	}
}

ISR(INT0_vect) {
 12c:	1f 92       	push	r1
 12e:	0f 92       	push	r0
 130:	0f b6       	in	r0, 0x3f	; 63
 132:	0f 92       	push	r0
 134:	11 24       	eor	r1, r1
 136:	8f 93       	push	r24
	desHabilitarX
 138:	85 b1       	in	r24, 0x05	; 5
 13a:	8f 7d       	andi	r24, 0xDF	; 223
 13c:	85 b9       	out	0x05, r24	; 5
	desHabilitarY
 13e:	88 b1       	in	r24, 0x08	; 8
 140:	8f 7d       	andi	r24, 0xDF	; 223
 142:	88 b9       	out	0x08, r24	; 8
}
 144:	8f 91       	pop	r24
 146:	0f 90       	pop	r0
 148:	0f be       	out	0x3f, r0	; 63
 14a:	0f 90       	pop	r0
 14c:	1f 90       	pop	r1
 14e:	18 95       	reti

Disassembly of section .text.__vector_2:

00000150 <__vector_2>:
ISR(INT1_vect) {
 150:	1f 92       	push	r1
 152:	0f 92       	push	r0
 154:	0f b6       	in	r0, 0x3f	; 63
 156:	0f 92       	push	r0
 158:	11 24       	eor	r1, r1
 15a:	8f 93       	push	r24
	desHabilitarX
 15c:	85 b1       	in	r24, 0x05	; 5
 15e:	8f 7d       	andi	r24, 0xDF	; 223
 160:	85 b9       	out	0x05, r24	; 5
	desHabilitarY
 162:	88 b1       	in	r24, 0x08	; 8
 164:	8f 7d       	andi	r24, 0xDF	; 223
 166:	88 b9       	out	0x08, r24	; 8
}
 168:	8f 91       	pop	r24
 16a:	0f 90       	pop	r0
 16c:	0f be       	out	0x3f, r0	; 63
 16e:	0f 90       	pop	r0
 170:	1f 90       	pop	r1
 172:	18 95       	reti

Disassembly of section .text.main:

00000080 <main>:



int main(void) {
	DDRB |= (1 << RelojX) | (1 << DirX) | (1 << EnableX);
  80:	84 b1       	in	r24, 0x04	; 4
  82:	88 63       	ori	r24, 0x38	; 56
  84:	84 b9       	out	0x04, r24	; 4
	DDRC |= (1 << Solenoide) | (1 << RelojY) | (1 << DirY) | (1 << EnableY);
  86:	87 b1       	in	r24, 0x07	; 7
  88:	89 63       	ori	r24, 0x39	; 57
  8a:	87 b9       	out	0x07, r24	; 7
	DDRD |= (1 << LED);
  8c:	8a b1       	in	r24, 0x0a	; 10
  8e:	80 62       	ori	r24, 0x20	; 32
  90:	8a b9       	out	0x0a, r24	; 10
	
	int0_init();             // Inicializa la interrupción INT0
  92:	0e 94 80 00 	call	0x100	; 0x100 <int0_init>
	while (1) {
		if ((PIND & (1 << Limite_Y_D )) || (PIND & (1 << Limite_Y_A ))){
  96:	4b 99       	sbic	0x09, 3	; 9
  98:	02 c0       	rjmp	.+4      	; 0x9e <main+0x1e>
  9a:	4a 9b       	sbis	0x09, 2	; 9
  9c:	fc cf       	rjmp	.-8      	; 0x96 <main+0x16>
			
			
			HabilitarX
  9e:	85 b1       	in	r24, 0x05	; 5
  a0:	80 62       	ori	r24, 0x20	; 32
  a2:	85 b9       	out	0x05, r24	; 5
			AbajoX
  a4:	85 b1       	in	r24, 0x05	; 5
  a6:	80 61       	ori	r24, 0x10	; 16
  a8:	85 b9       	out	0x05, r24	; 5
			PORTC |= ((1 << Solenoide));
  aa:	88 b1       	in	r24, 0x08	; 8
  ac:	81 60       	ori	r24, 0x01	; 1
  ae:	88 b9       	out	0x08, r24	; 8
			
			
			for (int i = 0; i<500; i++){
  b0:	c0 e0       	ldi	r28, 0x00	; 0
  b2:	d0 e0       	ldi	r29, 0x00	; 0
  b4:	03 c0       	rjmp	.+6      	; 0xbc <main+0x3c>
				ForcePWMY();
  b6:	0e 94 63 00 	call	0xc6	; 0xc6 <ForcePWMY>
			HabilitarX
			AbajoX
			PORTC |= ((1 << Solenoide));
			
			
			for (int i = 0; i<500; i++){
  ba:	21 96       	adiw	r28, 0x01	; 1
  bc:	c4 3f       	cpi	r28, 0xF4	; 244
  be:	81 e0       	ldi	r24, 0x01	; 1
  c0:	d8 07       	cpc	r29, r24
  c2:	cc f3       	brlt	.-14     	; 0xb6 <main+0x36>
  c4:	e8 cf       	rjmp	.-48     	; 0x96 <main+0x16>

Disassembly of section .text.__dummy_fini:

00000192 <_fini>:
 192:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

00000194 <__funcs_on_exit>:
 194:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

00000196 <__simulator_exit>:
 196:	08 95       	ret

Disassembly of section .text.exit:

00000174 <exit>:
 174:	ec 01       	movw	r28, r24
 176:	0e 94 ca 00 	call	0x194	; 0x194 <__funcs_on_exit>
 17a:	0e 94 c9 00 	call	0x192	; 0x192 <_fini>
 17e:	ce 01       	movw	r24, r28
 180:	0e 94 cb 00 	call	0x196	; 0x196 <__simulator_exit>
 184:	ce 01       	movw	r24, r28
 186:	0e 94 c7 00 	call	0x18e	; 0x18e <_Exit>

Disassembly of section .text._Exit:

0000018e <_Exit>:
 18e:	0e 94 3e 00 	call	0x7c	; 0x7c <_exit>
