
Plotter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000218  2**0
                  ALLOC, LOAD, DATA
  1 .text         00000080  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  00000218  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000000e  00000000  00000000  00000247  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  00000255  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000ae6  00000000  00000000  000002ad  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000765  00000000  00000000  00000d93  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003b1  00000000  00000000  000014f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000b0  00000000  00000000  000018ac  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000208  00000000  00000000  0000195c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000107  00000000  00000000  00001b64  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  00001c6b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  00000196  00000196  0000020a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001cb4  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.SetupPWM 0000004a  000000ec  000000ec  00000160  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.UART_init 00000016  00000156  00000156  000001ca  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.int0_init 00000020  00000136  00000136  000001aa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.__vector_1 00000014  00000182  00000182  000001f6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.main    0000006c  00000080  00000080  000000f4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.__dummy_fini 00000002  0000019e  0000019e  00000212  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.__dummy_funcs_on_exit 00000002  000001a0  000001a0  00000214  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.__dummy_simulator_exit 00000002  000001a2  000001a2  00000216  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.exit    00000016  0000016c  0000016c  000001e0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text._Exit   00000004  0000019a  0000019a  0000020e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 c1 00 	jmp	0x182	; 0x182 <__vector_1>
   8:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
   c:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
  10:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
  14:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
  18:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
  1c:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
  20:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
  24:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
  28:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
  2c:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
  30:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
  34:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
  38:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
  3c:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
  40:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
  44:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
  48:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
  4c:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
  50:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
  54:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
  58:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
  5c:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
  60:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
  64:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <_etext>
  78:	0c 94 b6 00 	jmp	0x16c	; 0x16c <exit>

0000007c <_exit>:
  7c:	f8 94       	cli

0000007e <__stop_program>:
  7e:	ff cf       	rjmp	.-2      	; 0x7e <__stop_program>

Disassembly of section .text:

00000196 <__bad_interrupt>:
 196:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.SetupPWM:

000000ec <SetupPWM>:

void UART_sendString(const char *str) {
	while (*str) {
		UART_sendChar(*str++);
	}
}
  ec:	84 b1       	in	r24, 0x04	; 4
  ee:	8e 60       	ori	r24, 0x0E	; 14
  f0:	84 b9       	out	0x04, r24	; 4
  f2:	82 ea       	ldi	r24, 0xA2	; 162
  f4:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
  f8:	8b e1       	ldi	r24, 0x1B	; 27
  fa:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
  fe:	87 e8       	ldi	r24, 0x87	; 135
 100:	93 e1       	ldi	r25, 0x13	; 19
 102:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
 106:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
 10a:	84 ec       	ldi	r24, 0xC4	; 196
 10c:	99 e0       	ldi	r25, 0x09	; 9
 10e:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 112:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 116:	82 ee       	ldi	r24, 0xE2	; 226
 118:	94 e0       	ldi	r25, 0x04	; 4
 11a:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 11e:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
 122:	83 e8       	ldi	r24, 0x83	; 131
 124:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
 128:	84 e0       	ldi	r24, 0x04	; 4
 12a:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
 12e:	8f e7       	ldi	r24, 0x7F	; 127
 130:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
 134:	08 95       	ret

Disassembly of section .text.UART_init:

00000156 <UART_init>:
#define LED PD5


void UART_init(unsigned int ubrr) {
	// Configurar el valor de UBRR (Baud Rate Register)
	UBRR0H = (unsigned char)(ubrr >> 8);
 156:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = (unsigned char)ubrr;
 15a:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);
 15e:	88 e1       	ldi	r24, 0x18	; 24
 160:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
 164:	86 e0       	ldi	r24, 0x06	; 6
 166:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 16a:	08 95       	ret

Disassembly of section .text.int0_init:

00000136 <int0_init>:
		UART_sendChar(*str++);
	}
}

void int0_init(){
	DDRD &= ~(1 << PD2); //PD2 como entrada (INT0)
 136:	8a b1       	in	r24, 0x0a	; 10
 138:	8b 7f       	andi	r24, 0xFB	; 251
 13a:	8a b9       	out	0x0a, r24	; 10
	//PORTD |= (1 << PD2); //Resistencia pull-up
	
	// Condiguracion interrupcion INT0 flanco de subida.
	
	EICRA |= (1 << ISC01);
 13c:	e9 e6       	ldi	r30, 0x69	; 105
 13e:	f0 e0       	ldi	r31, 0x00	; 0
 140:	80 81       	ld	r24, Z
 142:	82 60       	ori	r24, 0x02	; 2
 144:	80 83       	st	Z, r24
	EICRA |= (1 << ISC00);
 146:	80 81       	ld	r24, Z
 148:	81 60       	ori	r24, 0x01	; 1
 14a:	80 83       	st	Z, r24
	
	EIMSK |= (1 << INT0);
 14c:	8d b3       	in	r24, 0x1d	; 29
 14e:	81 60       	ori	r24, 0x01	; 1
 150:	8d bb       	out	0x1d, r24	; 29
	sei();
 152:	78 94       	sei
 154:	08 95       	ret

Disassembly of section .text.__vector_1:

00000182 <__vector_1>:
}

ISR(INT0_vect) {
 182:	1f 92       	push	r1
 184:	0f 92       	push	r0
 186:	0f b6       	in	r0, 0x3f	; 63
 188:	0f 92       	push	r0
 18a:	11 24       	eor	r1, r1


}
 18c:	0f 90       	pop	r0
 18e:	0f be       	out	0x3f, r0	; 63
 190:	0f 90       	pop	r0
 192:	1f 90       	pop	r1
 194:	18 95       	reti

Disassembly of section .text.main:

00000080 <main>:

void UART_sendString(const char *str) {
	while (*str) {
		UART_sendChar(*str++);
	}
}
  80:	87 e6       	ldi	r24, 0x67	; 103
  82:	90 e0       	ldi	r25, 0x00	; 0
  84:	0e 94 ab 00 	call	0x156	; 0x156 <UART_init>
  88:	84 b1       	in	r24, 0x04	; 4
  8a:	88 63       	ori	r24, 0x38	; 56
  8c:	84 b9       	out	0x04, r24	; 4
  8e:	87 b1       	in	r24, 0x07	; 7
  90:	89 63       	ori	r24, 0x39	; 57
  92:	87 b9       	out	0x07, r24	; 7
  94:	8a b1       	in	r24, 0x0a	; 10
  96:	80 62       	ori	r24, 0x20	; 32
  98:	8a b9       	out	0x0a, r24	; 10
  9a:	0e 94 76 00 	call	0xec	; 0xec <SetupPWM>
  9e:	0e 94 9b 00 	call	0x136	; 0x136 <int0_init>
  a2:	88 b1       	in	r24, 0x08	; 8
  a4:	80 62       	ori	r24, 0x20	; 32
  a6:	88 b9       	out	0x08, r24	; 8
  a8:	85 b1       	in	r24, 0x05	; 5
  aa:	80 63       	ori	r24, 0x30	; 48
  ac:	85 b9       	out	0x05, r24	; 5
  ae:	88 b1       	in	r24, 0x08	; 8
  b0:	80 63       	ori	r24, 0x30	; 48
  b2:	88 b9       	out	0x08, r24	; 8
  b4:	88 b1       	in	r24, 0x08	; 8
  b6:	81 60       	ori	r24, 0x01	; 1
  b8:	88 b9       	out	0x08, r24	; 8
  ba:	2f e9       	ldi	r18, 0x9F	; 159
  bc:	86 e8       	ldi	r24, 0x86	; 134
  be:	91 e0       	ldi	r25, 0x01	; 1
  c0:	21 50       	subi	r18, 0x01	; 1
  c2:	80 40       	sbci	r24, 0x00	; 0
  c4:	90 40       	sbci	r25, 0x00	; 0
  c6:	e1 f7       	brne	.-8      	; 0xc0 <main+0x40>
  c8:	00 c0       	rjmp	.+0      	; 0xca <main+0x4a>
  ca:	00 00       	nop
  cc:	85 b1       	in	r24, 0x05	; 5
  ce:	8f 7d       	andi	r24, 0xDF	; 223
  d0:	85 b9       	out	0x05, r24	; 5
  d2:	88 b1       	in	r24, 0x08	; 8
  d4:	8f 7d       	andi	r24, 0xDF	; 223
  d6:	88 b9       	out	0x08, r24	; 8
  d8:	2f eb       	ldi	r18, 0xBF	; 191
  da:	87 e2       	ldi	r24, 0x27	; 39
  dc:	99 e0       	ldi	r25, 0x09	; 9
  de:	21 50       	subi	r18, 0x01	; 1
  e0:	80 40       	sbci	r24, 0x00	; 0
  e2:	90 40       	sbci	r25, 0x00	; 0
  e4:	e1 f7       	brne	.-8      	; 0xde <main+0x5e>
  e6:	00 c0       	rjmp	.+0      	; 0xe8 <main+0x68>
  e8:	00 00       	nop
  ea:	db cf       	rjmp	.-74     	; 0xa2 <main+0x22>

Disassembly of section .text.__dummy_fini:

0000019e <_fini>:
 19e:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

000001a0 <__funcs_on_exit>:
 1a0:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

000001a2 <__simulator_exit>:
 1a2:	08 95       	ret

Disassembly of section .text.exit:

0000016c <exit>:
 16c:	ec 01       	movw	r28, r24
 16e:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <__funcs_on_exit>
 172:	0e 94 cf 00 	call	0x19e	; 0x19e <_fini>
 176:	ce 01       	movw	r24, r28
 178:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <__simulator_exit>
 17c:	ce 01       	movw	r24, r28
 17e:	0e 94 cd 00 	call	0x19a	; 0x19a <_Exit>

Disassembly of section .text._Exit:

0000019a <_Exit>:
 19a:	0e 94 3e 00 	call	0x7c	; 0x7c <_exit>
