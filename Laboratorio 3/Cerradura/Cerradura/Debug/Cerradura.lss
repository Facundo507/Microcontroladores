
Cerradura.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00000752  000007e6  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000c4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  000007e6  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000000e  00000000  00000000  00000815  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  00000823  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001489  00000000  00000000  0000087b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000802  00000000  00000000  00001d04  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000005ff  00000000  00000000  00002506  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000100  00000000  00000000  00002b08  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000247  00000000  00000000  00002c08  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000845  00000000  00000000  00002e4f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  00003694  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  00000724  00000724  000007b8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000036f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.LCD_cmd 0000004a  0000060e  0000060e  000006a2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.init_LCD 000000bc  000004ec  000004ec  00000580  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.init_Pins 00000010  00000714  00000714  000007a8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.LCD_write 0000004a  00000658  00000658  000006ec  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .rodata       00000020  00800100  00000732  000007c6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 19 .text.comprobar_Teclado 000001ea  0000011e  0000011e  000001b2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .progmemx.data 0000005a  000000c4  000000c4  00000158  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 21 .text.Bienvenida 0000002a  000006d4  000006d4  00000768  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.Enviar_Mensaje 00000066  000005a8  000005a8  0000063c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.main    000001e4  00000308  00000308  0000039c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text.__dummy_fini 00000002  0000072c  0000072c  000007c0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text.__dummy_funcs_on_exit 00000002  0000072e  0000072e  000007c2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .text.__dummy_simulator_exit 00000002  00000730  00000730  000007c4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .text.exit    00000016  000006fe  000006fe  00000792  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .text.memcpy  00000032  000006a2  000006a2  00000736  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .text._Exit   00000004  00000728  00000728  000007bc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 92 03 	jmp	0x724	; 0x724 <__bad_interrupt>
   8:	0c 94 92 03 	jmp	0x724	; 0x724 <__bad_interrupt>
   c:	0c 94 92 03 	jmp	0x724	; 0x724 <__bad_interrupt>
  10:	0c 94 92 03 	jmp	0x724	; 0x724 <__bad_interrupt>
  14:	0c 94 92 03 	jmp	0x724	; 0x724 <__bad_interrupt>
  18:	0c 94 92 03 	jmp	0x724	; 0x724 <__bad_interrupt>
  1c:	0c 94 92 03 	jmp	0x724	; 0x724 <__bad_interrupt>
  20:	0c 94 92 03 	jmp	0x724	; 0x724 <__bad_interrupt>
  24:	0c 94 92 03 	jmp	0x724	; 0x724 <__bad_interrupt>
  28:	0c 94 92 03 	jmp	0x724	; 0x724 <__bad_interrupt>
  2c:	0c 94 92 03 	jmp	0x724	; 0x724 <__bad_interrupt>
  30:	0c 94 92 03 	jmp	0x724	; 0x724 <__bad_interrupt>
  34:	0c 94 92 03 	jmp	0x724	; 0x724 <__bad_interrupt>
  38:	0c 94 92 03 	jmp	0x724	; 0x724 <__bad_interrupt>
  3c:	0c 94 92 03 	jmp	0x724	; 0x724 <__bad_interrupt>
  40:	0c 94 92 03 	jmp	0x724	; 0x724 <__bad_interrupt>
  44:	0c 94 92 03 	jmp	0x724	; 0x724 <__bad_interrupt>
  48:	0c 94 92 03 	jmp	0x724	; 0x724 <__bad_interrupt>
  4c:	0c 94 92 03 	jmp	0x724	; 0x724 <__bad_interrupt>
  50:	0c 94 92 03 	jmp	0x724	; 0x724 <__bad_interrupt>
  54:	0c 94 92 03 	jmp	0x724	; 0x724 <__bad_interrupt>
  58:	0c 94 92 03 	jmp	0x724	; 0x724 <__bad_interrupt>
  5c:	0c 94 92 03 	jmp	0x724	; 0x724 <__bad_interrupt>
  60:	0c 94 92 03 	jmp	0x724	; 0x724 <__bad_interrupt>
  64:	0c 94 92 03 	jmp	0x724	; 0x724 <__bad_interrupt>

00000068 <.dinit>:
  68:	01 00       	.word	0x0001	; ????
  6a:	01 20       	and	r0, r1
  6c:	00 07       	cpc	r16, r16
  6e:	32 00       	.word	0x0032	; ????

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d8 e0       	ldi	r29, 0x08	; 8
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
  7c:	e8 e6       	ldi	r30, 0x68	; 104
  7e:	f0 e0       	ldi	r31, 0x00	; 0
  80:	40 e0       	ldi	r20, 0x00	; 0
  82:	17 c0       	rjmp	.+46     	; 0xb2 <__do_clear_bss+0x8>
  84:	b5 91       	lpm	r27, Z+
  86:	a5 91       	lpm	r26, Z+
  88:	35 91       	lpm	r19, Z+
  8a:	25 91       	lpm	r18, Z+
  8c:	05 91       	lpm	r16, Z+
  8e:	07 fd       	sbrc	r16, 7
  90:	0c c0       	rjmp	.+24     	; 0xaa <__do_clear_bss>
  92:	95 91       	lpm	r25, Z+
  94:	85 91       	lpm	r24, Z+
  96:	ef 01       	movw	r28, r30
  98:	f9 2f       	mov	r31, r25
  9a:	e8 2f       	mov	r30, r24
  9c:	05 90       	lpm	r0, Z+
  9e:	0d 92       	st	X+, r0
  a0:	a2 17       	cp	r26, r18
  a2:	b3 07       	cpc	r27, r19
  a4:	d9 f7       	brne	.-10     	; 0x9c <__do_copy_data+0x20>
  a6:	fe 01       	movw	r30, r28
  a8:	04 c0       	rjmp	.+8      	; 0xb2 <__do_clear_bss+0x8>

000000aa <__do_clear_bss>:
  aa:	1d 92       	st	X+, r1
  ac:	a2 17       	cp	r26, r18
  ae:	b3 07       	cpc	r27, r19
  b0:	e1 f7       	brne	.-8      	; 0xaa <__do_clear_bss>
  b2:	ef 36       	cpi	r30, 0x6F	; 111
  b4:	f4 07       	cpc	r31, r20
  b6:	31 f7       	brne	.-52     	; 0x84 <__do_copy_data+0x8>
  b8:	0e 94 84 01 	call	0x308	; 0x308 <main>
  bc:	0c 94 7f 03 	jmp	0x6fe	; 0x6fe <exit>

000000c0 <_exit>:
  c0:	f8 94       	cli

000000c2 <__stop_program>:
  c2:	ff cf       	rjmp	.-2      	; 0xc2 <__stop_program>

Disassembly of section .text:

00000724 <__bad_interrupt>:
 724:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.LCD_cmd:

0000060e <LCD_cmd>:
		}
	}
}

void LCD_cmd(char cmd) {
	PORTB = (cmd >> 4) & 0x0F; // Enviar los 4 bits más significativos
 60e:	98 2f       	mov	r25, r24
 610:	92 95       	swap	r25
 612:	9f 70       	andi	r25, 0x0F	; 15
 614:	95 b9       	out	0x05, r25	; 5
	PORTD &= ~(1 << RS);
 616:	9b b1       	in	r25, 0x0b	; 11
 618:	9f 7d       	andi	r25, 0xDF	; 223
 61a:	9b b9       	out	0x0b, r25	; 11
	PORTD &= ~(1 << RW);
 61c:	9b b1       	in	r25, 0x0b	; 11
 61e:	9f 7b       	andi	r25, 0xBF	; 191
 620:	9b b9       	out	0x0b, r25	; 11
	PORTD |= (1 << Enable);
 622:	9b b1       	in	r25, 0x0b	; 11
 624:	90 68       	ori	r25, 0x80	; 128
 626:	9b b9       	out	0x0b, r25	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 628:	ef e9       	ldi	r30, 0x9F	; 159
 62a:	ff e0       	ldi	r31, 0x0F	; 15
 62c:	31 97       	sbiw	r30, 0x01	; 1
 62e:	f1 f7       	brne	.-4      	; 0x62c <LCD_cmd+0x1e>
 630:	00 c0       	rjmp	.+0      	; 0x632 <LCD_cmd+0x24>
 632:	00 00       	nop
	_delay_ms(1);
	PORTD &= ~(1 << Enable);
 634:	9b b1       	in	r25, 0x0b	; 11
 636:	9f 77       	andi	r25, 0x7F	; 127
 638:	9b b9       	out	0x0b, r25	; 11

	PORTB = cmd & 0x0F; // Enviar los 4 bits menos significativos
 63a:	8f 70       	andi	r24, 0x0F	; 15
 63c:	85 b9       	out	0x05, r24	; 5
	PORTD |= (1 << Enable);
 63e:	8b b1       	in	r24, 0x0b	; 11
 640:	80 68       	ori	r24, 0x80	; 128
 642:	8b b9       	out	0x0b, r24	; 11
 644:	8f e9       	ldi	r24, 0x9F	; 159
 646:	9f e0       	ldi	r25, 0x0F	; 15
 648:	01 97       	sbiw	r24, 0x01	; 1
 64a:	f1 f7       	brne	.-4      	; 0x648 <LCD_cmd+0x3a>
 64c:	00 c0       	rjmp	.+0      	; 0x64e <LCD_cmd+0x40>
 64e:	00 00       	nop
	_delay_ms(1);
	PORTD &= ~(1 << Enable);
 650:	8b b1       	in	r24, 0x0b	; 11
 652:	8f 77       	andi	r24, 0x7F	; 127
 654:	8b b9       	out	0x0b, r24	; 11
 656:	08 95       	ret

Disassembly of section .text.init_LCD:

000004ec <init_LCD>:
 4ec:	2f ef       	ldi	r18, 0xFF	; 255
 4ee:	80 e7       	ldi	r24, 0x70	; 112
 4f0:	92 e0       	ldi	r25, 0x02	; 2
 4f2:	21 50       	subi	r18, 0x01	; 1
 4f4:	80 40       	sbci	r24, 0x00	; 0
 4f6:	90 40       	sbci	r25, 0x00	; 0
 4f8:	e1 f7       	brne	.-8      	; 0x4f2 <init_LCD+0x6>
 4fa:	00 c0       	rjmp	.+0      	; 0x4fc <init_LCD+0x10>
 4fc:	00 00       	nop
}

void init_LCD() {
	_delay_ms(50);

	LCD_cmd(0x33);
 4fe:	83 e3       	ldi	r24, 0x33	; 51
 500:	0e 94 07 03 	call	0x60e	; 0x60e <LCD_cmd>
 504:	2f ef       	ldi	r18, 0xFF	; 255
 506:	80 e7       	ldi	r24, 0x70	; 112
 508:	92 e0       	ldi	r25, 0x02	; 2
 50a:	21 50       	subi	r18, 0x01	; 1
 50c:	80 40       	sbci	r24, 0x00	; 0
 50e:	90 40       	sbci	r25, 0x00	; 0
 510:	e1 f7       	brne	.-8      	; 0x50a <init_LCD+0x1e>
 512:	00 c0       	rjmp	.+0      	; 0x514 <init_LCD+0x28>
 514:	00 00       	nop
	_delay_ms(50);

	LCD_cmd(0x32);
 516:	82 e3       	ldi	r24, 0x32	; 50
 518:	0e 94 07 03 	call	0x60e	; 0x60e <LCD_cmd>
 51c:	2f ef       	ldi	r18, 0xFF	; 255
 51e:	80 e7       	ldi	r24, 0x70	; 112
 520:	92 e0       	ldi	r25, 0x02	; 2
 522:	21 50       	subi	r18, 0x01	; 1
 524:	80 40       	sbci	r24, 0x00	; 0
 526:	90 40       	sbci	r25, 0x00	; 0
 528:	e1 f7       	brne	.-8      	; 0x522 <init_LCD+0x36>
 52a:	00 c0       	rjmp	.+0      	; 0x52c <init_LCD+0x40>
 52c:	00 00       	nop
	_delay_ms(50);

	LCD_cmd(0x28); // Inicializar en 4 bit
 52e:	88 e2       	ldi	r24, 0x28	; 40
 530:	0e 94 07 03 	call	0x60e	; 0x60e <LCD_cmd>
 534:	2f ef       	ldi	r18, 0xFF	; 255
 536:	80 e7       	ldi	r24, 0x70	; 112
 538:	92 e0       	ldi	r25, 0x02	; 2
 53a:	21 50       	subi	r18, 0x01	; 1
 53c:	80 40       	sbci	r24, 0x00	; 0
 53e:	90 40       	sbci	r25, 0x00	; 0
 540:	e1 f7       	brne	.-8      	; 0x53a <init_LCD+0x4e>
 542:	00 c0       	rjmp	.+0      	; 0x544 <init_LCD+0x58>
 544:	00 00       	nop
	_delay_ms(50);

	LCD_cmd(0x0C);
 546:	8c e0       	ldi	r24, 0x0C	; 12
 548:	0e 94 07 03 	call	0x60e	; 0x60e <LCD_cmd>
 54c:	2f ef       	ldi	r18, 0xFF	; 255
 54e:	80 e7       	ldi	r24, 0x70	; 112
 550:	92 e0       	ldi	r25, 0x02	; 2
 552:	21 50       	subi	r18, 0x01	; 1
 554:	80 40       	sbci	r24, 0x00	; 0
 556:	90 40       	sbci	r25, 0x00	; 0
 558:	e1 f7       	brne	.-8      	; 0x552 <init_LCD+0x66>
 55a:	00 c0       	rjmp	.+0      	; 0x55c <init_LCD+0x70>
 55c:	00 00       	nop
	_delay_ms(50);

	LCD_cmd(0x06);
 55e:	86 e0       	ldi	r24, 0x06	; 6
 560:	0e 94 07 03 	call	0x60e	; 0x60e <LCD_cmd>
 564:	2f ef       	ldi	r18, 0xFF	; 255
 566:	80 e7       	ldi	r24, 0x70	; 112
 568:	92 e0       	ldi	r25, 0x02	; 2
 56a:	21 50       	subi	r18, 0x01	; 1
 56c:	80 40       	sbci	r24, 0x00	; 0
 56e:	90 40       	sbci	r25, 0x00	; 0
 570:	e1 f7       	brne	.-8      	; 0x56a <init_LCD+0x7e>
 572:	00 c0       	rjmp	.+0      	; 0x574 <init_LCD+0x88>
 574:	00 00       	nop
	_delay_ms(50);

	LCD_cmd(0x01);
 576:	81 e0       	ldi	r24, 0x01	; 1
 578:	0e 94 07 03 	call	0x60e	; 0x60e <LCD_cmd>
 57c:	2f ef       	ldi	r18, 0xFF	; 255
 57e:	80 e7       	ldi	r24, 0x70	; 112
 580:	92 e0       	ldi	r25, 0x02	; 2
 582:	21 50       	subi	r18, 0x01	; 1
 584:	80 40       	sbci	r24, 0x00	; 0
 586:	90 40       	sbci	r25, 0x00	; 0
 588:	e1 f7       	brne	.-8      	; 0x582 <init_LCD+0x96>
 58a:	00 c0       	rjmp	.+0      	; 0x58c <init_LCD+0xa0>
 58c:	00 00       	nop
	_delay_ms(50);

	LCD_cmd(0x80);
 58e:	80 e8       	ldi	r24, 0x80	; 128
 590:	0e 94 07 03 	call	0x60e	; 0x60e <LCD_cmd>
 594:	2f ef       	ldi	r18, 0xFF	; 255
 596:	80 e7       	ldi	r24, 0x70	; 112
 598:	92 e0       	ldi	r25, 0x02	; 2
 59a:	21 50       	subi	r18, 0x01	; 1
 59c:	80 40       	sbci	r24, 0x00	; 0
 59e:	90 40       	sbci	r25, 0x00	; 0
 5a0:	e1 f7       	brne	.-8      	; 0x59a <init_LCD+0xae>
 5a2:	00 c0       	rjmp	.+0      	; 0x5a4 <init_LCD+0xb8>
 5a4:	00 00       	nop
 5a6:	08 95       	ret

Disassembly of section .text.init_Pins:

00000714 <init_Pins>:
	_delay_ms(50);
}

void init_Pins() {
	DDRD = 0xFF;
 714:	8f ef       	ldi	r24, 0xFF	; 255
 716:	8a b9       	out	0x0a, r24	; 10
	DDRB = 0xFF;
 718:	84 b9       	out	0x04, r24	; 4
	DDRC = 0xF0;
 71a:	80 ef       	ldi	r24, 0xF0	; 240
 71c:	87 b9       	out	0x07, r24	; 7
	PORTC = 0x0F; // Configurar el puerto C para lectura (con pull-up)
 71e:	8f e0       	ldi	r24, 0x0F	; 15
 720:	88 b9       	out	0x08, r24	; 8
 722:	08 95       	ret

Disassembly of section .text.LCD_write:

00000658 <LCD_write>:
}

void LCD_write(char data) {
	PORTB = (data >> 4) & 0x0F; // Enviar los 4 bits más significativos
 658:	98 2f       	mov	r25, r24
 65a:	92 95       	swap	r25
 65c:	9f 70       	andi	r25, 0x0F	; 15
 65e:	95 b9       	out	0x05, r25	; 5
	PORTD |= (1 << RS);
 660:	9b b1       	in	r25, 0x0b	; 11
 662:	90 62       	ori	r25, 0x20	; 32
 664:	9b b9       	out	0x0b, r25	; 11
	PORTD &= ~(1 << RW);
 666:	9b b1       	in	r25, 0x0b	; 11
 668:	9f 7b       	andi	r25, 0xBF	; 191
 66a:	9b b9       	out	0x0b, r25	; 11
	PORTD |= (1 << Enable);
 66c:	9b b1       	in	r25, 0x0b	; 11
 66e:	90 68       	ori	r25, 0x80	; 128
 670:	9b b9       	out	0x0b, r25	; 11
 672:	ef e9       	ldi	r30, 0x9F	; 159
 674:	ff e0       	ldi	r31, 0x0F	; 15
 676:	31 97       	sbiw	r30, 0x01	; 1
 678:	f1 f7       	brne	.-4      	; 0x676 <LCD_write+0x1e>
 67a:	00 c0       	rjmp	.+0      	; 0x67c <LCD_write+0x24>
 67c:	00 00       	nop
	_delay_ms(1);
	PORTD &= ~(1 << Enable);
 67e:	9b b1       	in	r25, 0x0b	; 11
 680:	9f 77       	andi	r25, 0x7F	; 127
 682:	9b b9       	out	0x0b, r25	; 11

	PORTB = data & 0x0F; // Enviar los 4 bits menos significativos
 684:	8f 70       	andi	r24, 0x0F	; 15
 686:	85 b9       	out	0x05, r24	; 5
	PORTD |= (1 << Enable);
 688:	8b b1       	in	r24, 0x0b	; 11
 68a:	80 68       	ori	r24, 0x80	; 128
 68c:	8b b9       	out	0x0b, r24	; 11
 68e:	8f e9       	ldi	r24, 0x9F	; 159
 690:	9f e0       	ldi	r25, 0x0F	; 15
 692:	01 97       	sbiw	r24, 0x01	; 1
 694:	f1 f7       	brne	.-4      	; 0x692 <LCD_write+0x3a>
 696:	00 c0       	rjmp	.+0      	; 0x698 <LCD_write+0x40>
 698:	00 00       	nop
	_delay_ms(1);
	PORTD &= ~(1 << Enable);
 69a:	8b b1       	in	r24, 0x0b	; 11
 69c:	8f 77       	andi	r24, 0x7F	; 127
 69e:	8b b9       	out	0x0b, r24	; 11
 6a0:	08 95       	ret

Disassembly of section .text.comprobar_Teclado:

0000011e <comprobar_Teclado>:
}

void comprobar_Teclado(int* state, char* caracter) {
 11e:	cf 92       	push	r12
 120:	df 92       	push	r13
 122:	ef 92       	push	r14
 124:	ff 92       	push	r15
 126:	0f 93       	push	r16
 128:	1f 93       	push	r17
 12a:	cf 93       	push	r28
 12c:	df 93       	push	r29
 12e:	cd b7       	in	r28, 0x3d	; 61
 130:	de b7       	in	r29, 0x3e	; 62
 132:	a0 97       	sbiw	r28, 0x20	; 32
 134:	0f b6       	in	r0, 0x3f	; 63
 136:	f8 94       	cli
 138:	de bf       	out	0x3e, r29	; 62
 13a:	0f be       	out	0x3f, r0	; 63
 13c:	cd bf       	out	0x3d, r28	; 61
	int Columna_ = -1;
	int Fila_ = -1;
	int Fila[4] = {Fila1, Fila2, Fila3, Fila4};
 13e:	28 e0       	ldi	r18, 0x08	; 8
 140:	e0 e0       	ldi	r30, 0x00	; 0
 142:	f1 e0       	ldi	r31, 0x01	; 1
 144:	de 01       	movw	r26, r28
 146:	11 96       	adiw	r26, 0x01	; 1
 148:	01 90       	ld	r0, Z+
 14a:	0d 92       	st	X+, r0
 14c:	2a 95       	dec	r18
 14e:	e1 f7       	brne	.-8      	; 0x148 <comprobar_Teclado+0x2a>
	int Col[4] = {Col1, Col2, Col3, Col4};
 150:	28 e0       	ldi	r18, 0x08	; 8
 152:	e8 e0       	ldi	r30, 0x08	; 8
 154:	f1 e0       	ldi	r31, 0x01	; 1
 156:	de 01       	movw	r26, r28
 158:	19 96       	adiw	r26, 0x09	; 9
 15a:	01 90       	ld	r0, Z+
 15c:	0d 92       	st	X+, r0
 15e:	2a 95       	dec	r18
 160:	e1 f7       	brne	.-8      	; 0x15a <comprobar_Teclado+0x3c>
	char Teclado[4][4] = {
 162:	20 e1       	ldi	r18, 0x10	; 16
 164:	e0 e1       	ldi	r30, 0x10	; 16
 166:	f1 e0       	ldi	r31, 0x01	; 1
 168:	de 01       	movw	r26, r28
 16a:	51 96       	adiw	r26, 0x11	; 17
 16c:	01 90       	ld	r0, Z+
 16e:	0d 92       	st	X+, r0
 170:	2a 95       	dec	r18
 172:	e1 f7       	brne	.-8      	; 0x16c <comprobar_Teclado+0x4e>
		{'4', '5', '6', 'B'},
		{'7', '8', '9', 'C'},
		{'*', '0', '#', 'D'}
	};
	
	PORTD |= (1 << Fila1) | (1 << Fila2) | (1 << Fila3) | (1 << Fila4);
 174:	2b b1       	in	r18, 0x0b	; 11
 176:	2e 61       	ori	r18, 0x1E	; 30
 178:	2b b9       	out	0x0b, r18	; 11
	for (int i = 0; i < 4; i++) {
 17a:	a0 e0       	ldi	r26, 0x00	; 0
 17c:	b0 e0       	ldi	r27, 0x00	; 0
	PORTD &= ~(1 << Enable);
}

void comprobar_Teclado(int* state, char* caracter) {
	int Columna_ = -1;
	int Fila_ = -1;
 17e:	ee 24       	eor	r14, r14
 180:	ea 94       	dec	r14
 182:	fe 2c       	mov	r15, r14
	_delay_ms(1);
	PORTD &= ~(1 << Enable);
}

void comprobar_Teclado(int* state, char* caracter) {
	int Columna_ = -1;
 184:	0f ef       	ldi	r16, 0xFF	; 255
 186:	1f ef       	ldi	r17, 0xFF	; 255
		{'7', '8', '9', 'C'},
		{'*', '0', '#', 'D'}
	};
	
	PORTD |= (1 << Fila1) | (1 << Fila2) | (1 << Fila3) | (1 << Fila4);
	for (int i = 0; i < 4; i++) {
 188:	52 c0       	rjmp	.+164    	; 0x22e <comprobar_Teclado+0x110>
		PORTD &= ~(1 << Fila[i]);
 18a:	4b b1       	in	r20, 0x0b	; 11
 18c:	fd 01       	movw	r30, r26
 18e:	ee 0f       	add	r30, r30
 190:	ff 1f       	adc	r31, r31
 192:	cc 24       	eor	r12, r12
 194:	c3 94       	inc	r12
 196:	d1 2c       	mov	r13, r1
 198:	cc 0e       	add	r12, r28
 19a:	dd 1e       	adc	r13, r29
 19c:	ec 0d       	add	r30, r12
 19e:	fd 1d       	adc	r31, r13
 1a0:	21 e0       	ldi	r18, 0x01	; 1
 1a2:	30 e0       	ldi	r19, 0x00	; 0
 1a4:	00 80       	ld	r0, Z
 1a6:	02 c0       	rjmp	.+4      	; 0x1ac <comprobar_Teclado+0x8e>
 1a8:	22 0f       	add	r18, r18
 1aa:	33 1f       	adc	r19, r19
 1ac:	0a 94       	dec	r0
 1ae:	e2 f7       	brpl	.-8      	; 0x1a8 <comprobar_Teclado+0x8a>
 1b0:	20 95       	com	r18
 1b2:	24 23       	and	r18, r20
 1b4:	2b b9       	out	0x0b, r18	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1b6:	2a e1       	ldi	r18, 0x1A	; 26
 1b8:	2a 95       	dec	r18
 1ba:	f1 f7       	brne	.-4      	; 0x1b8 <comprobar_Teclado+0x9a>
 1bc:	00 c0       	rjmp	.+0      	; 0x1be <comprobar_Teclado+0xa0>
		_delay_us(5);
		for (int j = 0; j < 4; j++) {
 1be:	40 e0       	ldi	r20, 0x00	; 0
 1c0:	50 e0       	ldi	r21, 0x00	; 0
 1c2:	16 c0       	rjmp	.+44     	; 0x1f0 <comprobar_Teclado+0xd2>
			if (!(PINC & (1 << Col[j]))) { // Se detecta la tecla cuando el PIN está en LOW
 1c4:	26 b1       	in	r18, 0x06	; 6
 1c6:	fa 01       	movw	r30, r20
 1c8:	ee 0f       	add	r30, r30
 1ca:	ff 1f       	adc	r31, r31
 1cc:	cc 24       	eor	r12, r12
 1ce:	c3 94       	inc	r12
 1d0:	d1 2c       	mov	r13, r1
 1d2:	cc 0e       	add	r12, r28
 1d4:	dd 1e       	adc	r13, r29
 1d6:	ec 0d       	add	r30, r12
 1d8:	fd 1d       	adc	r31, r13
 1da:	30 e0       	ldi	r19, 0x00	; 0
 1dc:	00 84       	ldd	r0, Z+8	; 0x08
 1de:	02 c0       	rjmp	.+4      	; 0x1e4 <comprobar_Teclado+0xc6>
 1e0:	35 95       	asr	r19
 1e2:	27 95       	ror	r18
 1e4:	0a 94       	dec	r0
 1e6:	e2 f7       	brpl	.-8      	; 0x1e0 <comprobar_Teclado+0xc2>
 1e8:	20 ff       	sbrs	r18, 0
 1ea:	06 c0       	rjmp	.+12     	; 0x1f8 <comprobar_Teclado+0xda>
	
	PORTD |= (1 << Fila1) | (1 << Fila2) | (1 << Fila3) | (1 << Fila4);
	for (int i = 0; i < 4; i++) {
		PORTD &= ~(1 << Fila[i]);
		_delay_us(5);
		for (int j = 0; j < 4; j++) {
 1ec:	4f 5f       	subi	r20, 0xFF	; 255
 1ee:	5f 4f       	sbci	r21, 0xFF	; 255
 1f0:	44 30       	cpi	r20, 0x04	; 4
 1f2:	51 05       	cpc	r21, r1
 1f4:	3c f3       	brlt	.-50     	; 0x1c4 <comprobar_Teclado+0xa6>
 1f6:	02 c0       	rjmp	.+4      	; 0x1fc <comprobar_Teclado+0xde>
			if (!(PINC & (1 << Col[j]))) { // Se detecta la tecla cuando el PIN está en LOW
				Columna_ = j;
				Fila_ = i;
 1f8:	7d 01       	movw	r14, r26
	for (int i = 0; i < 4; i++) {
		PORTD &= ~(1 << Fila[i]);
		_delay_us(5);
		for (int j = 0; j < 4; j++) {
			if (!(PINC & (1 << Col[j]))) { // Se detecta la tecla cuando el PIN está en LOW
				Columna_ = j;
 1fa:	8a 01       	movw	r16, r20
				Fila_ = i;
				break;
			}
		}
		PORTD |= (1 << Fila[i]);
 1fc:	4b b1       	in	r20, 0x0b	; 11
 1fe:	fd 01       	movw	r30, r26
 200:	ee 0f       	add	r30, r30
 202:	ff 1f       	adc	r31, r31
 204:	21 e0       	ldi	r18, 0x01	; 1
 206:	30 e0       	ldi	r19, 0x00	; 0
 208:	2c 0f       	add	r18, r28
 20a:	3d 1f       	adc	r19, r29
 20c:	e2 0f       	add	r30, r18
 20e:	f3 1f       	adc	r31, r19
 210:	21 e0       	ldi	r18, 0x01	; 1
 212:	30 e0       	ldi	r19, 0x00	; 0
 214:	00 80       	ld	r0, Z
 216:	02 c0       	rjmp	.+4      	; 0x21c <comprobar_Teclado+0xfe>
 218:	22 0f       	add	r18, r18
 21a:	33 1f       	adc	r19, r19
 21c:	0a 94       	dec	r0
 21e:	e2 f7       	brpl	.-8      	; 0x218 <comprobar_Teclado+0xfa>
 220:	24 2b       	or	r18, r20
 222:	2b b9       	out	0x0b, r18	; 11
		if (Columna_ != -1) {
 224:	0f 3f       	cpi	r16, 0xFF	; 255
 226:	3f ef       	ldi	r19, 0xFF	; 255
 228:	13 07       	cpc	r17, r19
 22a:	29 f4       	brne	.+10     	; 0x236 <comprobar_Teclado+0x118>
		{'7', '8', '9', 'C'},
		{'*', '0', '#', 'D'}
	};
	
	PORTD |= (1 << Fila1) | (1 << Fila2) | (1 << Fila3) | (1 << Fila4);
	for (int i = 0; i < 4; i++) {
 22c:	11 96       	adiw	r26, 0x01	; 1
 22e:	a4 30       	cpi	r26, 0x04	; 4
 230:	b1 05       	cpc	r27, r1
 232:	0c f4       	brge	.+2      	; 0x236 <comprobar_Teclado+0x118>
 234:	aa cf       	rjmp	.-172    	; 0x18a <comprobar_Teclado+0x6c>
		if (Columna_ != -1) {
			break;
		}
	}
	
	if (Columna_ != -1) {
 236:	0f 3f       	cpi	r16, 0xFF	; 255
 238:	4f ef       	ldi	r20, 0xFF	; 255
 23a:	14 07       	cpc	r17, r20
 23c:	09 f4       	brne	.+2      	; 0x240 <comprobar_Teclado+0x122>
 23e:	55 c0       	rjmp	.+170    	; 0x2ea <comprobar_Teclado+0x1cc>
		if(*state == 0 && Teclado[Fila_][Columna_] == 'A') {
 240:	fc 01       	movw	r30, r24
 242:	20 81       	ld	r18, Z
 244:	31 81       	ldd	r19, Z+1	; 0x01
 246:	21 15       	cp	r18, r1
 248:	31 05       	cpc	r19, r1
 24a:	b9 f4       	brne	.+46     	; 0x27a <comprobar_Teclado+0x15c>
 24c:	f7 01       	movw	r30, r14
 24e:	ee 0f       	add	r30, r30
 250:	ff 1f       	adc	r31, r31
 252:	ee 0f       	add	r30, r30
 254:	ff 1f       	adc	r31, r31
 256:	cc 24       	eor	r12, r12
 258:	c3 94       	inc	r12
 25a:	d1 2c       	mov	r13, r1
 25c:	cc 0e       	add	r12, r28
 25e:	dd 1e       	adc	r13, r29
 260:	ec 0d       	add	r30, r12
 262:	fd 1d       	adc	r31, r13
 264:	e0 0f       	add	r30, r16
 266:	f1 1f       	adc	r31, r17
 268:	40 89       	ldd	r20, Z+16	; 0x10
 26a:	41 34       	cpi	r20, 0x41	; 65
 26c:	31 f4       	brne	.+12     	; 0x27a <comprobar_Teclado+0x15c>
			*state = 1;
 26e:	21 e0       	ldi	r18, 0x01	; 1
 270:	30 e0       	ldi	r19, 0x00	; 0
 272:	fc 01       	movw	r30, r24
 274:	31 83       	std	Z+1, r19	; 0x01
 276:	20 83       	st	Z, r18
 278:	38 c0       	rjmp	.+112    	; 0x2ea <comprobar_Teclado+0x1cc>
		} else if (*state == 1) {
 27a:	21 30       	cpi	r18, 0x01	; 1
 27c:	31 05       	cpc	r19, r1
 27e:	f9 f4       	brne	.+62     	; 0x2be <comprobar_Teclado+0x1a0>
			if(Teclado[Fila_][Columna_] == '*') {
 280:	f7 01       	movw	r30, r14
 282:	ee 0f       	add	r30, r30
 284:	ff 1f       	adc	r31, r31
 286:	ee 0f       	add	r30, r30
 288:	ff 1f       	adc	r31, r31
 28a:	cc 24       	eor	r12, r12
 28c:	c3 94       	inc	r12
 28e:	d1 2c       	mov	r13, r1
 290:	cc 0e       	add	r12, r28
 292:	dd 1e       	adc	r13, r29
 294:	ec 0d       	add	r30, r12
 296:	fd 1d       	adc	r31, r13
 298:	e0 0f       	add	r30, r16
 29a:	f1 1f       	adc	r31, r17
 29c:	20 89       	ldd	r18, Z+16	; 0x10
 29e:	2a 32       	cpi	r18, 0x2A	; 42
 2a0:	31 f4       	brne	.+12     	; 0x2ae <comprobar_Teclado+0x190>
				*state = 2;
 2a2:	22 e0       	ldi	r18, 0x02	; 2
 2a4:	30 e0       	ldi	r19, 0x00	; 0
 2a6:	fc 01       	movw	r30, r24
 2a8:	31 83       	std	Z+1, r19	; 0x01
 2aa:	20 83       	st	Z, r18
 2ac:	1e c0       	rjmp	.+60     	; 0x2ea <comprobar_Teclado+0x1cc>
			} else if(Teclado[Fila_][Columna_] == '#') {
 2ae:	23 32       	cpi	r18, 0x23	; 35
 2b0:	e1 f4       	brne	.+56     	; 0x2ea <comprobar_Teclado+0x1cc>
				*state = 3;
 2b2:	23 e0       	ldi	r18, 0x03	; 3
 2b4:	30 e0       	ldi	r19, 0x00	; 0
 2b6:	fc 01       	movw	r30, r24
 2b8:	31 83       	std	Z+1, r19	; 0x01
 2ba:	20 83       	st	Z, r18
 2bc:	16 c0       	rjmp	.+44     	; 0x2ea <comprobar_Teclado+0x1cc>
			}
		} else if(*state == 2 || *state == 3) {
 2be:	22 50       	subi	r18, 0x02	; 2
 2c0:	31 09       	sbc	r19, r1
 2c2:	22 30       	cpi	r18, 0x02	; 2
 2c4:	31 05       	cpc	r19, r1
 2c6:	88 f4       	brcc	.+34     	; 0x2ea <comprobar_Teclado+0x1cc>
			*caracter = Teclado[Fila_][Columna_];
 2c8:	f7 01       	movw	r30, r14
 2ca:	ee 0f       	add	r30, r30
 2cc:	ff 1f       	adc	r31, r31
 2ce:	ee 0f       	add	r30, r30
 2d0:	ff 1f       	adc	r31, r31
 2d2:	cc 24       	eor	r12, r12
 2d4:	c3 94       	inc	r12
 2d6:	d1 2c       	mov	r13, r1
 2d8:	cc 0e       	add	r12, r28
 2da:	dd 1e       	adc	r13, r29
 2dc:	ec 0d       	add	r30, r12
 2de:	fd 1d       	adc	r31, r13
 2e0:	e0 0f       	add	r30, r16
 2e2:	f1 1f       	adc	r31, r17
 2e4:	80 89       	ldd	r24, Z+16	; 0x10
 2e6:	fb 01       	movw	r30, r22
 2e8:	80 83       	st	Z, r24
			
		} else if(*state == 6){
			
		}
	}
}
 2ea:	a0 96       	adiw	r28, 0x20	; 32
 2ec:	0f b6       	in	r0, 0x3f	; 63
 2ee:	f8 94       	cli
 2f0:	de bf       	out	0x3e, r29	; 62
 2f2:	0f be       	out	0x3f, r0	; 63
 2f4:	cd bf       	out	0x3d, r28	; 61
 2f6:	df 91       	pop	r29
 2f8:	cf 91       	pop	r28
 2fa:	1f 91       	pop	r17
 2fc:	0f 91       	pop	r16
 2fe:	ff 90       	pop	r15
 300:	ef 90       	pop	r14
 302:	df 90       	pop	r13
 304:	cf 90       	pop	r12
 306:	08 95       	ret

Disassembly of section .text.Bienvenida:

000006d4 <Bienvenida>:

void Bienvenida(char* Cadena1, char* Cadena2) {
 6d4:	cf 93       	push	r28
 6d6:	df 93       	push	r29
 6d8:	eb 01       	movw	r28, r22
	sprintf(Cadena1, "Bienvenido");
 6da:	2b e0       	ldi	r18, 0x0B	; 11
 6dc:	30 e0       	ldi	r19, 0x00	; 0
 6de:	44 ec       	ldi	r20, 0xC4	; 196
 6e0:	50 e0       	ldi	r21, 0x00	; 0
 6e2:	60 e0       	ldi	r22, 0x00	; 0
 6e4:	0e 94 51 03 	call	0x6a2	; 0x6a2 <memcpy>
	sprintf(Cadena2, "Presione A");
 6e8:	2b e0       	ldi	r18, 0x0B	; 11
 6ea:	30 e0       	ldi	r19, 0x00	; 0
 6ec:	4f ec       	ldi	r20, 0xCF	; 207
 6ee:	50 e0       	ldi	r21, 0x00	; 0
 6f0:	60 e0       	ldi	r22, 0x00	; 0
 6f2:	ce 01       	movw	r24, r28
 6f4:	0e 94 51 03 	call	0x6a2	; 0x6a2 <memcpy>
}
 6f8:	df 91       	pop	r29
 6fa:	cf 91       	pop	r28
 6fc:	08 95       	ret

Disassembly of section .text.Enviar_Mensaje:

000005a8 <Enviar_Mensaje>:

void Enviar_Mensaje(char* Cadena1, char* Cadena2) {
 5a8:	ef 92       	push	r14
 5aa:	ff 92       	push	r15
 5ac:	0f 93       	push	r16
 5ae:	1f 93       	push	r17
 5b0:	cf 93       	push	r28
 5b2:	df 93       	push	r29
 5b4:	7c 01       	movw	r14, r24
 5b6:	8b 01       	movw	r16, r22
	LCD_cmd(0x01);
 5b8:	81 e0       	ldi	r24, 0x01	; 1
 5ba:	0e 94 07 03 	call	0x60e	; 0x60e <LCD_cmd>
	for (int i = 0; i < 16 && Cadena1[i] != '\0'; i++) {
 5be:	c0 e0       	ldi	r28, 0x00	; 0
 5c0:	d0 e0       	ldi	r29, 0x00	; 0
 5c2:	03 c0       	rjmp	.+6      	; 0x5ca <Enviar_Mensaje+0x22>
		LCD_write(Cadena1[i]);
 5c4:	0e 94 2c 03 	call	0x658	; 0x658 <LCD_write>
	sprintf(Cadena2, "Presione A");
}

void Enviar_Mensaje(char* Cadena1, char* Cadena2) {
	LCD_cmd(0x01);
	for (int i = 0; i < 16 && Cadena1[i] != '\0'; i++) {
 5c8:	21 96       	adiw	r28, 0x01	; 1
 5ca:	c0 31       	cpi	r28, 0x10	; 16
 5cc:	d1 05       	cpc	r29, r1
 5ce:	34 f4       	brge	.+12     	; 0x5dc <Enviar_Mensaje+0x34>
 5d0:	f7 01       	movw	r30, r14
 5d2:	ec 0f       	add	r30, r28
 5d4:	fd 1f       	adc	r31, r29
 5d6:	80 81       	ld	r24, Z
 5d8:	81 11       	cpse	r24, r1
 5da:	f4 cf       	rjmp	.-24     	; 0x5c4 <Enviar_Mensaje+0x1c>
		LCD_write(Cadena1[i]);
	}
	LCD_cmd(0xC0);
 5dc:	80 ec       	ldi	r24, 0xC0	; 192
 5de:	0e 94 07 03 	call	0x60e	; 0x60e <LCD_cmd>
	for (int i = 0; i < 16 && Cadena2[i] != '\0'; i++) {
 5e2:	c0 e0       	ldi	r28, 0x00	; 0
 5e4:	d0 e0       	ldi	r29, 0x00	; 0
 5e6:	03 c0       	rjmp	.+6      	; 0x5ee <Enviar_Mensaje+0x46>
		LCD_write(Cadena2[i]);
 5e8:	0e 94 2c 03 	call	0x658	; 0x658 <LCD_write>
	LCD_cmd(0x01);
	for (int i = 0; i < 16 && Cadena1[i] != '\0'; i++) {
		LCD_write(Cadena1[i]);
	}
	LCD_cmd(0xC0);
	for (int i = 0; i < 16 && Cadena2[i] != '\0'; i++) {
 5ec:	21 96       	adiw	r28, 0x01	; 1
 5ee:	c0 31       	cpi	r28, 0x10	; 16
 5f0:	d1 05       	cpc	r29, r1
 5f2:	34 f4       	brge	.+12     	; 0x600 <Enviar_Mensaje+0x58>
 5f4:	f8 01       	movw	r30, r16
 5f6:	ec 0f       	add	r30, r28
 5f8:	fd 1f       	adc	r31, r29
 5fa:	80 81       	ld	r24, Z
 5fc:	81 11       	cpse	r24, r1
 5fe:	f4 cf       	rjmp	.-24     	; 0x5e8 <Enviar_Mensaje+0x40>
		LCD_write(Cadena2[i]);
	}
}
 600:	df 91       	pop	r29
 602:	cf 91       	pop	r28
 604:	1f 91       	pop	r17
 606:	0f 91       	pop	r16
 608:	ff 90       	pop	r15
 60a:	ef 90       	pop	r14
 60c:	08 95       	ret

Disassembly of section .text.main:

00000308 <main>:
void LCD_write(char data);
void comprobar_Teclado(int* state, char* caracter);
void Bienvenida(char* Cadena1, char* Cadena2);
void Enviar_Mensaje(char* Cadena1, char* Cadena2);

int main(void) {
 308:	cf 93       	push	r28
 30a:	df 93       	push	r29
 30c:	cd b7       	in	r28, 0x3d	; 61
 30e:	de b7       	in	r29, 0x3e	; 62
 310:	a3 97       	sbiw	r28, 0x23	; 35
 312:	0f b6       	in	r0, 0x3f	; 63
 314:	f8 94       	cli
 316:	de bf       	out	0x3e, r29	; 62
 318:	0f be       	out	0x3f, r0	; 63
 31a:	cd bf       	out	0x3d, r28	; 61
	init_Pins();
 31c:	0e 94 8a 03 	call	0x714	; 0x714 <init_Pins>
	init_LCD();
 320:	0e 94 76 02 	call	0x4ec	; 0x4ec <init_LCD>
	int state = 0;
 324:	1a 82       	std	Y+2, r1	; 0x02
 326:	19 82       	std	Y+1, r1	; 0x01
	char PasswordReference[6] = "1234";
	char Password[6] = "";  
	char caracter = '\0'; 
 328:	1b 82       	std	Y+3, r1	; 0x03
	int contador = 0;
	char Cadena1[16];
	char Cadena2[16];
	Bienvenida(Cadena1, Cadena2);
 32a:	be 01       	movw	r22, r28
 32c:	6c 5e       	subi	r22, 0xEC	; 236
 32e:	7f 4f       	sbci	r23, 0xFF	; 255
 330:	ce 01       	movw	r24, r28
 332:	04 96       	adiw	r24, 0x04	; 4
 334:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <Bienvenida>
	while (1) {
		if (state == 0) {					// Bienvenida
 338:	89 81       	ldd	r24, Y+1	; 0x01
 33a:	9a 81       	ldd	r25, Y+2	; 0x02
 33c:	00 97       	sbiw	r24, 0x00	; 0
 33e:	f9 f4       	brne	.+62     	; 0x37e <main+0x76>
			Bienvenida(Cadena1, Cadena2);
 340:	be 01       	movw	r22, r28
 342:	6c 5e       	subi	r22, 0xEC	; 236
 344:	7f 4f       	sbci	r23, 0xFF	; 255
 346:	ce 01       	movw	r24, r28
 348:	04 96       	adiw	r24, 0x04	; 4
 34a:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <Bienvenida>
			comprobar_Teclado(&state, &caracter);
 34e:	be 01       	movw	r22, r28
 350:	6d 5f       	subi	r22, 0xFD	; 253
 352:	7f 4f       	sbci	r23, 0xFF	; 255
 354:	ce 01       	movw	r24, r28
 356:	01 96       	adiw	r24, 0x01	; 1
 358:	0e 94 8f 00 	call	0x11e	; 0x11e <comprobar_Teclado>
			Enviar_Mensaje(Cadena1, Cadena2);
 35c:	be 01       	movw	r22, r28
 35e:	6c 5e       	subi	r22, 0xEC	; 236
 360:	7f 4f       	sbci	r23, 0xFF	; 255
 362:	ce 01       	movw	r24, r28
 364:	04 96       	adiw	r24, 0x04	; 4
 366:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <Enviar_Mensaje>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 36a:	2f ef       	ldi	r18, 0xFF	; 255
 36c:	89 e6       	ldi	r24, 0x69	; 105
 36e:	98 e1       	ldi	r25, 0x18	; 24
 370:	21 50       	subi	r18, 0x01	; 1
 372:	80 40       	sbci	r24, 0x00	; 0
 374:	90 40       	sbci	r25, 0x00	; 0
 376:	e1 f7       	brne	.-8      	; 0x370 <main+0x68>
 378:	00 c0       	rjmp	.+0      	; 0x37a <main+0x72>
 37a:	00 00       	nop
 37c:	dd cf       	rjmp	.-70     	; 0x338 <main+0x30>
			_delay_ms(500);
		} else if (state == 1) {			// Menú
 37e:	81 30       	cpi	r24, 0x01	; 1
 380:	91 05       	cpc	r25, r1
 382:	99 f5       	brne	.+102    	; 0x3ea <main+0xe2>
			sprintf(Cadena1, "* : Abrir");
 384:	2a e0       	ldi	r18, 0x0A	; 10
 386:	30 e0       	ldi	r19, 0x00	; 0
 388:	4a ed       	ldi	r20, 0xDA	; 218
 38a:	50 e0       	ldi	r21, 0x00	; 0
 38c:	60 e0       	ldi	r22, 0x00	; 0
 38e:	ce 01       	movw	r24, r28
 390:	04 96       	adiw	r24, 0x04	; 4
 392:	0e 94 51 03 	call	0x6a2	; 0x6a2 <memcpy>
			sprintf(Cadena2, "# : Cambiar");
 396:	2c e0       	ldi	r18, 0x0C	; 12
 398:	30 e0       	ldi	r19, 0x00	; 0
 39a:	44 ee       	ldi	r20, 0xE4	; 228
 39c:	50 e0       	ldi	r21, 0x00	; 0
 39e:	60 e0       	ldi	r22, 0x00	; 0
 3a0:	ce 01       	movw	r24, r28
 3a2:	44 96       	adiw	r24, 0x14	; 20
 3a4:	0e 94 51 03 	call	0x6a2	; 0x6a2 <memcpy>
			comprobar_Teclado(&state, &caracter);
 3a8:	be 01       	movw	r22, r28
 3aa:	6d 5f       	subi	r22, 0xFD	; 253
 3ac:	7f 4f       	sbci	r23, 0xFF	; 255
 3ae:	ce 01       	movw	r24, r28
 3b0:	01 96       	adiw	r24, 0x01	; 1
 3b2:	0e 94 8f 00 	call	0x11e	; 0x11e <comprobar_Teclado>
			Enviar_Mensaje(Cadena1, Cadena2);
 3b6:	be 01       	movw	r22, r28
 3b8:	6c 5e       	subi	r22, 0xEC	; 236
 3ba:	7f 4f       	sbci	r23, 0xFF	; 255
 3bc:	ce 01       	movw	r24, r28
 3be:	04 96       	adiw	r24, 0x04	; 4
 3c0:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <Enviar_Mensaje>
 3c4:	2f ef       	ldi	r18, 0xFF	; 255
 3c6:	89 e6       	ldi	r24, 0x69	; 105
 3c8:	98 e1       	ldi	r25, 0x18	; 24
 3ca:	21 50       	subi	r18, 0x01	; 1
 3cc:	80 40       	sbci	r24, 0x00	; 0
 3ce:	90 40       	sbci	r25, 0x00	; 0
 3d0:	e1 f7       	brne	.-8      	; 0x3ca <main+0xc2>
 3d2:	00 c0       	rjmp	.+0      	; 0x3d4 <main+0xcc>
 3d4:	00 00       	nop
			_delay_ms(500);
			sprintf(Cadena2, "");
 3d6:	21 e0       	ldi	r18, 0x01	; 1
 3d8:	30 e0       	ldi	r19, 0x00	; 0
 3da:	40 ef       	ldi	r20, 0xF0	; 240
 3dc:	50 e0       	ldi	r21, 0x00	; 0
 3de:	60 e0       	ldi	r22, 0x00	; 0
 3e0:	ce 01       	movw	r24, r28
 3e2:	44 96       	adiw	r24, 0x14	; 20
 3e4:	0e 94 51 03 	call	0x6a2	; 0x6a2 <memcpy>
 3e8:	a7 cf       	rjmp	.-178    	; 0x338 <main+0x30>
		} else if (state == 2) {			// Abrir Cerradura
 3ea:	82 30       	cpi	r24, 0x02	; 2
 3ec:	91 05       	cpc	r25, r1
 3ee:	21 f5       	brne	.+72     	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
			sprintf(Cadena1, "Ingrese su PASS");
 3f0:	20 e1       	ldi	r18, 0x10	; 16
 3f2:	30 e0       	ldi	r19, 0x00	; 0
 3f4:	41 ef       	ldi	r20, 0xF1	; 241
 3f6:	50 e0       	ldi	r21, 0x00	; 0
 3f8:	60 e0       	ldi	r22, 0x00	; 0
 3fa:	ce 01       	movw	r24, r28
 3fc:	04 96       	adiw	r24, 0x04	; 4
 3fe:	0e 94 51 03 	call	0x6a2	; 0x6a2 <memcpy>
			comprobar_Teclado(&state, &caracter);
 402:	be 01       	movw	r22, r28
 404:	6d 5f       	subi	r22, 0xFD	; 253
 406:	7f 4f       	sbci	r23, 0xFF	; 255
 408:	ce 01       	movw	r24, r28
 40a:	01 96       	adiw	r24, 0x01	; 1
 40c:	0e 94 8f 00 	call	0x11e	; 0x11e <comprobar_Teclado>
			if (caracter != '\0') {
 410:	8b 81       	ldd	r24, Y+3	; 0x03
 412:	81 11       	cpse	r24, r1
				Password[contador] = caracter;

				for (int i = 0; i < contador; i++) {
					Cadena2[i] = '*';
				}
				caracter = '\0';
 414:	1b 82       	std	Y+3, r1	; 0x03
			}
			Enviar_Mensaje(Cadena1, Cadena2);
 416:	be 01       	movw	r22, r28
 418:	6c 5e       	subi	r22, 0xEC	; 236
 41a:	7f 4f       	sbci	r23, 0xFF	; 255
 41c:	ce 01       	movw	r24, r28
 41e:	04 96       	adiw	r24, 0x04	; 4
 420:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <Enviar_Mensaje>
 424:	2f ef       	ldi	r18, 0xFF	; 255
 426:	89 e6       	ldi	r24, 0x69	; 105
 428:	98 e1       	ldi	r25, 0x18	; 24
 42a:	21 50       	subi	r18, 0x01	; 1
 42c:	80 40       	sbci	r24, 0x00	; 0
 42e:	90 40       	sbci	r25, 0x00	; 0
 430:	e1 f7       	brne	.-8      	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
 432:	00 c0       	rjmp	.+0      	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
 434:	00 00       	nop
 436:	80 cf       	rjmp	.-256    	; 0x338 <main+0x30>
			_delay_ms(500);
		} else if (state == 3) {			// Cambiar Contraseña
 438:	83 30       	cpi	r24, 0x03	; 3
 43a:	91 05       	cpc	r25, r1
 43c:	51 f5       	brne	.+84     	; 0x492 <__EEPROM_REGION_LENGTH__+0x92>
			sprintf(Cadena1, "Ingrese su PASS");
 43e:	20 e1       	ldi	r18, 0x10	; 16
 440:	30 e0       	ldi	r19, 0x00	; 0
 442:	41 ef       	ldi	r20, 0xF1	; 241
 444:	50 e0       	ldi	r21, 0x00	; 0
 446:	60 e0       	ldi	r22, 0x00	; 0
 448:	ce 01       	movw	r24, r28
 44a:	04 96       	adiw	r24, 0x04	; 4
 44c:	0e 94 51 03 	call	0x6a2	; 0x6a2 <memcpy>
			sprintf(Cadena2, "");
 450:	21 e0       	ldi	r18, 0x01	; 1
 452:	30 e0       	ldi	r19, 0x00	; 0
 454:	40 ef       	ldi	r20, 0xF0	; 240
 456:	50 e0       	ldi	r21, 0x00	; 0
 458:	60 e0       	ldi	r22, 0x00	; 0
 45a:	ce 01       	movw	r24, r28
 45c:	44 96       	adiw	r24, 0x14	; 20
 45e:	0e 94 51 03 	call	0x6a2	; 0x6a2 <memcpy>
			comprobar_Teclado(&state, &caracter);
 462:	be 01       	movw	r22, r28
 464:	6d 5f       	subi	r22, 0xFD	; 253
 466:	7f 4f       	sbci	r23, 0xFF	; 255
 468:	ce 01       	movw	r24, r28
 46a:	01 96       	adiw	r24, 0x01	; 1
 46c:	0e 94 8f 00 	call	0x11e	; 0x11e <comprobar_Teclado>
			Enviar_Mensaje(Cadena1, Cadena2);
 470:	be 01       	movw	r22, r28
 472:	6c 5e       	subi	r22, 0xEC	; 236
 474:	7f 4f       	sbci	r23, 0xFF	; 255
 476:	ce 01       	movw	r24, r28
 478:	04 96       	adiw	r24, 0x04	; 4
 47a:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <Enviar_Mensaje>
 47e:	2f ef       	ldi	r18, 0xFF	; 255
 480:	89 e6       	ldi	r24, 0x69	; 105
 482:	98 e1       	ldi	r25, 0x18	; 24
 484:	21 50       	subi	r18, 0x01	; 1
 486:	80 40       	sbci	r24, 0x00	; 0
 488:	90 40       	sbci	r25, 0x00	; 0
 48a:	e1 f7       	brne	.-8      	; 0x484 <__EEPROM_REGION_LENGTH__+0x84>
 48c:	00 c0       	rjmp	.+0      	; 0x48e <__EEPROM_REGION_LENGTH__+0x8e>
 48e:	00 00       	nop
 490:	53 cf       	rjmp	.-346    	; 0x338 <main+0x30>
			_delay_ms(500);
		} else if (state == 4) {				// Contraseña Incorrecta
 492:	04 97       	sbiw	r24, 0x04	; 4
 494:	09 f0       	breq	.+2      	; 0x498 <__EEPROM_REGION_LENGTH__+0x98>
 496:	50 cf       	rjmp	.-352    	; 0x338 <main+0x30>
			sprintf(Cadena1, "PASS incorrecta");
 498:	20 e1       	ldi	r18, 0x10	; 16
 49a:	30 e0       	ldi	r19, 0x00	; 0
 49c:	41 e0       	ldi	r20, 0x01	; 1
 49e:	51 e0       	ldi	r21, 0x01	; 1
 4a0:	60 e0       	ldi	r22, 0x00	; 0
 4a2:	ce 01       	movw	r24, r28
 4a4:	04 96       	adiw	r24, 0x04	; 4
 4a6:	0e 94 51 03 	call	0x6a2	; 0x6a2 <memcpy>
			sprintf(Cadena2, "Tries Left: ");
 4aa:	2d e0       	ldi	r18, 0x0D	; 13
 4ac:	30 e0       	ldi	r19, 0x00	; 0
 4ae:	41 e1       	ldi	r20, 0x11	; 17
 4b0:	51 e0       	ldi	r21, 0x01	; 1
 4b2:	60 e0       	ldi	r22, 0x00	; 0
 4b4:	ce 01       	movw	r24, r28
 4b6:	44 96       	adiw	r24, 0x14	; 20
 4b8:	0e 94 51 03 	call	0x6a2	; 0x6a2 <memcpy>
			comprobar_Teclado(&state, &caracter);
 4bc:	be 01       	movw	r22, r28
 4be:	6d 5f       	subi	r22, 0xFD	; 253
 4c0:	7f 4f       	sbci	r23, 0xFF	; 255
 4c2:	ce 01       	movw	r24, r28
 4c4:	01 96       	adiw	r24, 0x01	; 1
 4c6:	0e 94 8f 00 	call	0x11e	; 0x11e <comprobar_Teclado>
			Enviar_Mensaje(Cadena1, Cadena2);
 4ca:	be 01       	movw	r22, r28
 4cc:	6c 5e       	subi	r22, 0xEC	; 236
 4ce:	7f 4f       	sbci	r23, 0xFF	; 255
 4d0:	ce 01       	movw	r24, r28
 4d2:	04 96       	adiw	r24, 0x04	; 4
 4d4:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <Enviar_Mensaje>
 4d8:	2f ef       	ldi	r18, 0xFF	; 255
 4da:	89 e6       	ldi	r24, 0x69	; 105
 4dc:	98 e1       	ldi	r25, 0x18	; 24
 4de:	21 50       	subi	r18, 0x01	; 1
 4e0:	80 40       	sbci	r24, 0x00	; 0
 4e2:	90 40       	sbci	r25, 0x00	; 0
 4e4:	e1 f7       	brne	.-8      	; 0x4de <__EEPROM_REGION_LENGTH__+0xde>
 4e6:	00 c0       	rjmp	.+0      	; 0x4e8 <__EEPROM_REGION_LENGTH__+0xe8>
 4e8:	00 00       	nop
 4ea:	26 cf       	rjmp	.-436    	; 0x338 <main+0x30>

Disassembly of section .text.__dummy_fini:

0000072c <_fini>:
 72c:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

0000072e <__funcs_on_exit>:
 72e:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

00000730 <__simulator_exit>:
 730:	08 95       	ret

Disassembly of section .text.exit:

000006fe <exit>:
 6fe:	ec 01       	movw	r28, r24
 700:	0e 94 97 03 	call	0x72e	; 0x72e <__funcs_on_exit>
 704:	0e 94 96 03 	call	0x72c	; 0x72c <_fini>
 708:	ce 01       	movw	r24, r28
 70a:	0e 94 98 03 	call	0x730	; 0x730 <__simulator_exit>
 70e:	ce 01       	movw	r24, r28
 710:	0e 94 94 03 	call	0x728	; 0x728 <_Exit>

Disassembly of section .text.memcpy:

000006a2 <memcpy>:
 6a2:	cf 92       	push	r12
 6a4:	df 92       	push	r13
 6a6:	ef 92       	push	r14
 6a8:	6a 01       	movw	r12, r20
 6aa:	e6 2e       	mov	r14, r22
 6ac:	dc 01       	movw	r26, r24
 6ae:	28 0f       	add	r18, r24
 6b0:	39 1f       	adc	r19, r25
 6b2:	a2 17       	cp	r26, r18
 6b4:	b3 07       	cpc	r27, r19
 6b6:	51 f0       	breq	.+20     	; 0x6cc <memcpy+0x2a>
 6b8:	f6 01       	movw	r30, r12
 6ba:	44 91       	lpm	r20, Z
 6bc:	e7 fc       	sbrc	r14, 7
 6be:	40 81       	ld	r20, Z
 6c0:	4d 93       	st	X+, r20
 6c2:	4f ef       	ldi	r20, 0xFF	; 255
 6c4:	c4 1a       	sub	r12, r20
 6c6:	d4 0a       	sbc	r13, r20
 6c8:	e4 0a       	sbc	r14, r20
 6ca:	f3 cf       	rjmp	.-26     	; 0x6b2 <memcpy+0x10>
 6cc:	ef 90       	pop	r14
 6ce:	df 90       	pop	r13
 6d0:	cf 90       	pop	r12
 6d2:	08 95       	ret

Disassembly of section .text._Exit:

00000728 <_Exit>:
 728:	0e 94 60 00 	call	0xc0	; 0xc0 <_exit>
