
Cerradura.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000d08  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000ce  00000000  00000000  000000d4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000012  00800100  00800100  00000d08  2**0
                  ALLOC
  3 .comment      0000002f  00000000  00000000  00000d08  2**0
                  CONTENTS, READONLY
  4 .stack.descriptors.hdr 00000054  00000000  00000000  00000d37  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 000000e8  00000000  00000000  00000d90  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c4c  00000000  00000000  00000e78  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000942  00000000  00000000  00002ac4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b58  00000000  00000000  00003406  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001c0  00000000  00000000  00003f60  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000282  00000000  00000000  00004120  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000df6  00000000  00000000  000043a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  00005198  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .text         00000004  00000c06  00000c06  00000cda  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00005228  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .text.LCD_cmd 0000004a  000009d0  000009d0  00000aa4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.init_LCD 000000bc  00000720  00000720  000007f4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.init_Pins 00000010  00000bec  00000bec  00000cc0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.LCD_write 0000004a  00000a1a  00000a1a  00000aee  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .rodata       00000020  00800112  00000c14  00000ce8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 20 .text.comprobar_Teclado 000001aa  00000576  00000576  0000064a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.Enviar_Mensaje 0000008e  00000876  00000876  0000094a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .progmemx.data 000000b2  000000ce  000000ce  000001a2  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 23 .text.Bienvenida 00000012  00000bc8  00000bc8  00000c9c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text.almacenar_Contrasena 00000012  00000bda  00000bda  00000cae  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text.verificar_Contrasena 00000062  0000096e  0000096e  00000a42  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .text.abrir_Cerradura 00000030  00000adc  00000adc  00000bb0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .text.cambiar_Contrasena 0000006a  00000904  00000904  000009d8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .text.activar_Alarma 00000020  00000b5c  00000b5c  00000c30  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .text.inicializar_EEPROM 0000009a  000007dc  000007dc  000008b0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .text.main    000003f6  00000180  00000180  00000254  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 31 .bss.intentos 00000002  00800132  00800132  00000d08  2**0
                  ALLOC
 32 .bss.state    00000002  00800134  00800134  00000d08  2**0
                  ALLOC
 33 .text.libgcc  0000001a  00000b98  00000b98  00000c6c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 34 .text.__dummy_fini 00000002  00000c0e  00000c0e  00000ce2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 35 .text.__dummy_funcs_on_exit 00000002  00000c10  00000c10  00000ce4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 36 .text.__dummy_simulator_exit 00000002  00000c12  00000c12  00000ce6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 37 .text.exit    00000016  00000bb2  00000bb2  00000c86  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 38 .text.strcmp  00000042  00000a64  00000a64  00000b38  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 39 .text.strlen  0000002c  00000b0c  00000b0c  00000be0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 40 .text._Exit   00000004  00000c0a  00000c0a  00000cde  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 41 .text.avrlibc 00000024  00000b38  00000b38  00000c0c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 42 .text.avrlibc 00000036  00000aa6  00000aa6  00000b7a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 43 .text.avrlibc 0000001c  00000b7c  00000b7c  00000c50  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 44 .text.libgcc  0000000a  00000bfc  00000bfc  00000cd0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3d 00 	jmp	0x7a	; 0x7a <__ctors_end>
   4:	0c 94 03 06 	jmp	0xc06	; 0xc06 <__bad_interrupt>
   8:	0c 94 03 06 	jmp	0xc06	; 0xc06 <__bad_interrupt>
   c:	0c 94 03 06 	jmp	0xc06	; 0xc06 <__bad_interrupt>
  10:	0c 94 03 06 	jmp	0xc06	; 0xc06 <__bad_interrupt>
  14:	0c 94 03 06 	jmp	0xc06	; 0xc06 <__bad_interrupt>
  18:	0c 94 03 06 	jmp	0xc06	; 0xc06 <__bad_interrupt>
  1c:	0c 94 03 06 	jmp	0xc06	; 0xc06 <__bad_interrupt>
  20:	0c 94 03 06 	jmp	0xc06	; 0xc06 <__bad_interrupt>
  24:	0c 94 03 06 	jmp	0xc06	; 0xc06 <__bad_interrupt>
  28:	0c 94 03 06 	jmp	0xc06	; 0xc06 <__bad_interrupt>
  2c:	0c 94 03 06 	jmp	0xc06	; 0xc06 <__bad_interrupt>
  30:	0c 94 03 06 	jmp	0xc06	; 0xc06 <__bad_interrupt>
  34:	0c 94 03 06 	jmp	0xc06	; 0xc06 <__bad_interrupt>
  38:	0c 94 03 06 	jmp	0xc06	; 0xc06 <__bad_interrupt>
  3c:	0c 94 03 06 	jmp	0xc06	; 0xc06 <__bad_interrupt>
  40:	0c 94 03 06 	jmp	0xc06	; 0xc06 <__bad_interrupt>
  44:	0c 94 03 06 	jmp	0xc06	; 0xc06 <__bad_interrupt>
  48:	0c 94 03 06 	jmp	0xc06	; 0xc06 <__bad_interrupt>
  4c:	0c 94 03 06 	jmp	0xc06	; 0xc06 <__bad_interrupt>
  50:	0c 94 03 06 	jmp	0xc06	; 0xc06 <__bad_interrupt>
  54:	0c 94 03 06 	jmp	0xc06	; 0xc06 <__bad_interrupt>
  58:	0c 94 03 06 	jmp	0xc06	; 0xc06 <__bad_interrupt>
  5c:	0c 94 03 06 	jmp	0xc06	; 0xc06 <__bad_interrupt>
  60:	0c 94 03 06 	jmp	0xc06	; 0xc06 <__bad_interrupt>
  64:	0c 94 03 06 	jmp	0xc06	; 0xc06 <__bad_interrupt>

00000068 <.dinit>:
  68:	01 00       	.word	0x0001	; ????
  6a:	01 12       	cpse	r0, r17
  6c:	80 01       	movw	r16, r0
  6e:	12 01       	movw	r2, r4
  70:	32 00       	.word	0x0032	; ????
  72:	0c 14       	cp	r0, r12
  74:	01 32       	cpi	r16, 0x21	; 33
  76:	01 36       	cpi	r16, 0x61	; 97
  78:	80 00       	.word	0x0080	; ????

0000007a <__ctors_end>:
  7a:	11 24       	eor	r1, r1
  7c:	1f be       	out	0x3f, r1	; 63
  7e:	cf ef       	ldi	r28, 0xFF	; 255
  80:	d8 e0       	ldi	r29, 0x08	; 8
  82:	de bf       	out	0x3e, r29	; 62
  84:	cd bf       	out	0x3d, r28	; 61

00000086 <__do_copy_data>:
  86:	e8 e6       	ldi	r30, 0x68	; 104
  88:	f0 e0       	ldi	r31, 0x00	; 0
  8a:	40 e0       	ldi	r20, 0x00	; 0
  8c:	17 c0       	rjmp	.+46     	; 0xbc <__do_clear_bss+0x8>
  8e:	b5 91       	lpm	r27, Z+
  90:	a5 91       	lpm	r26, Z+
  92:	35 91       	lpm	r19, Z+
  94:	25 91       	lpm	r18, Z+
  96:	05 91       	lpm	r16, Z+
  98:	07 fd       	sbrc	r16, 7
  9a:	0c c0       	rjmp	.+24     	; 0xb4 <__do_clear_bss>
  9c:	95 91       	lpm	r25, Z+
  9e:	85 91       	lpm	r24, Z+
  a0:	ef 01       	movw	r28, r30
  a2:	f9 2f       	mov	r31, r25
  a4:	e8 2f       	mov	r30, r24
  a6:	05 90       	lpm	r0, Z+
  a8:	0d 92       	st	X+, r0
  aa:	a2 17       	cp	r26, r18
  ac:	b3 07       	cpc	r27, r19
  ae:	d9 f7       	brne	.-10     	; 0xa6 <__do_copy_data+0x20>
  b0:	fe 01       	movw	r30, r28
  b2:	04 c0       	rjmp	.+8      	; 0xbc <__do_clear_bss+0x8>

000000b4 <__do_clear_bss>:
  b4:	1d 92       	st	X+, r1
  b6:	a2 17       	cp	r26, r18
  b8:	b3 07       	cpc	r27, r19
  ba:	e1 f7       	brne	.-8      	; 0xb4 <__do_clear_bss>
  bc:	e9 37       	cpi	r30, 0x79	; 121
  be:	f4 07       	cpc	r31, r20
  c0:	31 f7       	brne	.-52     	; 0x8e <__do_copy_data+0x8>
  c2:	0e 94 c0 00 	call	0x180	; 0x180 <main>
  c6:	0c 94 d9 05 	jmp	0xbb2	; 0xbb2 <exit>

000000ca <_exit>:
  ca:	f8 94       	cli

000000cc <__stop_program>:
  cc:	ff cf       	rjmp	.-2      	; 0xcc <__stop_program>

Disassembly of section .text:

00000c06 <__bad_interrupt>:
 c06:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

Disassembly of section .text.LCD_cmd:

000009d0 <LCD_cmd>:
		}
	}
}

void LCD_cmd(char cmd) {
	PORTB = (cmd >> 4) & 0x0F; // Enviar los 4 bits más significativos
 9d0:	98 2f       	mov	r25, r24
 9d2:	92 95       	swap	r25
 9d4:	9f 70       	andi	r25, 0x0F	; 15
 9d6:	95 b9       	out	0x05, r25	; 5
	PORTD &= ~(1 << RS);
 9d8:	9b b1       	in	r25, 0x0b	; 11
 9da:	9f 7d       	andi	r25, 0xDF	; 223
 9dc:	9b b9       	out	0x0b, r25	; 11
	PORTD &= ~(1 << RW);
 9de:	9b b1       	in	r25, 0x0b	; 11
 9e0:	9f 7b       	andi	r25, 0xBF	; 191
 9e2:	9b b9       	out	0x0b, r25	; 11
	PORTD |= (1 << Enable);
 9e4:	9b b1       	in	r25, 0x0b	; 11
 9e6:	90 68       	ori	r25, 0x80	; 128
 9e8:	9b b9       	out	0x0b, r25	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 9ea:	ef e9       	ldi	r30, 0x9F	; 159
 9ec:	ff e0       	ldi	r31, 0x0F	; 15
 9ee:	31 97       	sbiw	r30, 0x01	; 1
 9f0:	f1 f7       	brne	.-4      	; 0x9ee <LCD_cmd+0x1e>
 9f2:	00 c0       	rjmp	.+0      	; 0x9f4 <LCD_cmd+0x24>
 9f4:	00 00       	nop
	_delay_ms(1);
	PORTD &= ~(1 << Enable);
 9f6:	9b b1       	in	r25, 0x0b	; 11
 9f8:	9f 77       	andi	r25, 0x7F	; 127
 9fa:	9b b9       	out	0x0b, r25	; 11

	PORTB = cmd & 0x0F; // Enviar los 4 bits menos significativos
 9fc:	8f 70       	andi	r24, 0x0F	; 15
 9fe:	85 b9       	out	0x05, r24	; 5
	PORTD |= (1 << Enable);
 a00:	8b b1       	in	r24, 0x0b	; 11
 a02:	80 68       	ori	r24, 0x80	; 128
 a04:	8b b9       	out	0x0b, r24	; 11
 a06:	8f e9       	ldi	r24, 0x9F	; 159
 a08:	9f e0       	ldi	r25, 0x0F	; 15
 a0a:	01 97       	sbiw	r24, 0x01	; 1
 a0c:	f1 f7       	brne	.-4      	; 0xa0a <LCD_cmd+0x3a>
 a0e:	00 c0       	rjmp	.+0      	; 0xa10 <LCD_cmd+0x40>
 a10:	00 00       	nop
	_delay_ms(1);
	PORTD &= ~(1 << Enable);
 a12:	8b b1       	in	r24, 0x0b	; 11
 a14:	8f 77       	andi	r24, 0x7F	; 127
 a16:	8b b9       	out	0x0b, r24	; 11
 a18:	08 95       	ret

Disassembly of section .text.init_LCD:

00000720 <init_LCD>:
 720:	2f ef       	ldi	r18, 0xFF	; 255
 722:	80 e7       	ldi	r24, 0x70	; 112
 724:	92 e0       	ldi	r25, 0x02	; 2
 726:	21 50       	subi	r18, 0x01	; 1
 728:	80 40       	sbci	r24, 0x00	; 0
 72a:	90 40       	sbci	r25, 0x00	; 0
 72c:	e1 f7       	brne	.-8      	; 0x726 <init_LCD+0x6>
 72e:	00 c0       	rjmp	.+0      	; 0x730 <init_LCD+0x10>
 730:	00 00       	nop
}

void init_LCD() {
	_delay_ms(50);
	LCD_cmd(0x33);  
 732:	83 e3       	ldi	r24, 0x33	; 51
 734:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <LCD_cmd>
 738:	2f ef       	ldi	r18, 0xFF	; 255
 73a:	80 e7       	ldi	r24, 0x70	; 112
 73c:	92 e0       	ldi	r25, 0x02	; 2
 73e:	21 50       	subi	r18, 0x01	; 1
 740:	80 40       	sbci	r24, 0x00	; 0
 742:	90 40       	sbci	r25, 0x00	; 0
 744:	e1 f7       	brne	.-8      	; 0x73e <init_LCD+0x1e>
 746:	00 c0       	rjmp	.+0      	; 0x748 <init_LCD+0x28>
 748:	00 00       	nop
	_delay_ms(50);
	LCD_cmd(0x32);  
 74a:	82 e3       	ldi	r24, 0x32	; 50
 74c:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <LCD_cmd>
 750:	2f ef       	ldi	r18, 0xFF	; 255
 752:	80 e7       	ldi	r24, 0x70	; 112
 754:	92 e0       	ldi	r25, 0x02	; 2
 756:	21 50       	subi	r18, 0x01	; 1
 758:	80 40       	sbci	r24, 0x00	; 0
 75a:	90 40       	sbci	r25, 0x00	; 0
 75c:	e1 f7       	brne	.-8      	; 0x756 <init_LCD+0x36>
 75e:	00 c0       	rjmp	.+0      	; 0x760 <init_LCD+0x40>
 760:	00 00       	nop
	_delay_ms(50);
	LCD_cmd(0x28);  // Inicializar en 4 bit
 762:	88 e2       	ldi	r24, 0x28	; 40
 764:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <LCD_cmd>
 768:	2f ef       	ldi	r18, 0xFF	; 255
 76a:	80 e7       	ldi	r24, 0x70	; 112
 76c:	92 e0       	ldi	r25, 0x02	; 2
 76e:	21 50       	subi	r18, 0x01	; 1
 770:	80 40       	sbci	r24, 0x00	; 0
 772:	90 40       	sbci	r25, 0x00	; 0
 774:	e1 f7       	brne	.-8      	; 0x76e <init_LCD+0x4e>
 776:	00 c0       	rjmp	.+0      	; 0x778 <init_LCD+0x58>
 778:	00 00       	nop
	_delay_ms(50);
	LCD_cmd(0x0C); 
 77a:	8c e0       	ldi	r24, 0x0C	; 12
 77c:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <LCD_cmd>
 780:	2f ef       	ldi	r18, 0xFF	; 255
 782:	80 e7       	ldi	r24, 0x70	; 112
 784:	92 e0       	ldi	r25, 0x02	; 2
 786:	21 50       	subi	r18, 0x01	; 1
 788:	80 40       	sbci	r24, 0x00	; 0
 78a:	90 40       	sbci	r25, 0x00	; 0
 78c:	e1 f7       	brne	.-8      	; 0x786 <init_LCD+0x66>
 78e:	00 c0       	rjmp	.+0      	; 0x790 <init_LCD+0x70>
 790:	00 00       	nop
	_delay_ms(50);
	LCD_cmd(0x06);  
 792:	86 e0       	ldi	r24, 0x06	; 6
 794:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <LCD_cmd>
 798:	2f ef       	ldi	r18, 0xFF	; 255
 79a:	80 e7       	ldi	r24, 0x70	; 112
 79c:	92 e0       	ldi	r25, 0x02	; 2
 79e:	21 50       	subi	r18, 0x01	; 1
 7a0:	80 40       	sbci	r24, 0x00	; 0
 7a2:	90 40       	sbci	r25, 0x00	; 0
 7a4:	e1 f7       	brne	.-8      	; 0x79e <init_LCD+0x7e>
 7a6:	00 c0       	rjmp	.+0      	; 0x7a8 <init_LCD+0x88>
 7a8:	00 00       	nop
	_delay_ms(50);
	LCD_cmd(0x01);  
 7aa:	81 e0       	ldi	r24, 0x01	; 1
 7ac:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <LCD_cmd>
 7b0:	2f ef       	ldi	r18, 0xFF	; 255
 7b2:	80 e7       	ldi	r24, 0x70	; 112
 7b4:	92 e0       	ldi	r25, 0x02	; 2
 7b6:	21 50       	subi	r18, 0x01	; 1
 7b8:	80 40       	sbci	r24, 0x00	; 0
 7ba:	90 40       	sbci	r25, 0x00	; 0
 7bc:	e1 f7       	brne	.-8      	; 0x7b6 <init_LCD+0x96>
 7be:	00 c0       	rjmp	.+0      	; 0x7c0 <init_LCD+0xa0>
 7c0:	00 00       	nop
	_delay_ms(50);
	LCD_cmd(0x80); 
 7c2:	80 e8       	ldi	r24, 0x80	; 128
 7c4:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <LCD_cmd>
 7c8:	2f ef       	ldi	r18, 0xFF	; 255
 7ca:	80 e7       	ldi	r24, 0x70	; 112
 7cc:	92 e0       	ldi	r25, 0x02	; 2
 7ce:	21 50       	subi	r18, 0x01	; 1
 7d0:	80 40       	sbci	r24, 0x00	; 0
 7d2:	90 40       	sbci	r25, 0x00	; 0
 7d4:	e1 f7       	brne	.-8      	; 0x7ce <init_LCD+0xae>
 7d6:	00 c0       	rjmp	.+0      	; 0x7d8 <init_LCD+0xb8>
 7d8:	00 00       	nop
 7da:	08 95       	ret

Disassembly of section .text.init_Pins:

00000bec <init_Pins>:
	_delay_ms(50);
}

void init_Pins() {
	DDRD = 0xFF;
 bec:	8f ef       	ldi	r24, 0xFF	; 255
 bee:	8a b9       	out	0x0a, r24	; 10
	DDRB = 0xFF;
 bf0:	84 b9       	out	0x04, r24	; 4
	DDRC = 0xF0;
 bf2:	80 ef       	ldi	r24, 0xF0	; 240
 bf4:	87 b9       	out	0x07, r24	; 7
	PORTC = 0x0F;  // Configurar el puerto C para lectura (con pull-up)
 bf6:	8f e0       	ldi	r24, 0x0F	; 15
 bf8:	88 b9       	out	0x08, r24	; 8
 bfa:	08 95       	ret

Disassembly of section .text.LCD_write:

00000a1a <LCD_write>:
}

void LCD_write(char data) {
	PORTB = (data >> 4) & 0x0F; // Enviar los 4 bits más significativos
 a1a:	98 2f       	mov	r25, r24
 a1c:	92 95       	swap	r25
 a1e:	9f 70       	andi	r25, 0x0F	; 15
 a20:	95 b9       	out	0x05, r25	; 5
	PORTD |= (1 << RS);
 a22:	9b b1       	in	r25, 0x0b	; 11
 a24:	90 62       	ori	r25, 0x20	; 32
 a26:	9b b9       	out	0x0b, r25	; 11
	PORTD &= ~(1 << RW);
 a28:	9b b1       	in	r25, 0x0b	; 11
 a2a:	9f 7b       	andi	r25, 0xBF	; 191
 a2c:	9b b9       	out	0x0b, r25	; 11
	PORTD |= (1 << Enable);
 a2e:	9b b1       	in	r25, 0x0b	; 11
 a30:	90 68       	ori	r25, 0x80	; 128
 a32:	9b b9       	out	0x0b, r25	; 11
 a34:	ef e9       	ldi	r30, 0x9F	; 159
 a36:	ff e0       	ldi	r31, 0x0F	; 15
 a38:	31 97       	sbiw	r30, 0x01	; 1
 a3a:	f1 f7       	brne	.-4      	; 0xa38 <LCD_write+0x1e>
 a3c:	00 c0       	rjmp	.+0      	; 0xa3e <LCD_write+0x24>
 a3e:	00 00       	nop
	_delay_ms(1);
	PORTD &= ~(1 << Enable);
 a40:	9b b1       	in	r25, 0x0b	; 11
 a42:	9f 77       	andi	r25, 0x7F	; 127
 a44:	9b b9       	out	0x0b, r25	; 11

	PORTB = data & 0x0F; // Enviar los 4 bits menos significativos
 a46:	8f 70       	andi	r24, 0x0F	; 15
 a48:	85 b9       	out	0x05, r24	; 5
	PORTD |= (1 << Enable);
 a4a:	8b b1       	in	r24, 0x0b	; 11
 a4c:	80 68       	ori	r24, 0x80	; 128
 a4e:	8b b9       	out	0x0b, r24	; 11
 a50:	8f e9       	ldi	r24, 0x9F	; 159
 a52:	9f e0       	ldi	r25, 0x0F	; 15
 a54:	01 97       	sbiw	r24, 0x01	; 1
 a56:	f1 f7       	brne	.-4      	; 0xa54 <LCD_write+0x3a>
 a58:	00 c0       	rjmp	.+0      	; 0xa5a <LCD_write+0x40>
 a5a:	00 00       	nop
	_delay_ms(1);
	PORTD &= ~(1 << Enable);
 a5c:	8b b1       	in	r24, 0x0b	; 11
 a5e:	8f 77       	andi	r24, 0x7F	; 127
 a60:	8b b9       	out	0x0b, r24	; 11
 a62:	08 95       	ret

Disassembly of section .text.comprobar_Teclado:

00000576 <comprobar_Teclado>:
}

void comprobar_Teclado(int* state, char* caracter) {
 576:	cf 92       	push	r12
 578:	df 92       	push	r13
 57a:	ef 92       	push	r14
 57c:	ff 92       	push	r15
 57e:	0f 93       	push	r16
 580:	1f 93       	push	r17
 582:	cf 93       	push	r28
 584:	df 93       	push	r29
 586:	cd b7       	in	r28, 0x3d	; 61
 588:	de b7       	in	r29, 0x3e	; 62
 58a:	a0 97       	sbiw	r28, 0x20	; 32
 58c:	0f b6       	in	r0, 0x3f	; 63
 58e:	f8 94       	cli
 590:	de bf       	out	0x3e, r29	; 62
 592:	0f be       	out	0x3f, r0	; 63
 594:	cd bf       	out	0x3d, r28	; 61
	int Columna_ = -1;
	int Fila_ = -1;
	int Fila[4] = {Fila1, Fila2, Fila3, Fila4};
 596:	28 e0       	ldi	r18, 0x08	; 8
 598:	e2 e1       	ldi	r30, 0x12	; 18
 59a:	f1 e0       	ldi	r31, 0x01	; 1
 59c:	de 01       	movw	r26, r28
 59e:	11 96       	adiw	r26, 0x01	; 1
 5a0:	01 90       	ld	r0, Z+
 5a2:	0d 92       	st	X+, r0
 5a4:	2a 95       	dec	r18
 5a6:	e1 f7       	brne	.-8      	; 0x5a0 <comprobar_Teclado+0x2a>
	int Col[4] = {Col1, Col2, Col3, Col4};
 5a8:	28 e0       	ldi	r18, 0x08	; 8
 5aa:	ea e1       	ldi	r30, 0x1A	; 26
 5ac:	f1 e0       	ldi	r31, 0x01	; 1
 5ae:	de 01       	movw	r26, r28
 5b0:	19 96       	adiw	r26, 0x09	; 9
 5b2:	01 90       	ld	r0, Z+
 5b4:	0d 92       	st	X+, r0
 5b6:	2a 95       	dec	r18
 5b8:	e1 f7       	brne	.-8      	; 0x5b2 <comprobar_Teclado+0x3c>
	char Teclado[4][4] = {
 5ba:	20 e1       	ldi	r18, 0x10	; 16
 5bc:	e2 e2       	ldi	r30, 0x22	; 34
 5be:	f1 e0       	ldi	r31, 0x01	; 1
 5c0:	de 01       	movw	r26, r28
 5c2:	51 96       	adiw	r26, 0x11	; 17
 5c4:	01 90       	ld	r0, Z+
 5c6:	0d 92       	st	X+, r0
 5c8:	2a 95       	dec	r18
 5ca:	e1 f7       	brne	.-8      	; 0x5c4 <comprobar_Teclado+0x4e>
		{'4', '5', '6', 'B'},
		{'7', '8', '9', 'C'},
		{'*', '0', '#', 'D'}
	};

	PORTD |= (1 << Fila1) | (1 << Fila2) | (1 << Fila3) | (1 << Fila4);
 5cc:	2b b1       	in	r18, 0x0b	; 11
 5ce:	2e 61       	ori	r18, 0x1E	; 30
 5d0:	2b b9       	out	0x0b, r18	; 11
	for (int i = 0; i < 4; i++){
 5d2:	a0 e0       	ldi	r26, 0x00	; 0
 5d4:	b0 e0       	ldi	r27, 0x00	; 0
	PORTD &= ~(1 << Enable);
}

void comprobar_Teclado(int* state, char* caracter) {
	int Columna_ = -1;
	int Fila_ = -1;
 5d6:	ee 24       	eor	r14, r14
 5d8:	ea 94       	dec	r14
 5da:	fe 2c       	mov	r15, r14
	_delay_ms(1);
	PORTD &= ~(1 << Enable);
}

void comprobar_Teclado(int* state, char* caracter) {
	int Columna_ = -1;
 5dc:	0f ef       	ldi	r16, 0xFF	; 255
 5de:	1f ef       	ldi	r17, 0xFF	; 255
		{'7', '8', '9', 'C'},
		{'*', '0', '#', 'D'}
	};

	PORTD |= (1 << Fila1) | (1 << Fila2) | (1 << Fila3) | (1 << Fila4);
	for (int i = 0; i < 4; i++){
 5e0:	52 c0       	rjmp	.+164    	; 0x686 <comprobar_Teclado+0x110>
		PORTD &= ~(1 << Fila[i]);
 5e2:	4b b1       	in	r20, 0x0b	; 11
 5e4:	fd 01       	movw	r30, r26
 5e6:	ee 0f       	add	r30, r30
 5e8:	ff 1f       	adc	r31, r31
 5ea:	cc 24       	eor	r12, r12
 5ec:	c3 94       	inc	r12
 5ee:	d1 2c       	mov	r13, r1
 5f0:	cc 0e       	add	r12, r28
 5f2:	dd 1e       	adc	r13, r29
 5f4:	ec 0d       	add	r30, r12
 5f6:	fd 1d       	adc	r31, r13
 5f8:	21 e0       	ldi	r18, 0x01	; 1
 5fa:	30 e0       	ldi	r19, 0x00	; 0
 5fc:	00 80       	ld	r0, Z
 5fe:	02 c0       	rjmp	.+4      	; 0x604 <comprobar_Teclado+0x8e>
 600:	22 0f       	add	r18, r18
 602:	33 1f       	adc	r19, r19
 604:	0a 94       	dec	r0
 606:	e2 f7       	brpl	.-8      	; 0x600 <comprobar_Teclado+0x8a>
 608:	20 95       	com	r18
 60a:	24 23       	and	r18, r20
 60c:	2b b9       	out	0x0b, r18	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 60e:	2a e1       	ldi	r18, 0x1A	; 26
 610:	2a 95       	dec	r18
 612:	f1 f7       	brne	.-4      	; 0x610 <comprobar_Teclado+0x9a>
 614:	00 c0       	rjmp	.+0      	; 0x616 <comprobar_Teclado+0xa0>
		_delay_us(5);
		for (int j = 0; j < 4; j++) {
 616:	40 e0       	ldi	r20, 0x00	; 0
 618:	50 e0       	ldi	r21, 0x00	; 0
 61a:	16 c0       	rjmp	.+44     	; 0x648 <comprobar_Teclado+0xd2>
			if (!(PINC & (1 << Col[j]))) {
 61c:	26 b1       	in	r18, 0x06	; 6
 61e:	fa 01       	movw	r30, r20
 620:	ee 0f       	add	r30, r30
 622:	ff 1f       	adc	r31, r31
 624:	cc 24       	eor	r12, r12
 626:	c3 94       	inc	r12
 628:	d1 2c       	mov	r13, r1
 62a:	cc 0e       	add	r12, r28
 62c:	dd 1e       	adc	r13, r29
 62e:	ec 0d       	add	r30, r12
 630:	fd 1d       	adc	r31, r13
 632:	30 e0       	ldi	r19, 0x00	; 0
 634:	00 84       	ldd	r0, Z+8	; 0x08
 636:	02 c0       	rjmp	.+4      	; 0x63c <comprobar_Teclado+0xc6>
 638:	35 95       	asr	r19
 63a:	27 95       	ror	r18
 63c:	0a 94       	dec	r0
 63e:	e2 f7       	brpl	.-8      	; 0x638 <comprobar_Teclado+0xc2>
 640:	20 ff       	sbrs	r18, 0
 642:	06 c0       	rjmp	.+12     	; 0x650 <comprobar_Teclado+0xda>

	PORTD |= (1 << Fila1) | (1 << Fila2) | (1 << Fila3) | (1 << Fila4);
	for (int i = 0; i < 4; i++){
		PORTD &= ~(1 << Fila[i]);
		_delay_us(5);
		for (int j = 0; j < 4; j++) {
 644:	4f 5f       	subi	r20, 0xFF	; 255
 646:	5f 4f       	sbci	r21, 0xFF	; 255
 648:	44 30       	cpi	r20, 0x04	; 4
 64a:	51 05       	cpc	r21, r1
 64c:	3c f3       	brlt	.-50     	; 0x61c <comprobar_Teclado+0xa6>
 64e:	02 c0       	rjmp	.+4      	; 0x654 <comprobar_Teclado+0xde>
			if (!(PINC & (1 << Col[j]))) {
				Columna_ = j;
				Fila_ = i; 
 650:	7d 01       	movw	r14, r26
	for (int i = 0; i < 4; i++){
		PORTD &= ~(1 << Fila[i]);
		_delay_us(5);
		for (int j = 0; j < 4; j++) {
			if (!(PINC & (1 << Col[j]))) {
				Columna_ = j;
 652:	8a 01       	movw	r16, r20
				Fila_ = i; 
				break;
			}
		}
		PORTD |= (1 << Fila[i]);
 654:	4b b1       	in	r20, 0x0b	; 11
 656:	fd 01       	movw	r30, r26
 658:	ee 0f       	add	r30, r30
 65a:	ff 1f       	adc	r31, r31
 65c:	21 e0       	ldi	r18, 0x01	; 1
 65e:	30 e0       	ldi	r19, 0x00	; 0
 660:	2c 0f       	add	r18, r28
 662:	3d 1f       	adc	r19, r29
 664:	e2 0f       	add	r30, r18
 666:	f3 1f       	adc	r31, r19
 668:	21 e0       	ldi	r18, 0x01	; 1
 66a:	30 e0       	ldi	r19, 0x00	; 0
 66c:	00 80       	ld	r0, Z
 66e:	02 c0       	rjmp	.+4      	; 0x674 <comprobar_Teclado+0xfe>
 670:	22 0f       	add	r18, r18
 672:	33 1f       	adc	r19, r19
 674:	0a 94       	dec	r0
 676:	e2 f7       	brpl	.-8      	; 0x670 <comprobar_Teclado+0xfa>
 678:	24 2b       	or	r18, r20
 67a:	2b b9       	out	0x0b, r18	; 11
		if (Columna_ != -1) {
 67c:	0f 3f       	cpi	r16, 0xFF	; 255
 67e:	3f ef       	ldi	r19, 0xFF	; 255
 680:	13 07       	cpc	r17, r19
 682:	29 f4       	brne	.+10     	; 0x68e <comprobar_Teclado+0x118>
		{'7', '8', '9', 'C'},
		{'*', '0', '#', 'D'}
	};

	PORTD |= (1 << Fila1) | (1 << Fila2) | (1 << Fila3) | (1 << Fila4);
	for (int i = 0; i < 4; i++){
 684:	11 96       	adiw	r26, 0x01	; 1
 686:	a4 30       	cpi	r26, 0x04	; 4
 688:	b1 05       	cpc	r27, r1
 68a:	0c f4       	brge	.+2      	; 0x68e <comprobar_Teclado+0x118>
 68c:	aa cf       	rjmp	.-172    	; 0x5e2 <comprobar_Teclado+0x6c>
		if (Columna_ != -1) {
			break;
		}
	}

	if (Columna_ != -1) {
 68e:	0f 3f       	cpi	r16, 0xFF	; 255
 690:	ef ef       	ldi	r30, 0xFF	; 255
 692:	1e 07       	cpc	r17, r30
 694:	a1 f1       	breq	.+104    	; 0x6fe <comprobar_Teclado+0x188>
		*caracter = Teclado[Fila_][Columna_];
 696:	ee 0c       	add	r14, r14
 698:	ff 1c       	adc	r15, r15
 69a:	ee 0c       	add	r14, r14
 69c:	ff 1c       	adc	r15, r15
 69e:	cc 24       	eor	r12, r12
 6a0:	c3 94       	inc	r12
 6a2:	d1 2c       	mov	r13, r1
 6a4:	cc 0e       	add	r12, r28
 6a6:	dd 1e       	adc	r13, r29
 6a8:	ec 0c       	add	r14, r12
 6aa:	fd 1c       	adc	r15, r13
 6ac:	f7 01       	movw	r30, r14
 6ae:	e0 0f       	add	r30, r16
 6b0:	f1 1f       	adc	r31, r17
 6b2:	20 89       	ldd	r18, Z+16	; 0x10
 6b4:	fb 01       	movw	r30, r22
 6b6:	20 83       	st	Z, r18
		
		if (*state == 0 && *caracter == 'A') {
 6b8:	fc 01       	movw	r30, r24
 6ba:	40 81       	ld	r20, Z
 6bc:	51 81       	ldd	r21, Z+1	; 0x01
 6be:	45 2b       	or	r20, r21
 6c0:	31 f4       	brne	.+12     	; 0x6ce <comprobar_Teclado+0x158>
 6c2:	21 34       	cpi	r18, 0x41	; 65
 6c4:	21 f4       	brne	.+8      	; 0x6ce <comprobar_Teclado+0x158>
			*state = 1;
 6c6:	21 e0       	ldi	r18, 0x01	; 1
 6c8:	30 e0       	ldi	r19, 0x00	; 0
 6ca:	31 83       	std	Z+1, r19	; 0x01
 6cc:	20 83       	st	Z, r18
		}
		
		if (*state == 1) {
 6ce:	fc 01       	movw	r30, r24
 6d0:	20 81       	ld	r18, Z
 6d2:	31 81       	ldd	r19, Z+1	; 0x01
 6d4:	21 30       	cpi	r18, 0x01	; 1
 6d6:	31 05       	cpc	r19, r1
 6d8:	a1 f4       	brne	.+40     	; 0x702 <comprobar_Teclado+0x18c>
			if (*caracter == '*') {
 6da:	fb 01       	movw	r30, r22
 6dc:	20 81       	ld	r18, Z
 6de:	2a 32       	cpi	r18, 0x2A	; 42
 6e0:	31 f4       	brne	.+12     	; 0x6ee <comprobar_Teclado+0x178>
				*state = 2;
 6e2:	22 e0       	ldi	r18, 0x02	; 2
 6e4:	30 e0       	ldi	r19, 0x00	; 0
 6e6:	fc 01       	movw	r30, r24
 6e8:	31 83       	std	Z+1, r19	; 0x01
 6ea:	20 83       	st	Z, r18
 6ec:	0a c0       	rjmp	.+20     	; 0x702 <comprobar_Teclado+0x18c>
			} else if (*caracter == '#') {
 6ee:	23 32       	cpi	r18, 0x23	; 35
 6f0:	41 f4       	brne	.+16     	; 0x702 <comprobar_Teclado+0x18c>
				*state = 3;
 6f2:	23 e0       	ldi	r18, 0x03	; 3
 6f4:	30 e0       	ldi	r19, 0x00	; 0
 6f6:	fc 01       	movw	r30, r24
 6f8:	31 83       	std	Z+1, r19	; 0x01
 6fa:	20 83       	st	Z, r18
 6fc:	02 c0       	rjmp	.+4      	; 0x702 <comprobar_Teclado+0x18c>
			}
		}
	} else {
		*caracter = '\0';
 6fe:	fb 01       	movw	r30, r22
 700:	10 82       	st	Z, r1
	}
}
 702:	a0 96       	adiw	r28, 0x20	; 32
 704:	0f b6       	in	r0, 0x3f	; 63
 706:	f8 94       	cli
 708:	de bf       	out	0x3e, r29	; 62
 70a:	0f be       	out	0x3f, r0	; 63
 70c:	cd bf       	out	0x3d, r28	; 61
 70e:	df 91       	pop	r29
 710:	cf 91       	pop	r28
 712:	1f 91       	pop	r17
 714:	0f 91       	pop	r16
 716:	ff 90       	pop	r15
 718:	ef 90       	pop	r14
 71a:	df 90       	pop	r13
 71c:	cf 90       	pop	r12
 71e:	08 95       	ret

Disassembly of section .text.Enviar_Mensaje:

00000876 <Enviar_Mensaje>:

void Bienvenida() {
	Enviar_Mensaje("Bienvenido", "Ingrese A");
}

void Enviar_Mensaje(const char* Cadena1, const char* Cadena2) {
 876:	6f 92       	push	r6
 878:	7f 92       	push	r7
 87a:	8f 92       	push	r8
 87c:	cf 92       	push	r12
 87e:	df 92       	push	r13
 880:	ef 92       	push	r14
 882:	cf 93       	push	r28
 884:	df 93       	push	r29
 886:	3b 01       	movw	r6, r22
 888:	88 2e       	mov	r8, r24
 88a:	69 01       	movw	r12, r18
 88c:	e4 2e       	mov	r14, r20
	LCD_cmd(0x01);
 88e:	81 e0       	ldi	r24, 0x01	; 1
 890:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <LCD_cmd>
	for (int i = 0; i < 16 && Cadena1[i] != '\0'; i++) {
 894:	c0 e0       	ldi	r28, 0x00	; 0
 896:	d0 e0       	ldi	r29, 0x00	; 0
 898:	03 c0       	rjmp	.+6      	; 0x8a0 <Enviar_Mensaje+0x2a>
		LCD_write(Cadena1[i]);
 89a:	0e 94 0d 05 	call	0xa1a	; 0xa1a <LCD_write>
	Enviar_Mensaje("Bienvenido", "Ingrese A");
}

void Enviar_Mensaje(const char* Cadena1, const char* Cadena2) {
	LCD_cmd(0x01);
	for (int i = 0; i < 16 && Cadena1[i] != '\0'; i++) {
 89e:	21 96       	adiw	r28, 0x01	; 1
 8a0:	c0 31       	cpi	r28, 0x10	; 16
 8a2:	d1 05       	cpc	r29, r1
 8a4:	6c f4       	brge	.+26     	; 0x8c0 <Enviar_Mensaje+0x4a>
 8a6:	a8 2d       	mov	r26, r8
 8a8:	c3 01       	movw	r24, r6
 8aa:	8c 0f       	add	r24, r28
 8ac:	9d 1f       	adc	r25, r29
 8ae:	a1 1d       	adc	r26, r1
 8b0:	d7 fd       	sbrc	r29, 7
 8b2:	aa 95       	dec	r26
 8b4:	fc 01       	movw	r30, r24
 8b6:	84 91       	lpm	r24, Z
 8b8:	a7 fd       	sbrc	r26, 7
 8ba:	80 81       	ld	r24, Z
 8bc:	81 11       	cpse	r24, r1
 8be:	ed cf       	rjmp	.-38     	; 0x89a <Enviar_Mensaje+0x24>
		LCD_write(Cadena1[i]);
	}
	LCD_cmd(0xC0);
 8c0:	80 ec       	ldi	r24, 0xC0	; 192
 8c2:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <LCD_cmd>
	for (int i = 0; i < 16 && Cadena2[i] != '\0'; i++) {
 8c6:	c0 e0       	ldi	r28, 0x00	; 0
 8c8:	d0 e0       	ldi	r29, 0x00	; 0
 8ca:	03 c0       	rjmp	.+6      	; 0x8d2 <Enviar_Mensaje+0x5c>
		LCD_write(Cadena2[i]);
 8cc:	0e 94 0d 05 	call	0xa1a	; 0xa1a <LCD_write>
	LCD_cmd(0x01);
	for (int i = 0; i < 16 && Cadena1[i] != '\0'; i++) {
		LCD_write(Cadena1[i]);
	}
	LCD_cmd(0xC0);
	for (int i = 0; i < 16 && Cadena2[i] != '\0'; i++) {
 8d0:	21 96       	adiw	r28, 0x01	; 1
 8d2:	c0 31       	cpi	r28, 0x10	; 16
 8d4:	d1 05       	cpc	r29, r1
 8d6:	6c f4       	brge	.+26     	; 0x8f2 <Enviar_Mensaje+0x7c>
 8d8:	ae 2d       	mov	r26, r14
 8da:	c6 01       	movw	r24, r12
 8dc:	8c 0f       	add	r24, r28
 8de:	9d 1f       	adc	r25, r29
 8e0:	a1 1d       	adc	r26, r1
 8e2:	d7 fd       	sbrc	r29, 7
 8e4:	aa 95       	dec	r26
 8e6:	fc 01       	movw	r30, r24
 8e8:	84 91       	lpm	r24, Z
 8ea:	a7 fd       	sbrc	r26, 7
 8ec:	80 81       	ld	r24, Z
 8ee:	81 11       	cpse	r24, r1
 8f0:	ed cf       	rjmp	.-38     	; 0x8cc <Enviar_Mensaje+0x56>
		LCD_write(Cadena2[i]);
	}
}
 8f2:	df 91       	pop	r29
 8f4:	cf 91       	pop	r28
 8f6:	ef 90       	pop	r14
 8f8:	df 90       	pop	r13
 8fa:	cf 90       	pop	r12
 8fc:	8f 90       	pop	r8
 8fe:	7f 90       	pop	r7
 900:	6f 90       	pop	r6
 902:	08 95       	ret

Disassembly of section .text.Bienvenida:

00000bc8 <Bienvenida>:
		*caracter = '\0';
	}
}

void Bienvenida() {
	Enviar_Mensaje("Bienvenido", "Ingrese A");
 bc8:	2e ec       	ldi	r18, 0xCE	; 206
 bca:	30 e0       	ldi	r19, 0x00	; 0
 bcc:	40 e0       	ldi	r20, 0x00	; 0
 bce:	68 ed       	ldi	r22, 0xD8	; 216
 bd0:	70 e0       	ldi	r23, 0x00	; 0
 bd2:	80 e0       	ldi	r24, 0x00	; 0
 bd4:	0e 94 3b 04 	call	0x876	; 0x876 <Enviar_Mensaje>
 bd8:	08 95       	ret

Disassembly of section .text.almacenar_Contrasena:

00000bda <almacenar_Contrasena>:
		LCD_write(Cadena2[i]);
	}
}

void almacenar_Contrasena(char* password) {
	eeprom_write_block(password, &password_ref, sizeof(password_ref));
 bda:	bc 01       	movw	r22, r24
 bdc:	80 e8       	ldi	r24, 0x80	; 128
 bde:	24 e0       	ldi	r18, 0x04	; 4
 be0:	30 e0       	ldi	r19, 0x00	; 0
 be2:	4e e0       	ldi	r20, 0x0E	; 14
 be4:	51 e0       	ldi	r21, 0x01	; 1
 be6:	0e 94 53 05 	call	0xaa6	; 0xaa6 <eeprom_write_block>
 bea:	08 95       	ret

Disassembly of section .text.verificar_Contrasena:

0000096e <verificar_Contrasena>:
}

int verificar_Contrasena(char* password) {
 96e:	ef 92       	push	r14
 970:	ff 92       	push	r15
 972:	0f 93       	push	r16
 974:	1f 93       	push	r17
 976:	cf 93       	push	r28
 978:	df 93       	push	r29
 97a:	00 d0       	rcall	.+0      	; 0x97c <verificar_Contrasena+0xe>
 97c:	00 d0       	rcall	.+0      	; 0x97e <verificar_Contrasena+0x10>
 97e:	0f 92       	push	r0
 980:	cd b7       	in	r28, 0x3d	; 61
 982:	de b7       	in	r29, 0x3e	; 62
 984:	7c 01       	movw	r14, r24
	char stored_password[5];
	eeprom_read_block((void*)stored_password, (const void*)&password_ref, sizeof(stored_password) - 1);
 986:	4e e0       	ldi	r20, 0x0E	; 14
 988:	51 e0       	ldi	r21, 0x01	; 1
 98a:	60 e8       	ldi	r22, 0x80	; 128
 98c:	24 e0       	ldi	r18, 0x04	; 4
 98e:	30 e0       	ldi	r19, 0x00	; 0
 990:	8e 01       	movw	r16, r28
 992:	0f 5f       	subi	r16, 0xFF	; 255
 994:	1f 4f       	sbci	r17, 0xFF	; 255
 996:	c8 01       	movw	r24, r16
 998:	0e 94 9c 05 	call	0xb38	; 0xb38 <eeprom_read_block>
	stored_password[4] = '\0';
 99c:	1d 82       	std	Y+5, r1	; 0x05

	if (strcmp(password, stored_password) == 0) {
 99e:	98 01       	movw	r18, r16
 9a0:	40 e8       	ldi	r20, 0x80	; 128
 9a2:	b7 01       	movw	r22, r14
 9a4:	80 e8       	ldi	r24, 0x80	; 128
 9a6:	0e 94 32 05 	call	0xa64	; 0xa64 <strcmp>
 9aa:	89 2b       	or	r24, r25
 9ac:	19 f4       	brne	.+6      	; 0x9b4 <verificar_Contrasena+0x46>
		return 1;
 9ae:	81 e0       	ldi	r24, 0x01	; 1
 9b0:	90 e0       	ldi	r25, 0x00	; 0
 9b2:	02 c0       	rjmp	.+4      	; 0x9b8 <verificar_Contrasena+0x4a>
	}
	return 0;
 9b4:	80 e0       	ldi	r24, 0x00	; 0
 9b6:	90 e0       	ldi	r25, 0x00	; 0
}
 9b8:	0f 90       	pop	r0
 9ba:	0f 90       	pop	r0
 9bc:	0f 90       	pop	r0
 9be:	0f 90       	pop	r0
 9c0:	0f 90       	pop	r0
 9c2:	df 91       	pop	r29
 9c4:	cf 91       	pop	r28
 9c6:	1f 91       	pop	r17
 9c8:	0f 91       	pop	r16
 9ca:	ff 90       	pop	r15
 9cc:	ef 90       	pop	r14
 9ce:	08 95       	ret

Disassembly of section .text.abrir_Cerradura:

00000adc <abrir_Cerradura>:

void abrir_Cerradura() {
	Enviar_Mensaje("Abriendo...", "Cerradura");
 adc:	23 ee       	ldi	r18, 0xE3	; 227
 ade:	30 e0       	ldi	r19, 0x00	; 0
 ae0:	40 e0       	ldi	r20, 0x00	; 0
 ae2:	6d ee       	ldi	r22, 0xED	; 237
 ae4:	70 e0       	ldi	r23, 0x00	; 0
 ae6:	80 e0       	ldi	r24, 0x00	; 0
 ae8:	0e 94 3b 04 	call	0x876	; 0x876 <Enviar_Mensaje>
	PORTB |= (1 << LED_Verde);
 aec:	85 b1       	in	r24, 0x05	; 5
 aee:	80 62       	ori	r24, 0x20	; 32
 af0:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 af2:	2f ef       	ldi	r18, 0xFF	; 255
 af4:	8b e7       	ldi	r24, 0x7B	; 123
 af6:	92 e9       	ldi	r25, 0x92	; 146
 af8:	21 50       	subi	r18, 0x01	; 1
 afa:	80 40       	sbci	r24, 0x00	; 0
 afc:	90 40       	sbci	r25, 0x00	; 0
 afe:	e1 f7       	brne	.-8      	; 0xaf8 <abrir_Cerradura+0x1c>
 b00:	00 c0       	rjmp	.+0      	; 0xb02 <abrir_Cerradura+0x26>
 b02:	00 00       	nop
	_delay_ms(3000);
	PORTB &= ~(1 << LED_Verde);
 b04:	85 b1       	in	r24, 0x05	; 5
 b06:	8f 7d       	andi	r24, 0xDF	; 223
 b08:	85 b9       	out	0x05, r24	; 5
 b0a:	08 95       	ret

Disassembly of section .text.cambiar_Contrasena:

00000904 <cambiar_Contrasena>:
}

void cambiar_Contrasena(char* new_password) {
 904:	cf 93       	push	r28
 906:	df 93       	push	r29
 908:	ec 01       	movw	r28, r24
	if (strlen(new_password) >= 4 && strlen(new_password) <= 6) { 
 90a:	bc 01       	movw	r22, r24
 90c:	80 e8       	ldi	r24, 0x80	; 128
 90e:	0e 94 86 05 	call	0xb0c	; 0xb0c <strlen>
 912:	84 30       	cpi	r24, 0x04	; 4
 914:	91 05       	cpc	r25, r1
 916:	b8 f0       	brcs	.+46     	; 0x946 <cambiar_Contrasena+0x42>
 918:	07 97       	sbiw	r24, 0x07	; 7
 91a:	a8 f4       	brcc	.+42     	; 0x946 <cambiar_Contrasena+0x42>
		almacenar_Contrasena(new_password);
 91c:	ce 01       	movw	r24, r28
 91e:	0e 94 ed 05 	call	0xbda	; 0xbda <almacenar_Contrasena>
		Enviar_Mensaje("Contraseña", "Cambiada");
 922:	29 ef       	ldi	r18, 0xF9	; 249
 924:	30 e0       	ldi	r19, 0x00	; 0
 926:	40 e0       	ldi	r20, 0x00	; 0
 928:	62 e0       	ldi	r22, 0x02	; 2
 92a:	71 e0       	ldi	r23, 0x01	; 1
 92c:	80 e0       	ldi	r24, 0x00	; 0
 92e:	0e 94 3b 04 	call	0x876	; 0x876 <Enviar_Mensaje>
 932:	2f ef       	ldi	r18, 0xFF	; 255
 934:	83 ed       	ldi	r24, 0xD3	; 211
 936:	90 e3       	ldi	r25, 0x30	; 48
 938:	21 50       	subi	r18, 0x01	; 1
 93a:	80 40       	sbci	r24, 0x00	; 0
 93c:	90 40       	sbci	r25, 0x00	; 0
 93e:	e1 f7       	brne	.-8      	; 0x938 <cambiar_Contrasena+0x34>
 940:	00 c0       	rjmp	.+0      	; 0x942 <cambiar_Contrasena+0x3e>
 942:	00 00       	nop
 944:	11 c0       	rjmp	.+34     	; 0x968 <cambiar_Contrasena+0x64>
		_delay_ms(1000);
		} else {
		Enviar_Mensaje("Error:", "Longitud");
 946:	2d e0       	ldi	r18, 0x0D	; 13
 948:	31 e0       	ldi	r19, 0x01	; 1
 94a:	40 e0       	ldi	r20, 0x00	; 0
 94c:	66 e1       	ldi	r22, 0x16	; 22
 94e:	71 e0       	ldi	r23, 0x01	; 1
 950:	80 e0       	ldi	r24, 0x00	; 0
 952:	0e 94 3b 04 	call	0x876	; 0x876 <Enviar_Mensaje>
 956:	2f ef       	ldi	r18, 0xFF	; 255
 958:	83 ed       	ldi	r24, 0xD3	; 211
 95a:	90 e3       	ldi	r25, 0x30	; 48
 95c:	21 50       	subi	r18, 0x01	; 1
 95e:	80 40       	sbci	r24, 0x00	; 0
 960:	90 40       	sbci	r25, 0x00	; 0
 962:	e1 f7       	brne	.-8      	; 0x95c <cambiar_Contrasena+0x58>
 964:	00 c0       	rjmp	.+0      	; 0x966 <cambiar_Contrasena+0x62>
 966:	00 00       	nop
		_delay_ms(1000);
	}
}
 968:	df 91       	pop	r29
 96a:	cf 91       	pop	r28
 96c:	08 95       	ret

Disassembly of section .text.activar_Alarma:

00000b5c <activar_Alarma>:

void activar_Alarma() {
	PORTC |= (1 << Buzzer); // Activar el buzzer
 b5c:	88 b1       	in	r24, 0x08	; 8
 b5e:	80 61       	ori	r24, 0x10	; 16
 b60:	88 b9       	out	0x08, r24	; 8
 b62:	2f ef       	ldi	r18, 0xFF	; 255
 b64:	83 e2       	ldi	r24, 0x23	; 35
 b66:	94 ef       	ldi	r25, 0xF4	; 244
 b68:	21 50       	subi	r18, 0x01	; 1
 b6a:	80 40       	sbci	r24, 0x00	; 0
 b6c:	90 40       	sbci	r25, 0x00	; 0
 b6e:	e1 f7       	brne	.-8      	; 0xb68 <activar_Alarma+0xc>
 b70:	00 c0       	rjmp	.+0      	; 0xb72 <activar_Alarma+0x16>
 b72:	00 00       	nop
	_delay_ms(5000); // Sonar por 5 segundos
	PORTC &= ~(1 << Buzzer); // Desactivar el buzzer
 b74:	88 b1       	in	r24, 0x08	; 8
 b76:	8f 7e       	andi	r24, 0xEF	; 239
 b78:	88 b9       	out	0x08, r24	; 8
 b7a:	08 95       	ret

Disassembly of section .text.inicializar_EEPROM:

000007dc <inicializar_EEPROM>:
}

void inicializar_EEPROM() {
 7dc:	af 92       	push	r10
 7de:	bf 92       	push	r11
 7e0:	cf 92       	push	r12
 7e2:	df 92       	push	r13
 7e4:	ef 92       	push	r14
 7e6:	0f 93       	push	r16
 7e8:	1f 93       	push	r17
 7ea:	cf 93       	push	r28
 7ec:	df 93       	push	r29
 7ee:	cd b7       	in	r28, 0x3d	; 61
 7f0:	de b7       	in	r29, 0x3e	; 62
 7f2:	2a 97       	sbiw	r28, 0x0a	; 10
 7f4:	0f b6       	in	r0, 0x3f	; 63
 7f6:	f8 94       	cli
 7f8:	de bf       	out	0x3e, r29	; 62
 7fa:	0f be       	out	0x3f, r0	; 63
 7fc:	cd bf       	out	0x3d, r28	; 61
	char default_password[5] = "1234";
 7fe:	2d e1       	ldi	r18, 0x1D	; 29
 800:	31 e0       	ldi	r19, 0x01	; 1
 802:	40 e0       	ldi	r20, 0x00	; 0
 804:	85 e0       	ldi	r24, 0x05	; 5
 806:	f9 01       	movw	r30, r18
 808:	8e 01       	movw	r16, r28
 80a:	0f 5f       	subi	r16, 0xFF	; 255
 80c:	1f 4f       	sbci	r17, 0xFF	; 255
 80e:	d8 01       	movw	r26, r16
 810:	74 2f       	mov	r23, r20
 812:	0e 94 cc 05 	call	0xb98	; 0xb98 <__movmemx_qi>
	char stored_password[5];
	eeprom_read_block(stored_password, &password_ref, sizeof(stored_password) - 1);
 816:	4e e0       	ldi	r20, 0x0E	; 14
 818:	51 e0       	ldi	r21, 0x01	; 1
 81a:	60 e8       	ldi	r22, 0x80	; 128
 81c:	5e 01       	movw	r10, r28
 81e:	86 e0       	ldi	r24, 0x06	; 6
 820:	a8 0e       	add	r10, r24
 822:	b1 1c       	adc	r11, r1
 824:	24 e0       	ldi	r18, 0x04	; 4
 826:	30 e0       	ldi	r19, 0x00	; 0
 828:	c5 01       	movw	r24, r10
 82a:	0e 94 9c 05 	call	0xb38	; 0xb38 <eeprom_read_block>
	stored_password[4] = '\0';
 82e:	1a 86       	std	Y+10, r1	; 0x0a

	if (strcmp(stored_password, default_password) != 0) {
 830:	68 01       	movw	r12, r16
 832:	80 e8       	ldi	r24, 0x80	; 128
 834:	e8 2e       	mov	r14, r24
 836:	b5 01       	movw	r22, r10
 838:	80 e8       	ldi	r24, 0x80	; 128
 83a:	4e 2d       	mov	r20, r14
 83c:	96 01       	movw	r18, r12
 83e:	0e 94 32 05 	call	0xa64	; 0xa64 <strcmp>
 842:	89 2b       	or	r24, r25
 844:	41 f0       	breq	.+16     	; 0x856 <__DATA_REGION_LENGTH__+0x56>
		eeprom_write_block((const void*)default_password, (void*)&password_ref, sizeof(default_password) - 1);
 846:	24 e0       	ldi	r18, 0x04	; 4
 848:	30 e0       	ldi	r19, 0x00	; 0
 84a:	4e e0       	ldi	r20, 0x0E	; 14
 84c:	51 e0       	ldi	r21, 0x01	; 1
 84e:	8e 2d       	mov	r24, r14
 850:	b6 01       	movw	r22, r12
 852:	0e 94 53 05 	call	0xaa6	; 0xaa6 <eeprom_write_block>
	}
 856:	2a 96       	adiw	r28, 0x0a	; 10
 858:	0f b6       	in	r0, 0x3f	; 63
 85a:	f8 94       	cli
 85c:	de bf       	out	0x3e, r29	; 62
 85e:	0f be       	out	0x3f, r0	; 63
 860:	cd bf       	out	0x3d, r28	; 61
 862:	df 91       	pop	r29
 864:	cf 91       	pop	r28
 866:	1f 91       	pop	r17
 868:	0f 91       	pop	r16
 86a:	ef 90       	pop	r14
 86c:	df 90       	pop	r13
 86e:	cf 90       	pop	r12
 870:	bf 90       	pop	r11
 872:	af 90       	pop	r10
 874:	08 95       	ret

Disassembly of section .text.main:

00000180 <main>:
char new_password[4];
char password[6]; 
char password_ref[4];
int intentos = 0; 

int main(void) {
 180:	cf 93       	push	r28
 182:	df 93       	push	r29
 184:	0f 92       	push	r0
 186:	cd b7       	in	r28, 0x3d	; 61
 188:	de b7       	in	r29, 0x3e	; 62
	init_Pins();
 18a:	0e 94 f6 05 	call	0xbec	; 0xbec <init_Pins>
	init_LCD();
 18e:	0e 94 90 03 	call	0x720	; 0x720 <init_LCD>
	inicializar_EEPROM();
 192:	0e 94 ee 03 	call	0x7dc	; 0x7dc <inicializar_EEPROM>
	
	char caracter = '\0';
 196:	19 82       	std	Y+1, r1	; 0x01
	int contador = 0;
	
	Bienvenida();
 198:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <Bienvenida>
	init_Pins();
	init_LCD();
	inicializar_EEPROM();
	
	char caracter = '\0';
	int contador = 0;
 19c:	00 e0       	ldi	r16, 0x00	; 0
 19e:	10 e0       	ldi	r17, 0x00	; 0
	
	Bienvenida();
	
	while (1) {
		LCD_cmd(0x01);
 1a0:	81 e0       	ldi	r24, 0x01	; 1
 1a2:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <LCD_cmd>
		if (state == 0) {                    // Bienvenida
 1a6:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <state>
 1aa:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <state+0x1>
 1ae:	00 97       	sbiw	r24, 0x00	; 0
 1b0:	99 f4       	brne	.+38     	; 0x1d8 <main+0x58>
			Bienvenida();
 1b2:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <Bienvenida>
			comprobar_Teclado(&state, &caracter);
 1b6:	be 01       	movw	r22, r28
 1b8:	6f 5f       	subi	r22, 0xFF	; 255
 1ba:	7f 4f       	sbci	r23, 0xFF	; 255
 1bc:	84 e3       	ldi	r24, 0x34	; 52
 1be:	91 e0       	ldi	r25, 0x01	; 1
 1c0:	0e 94 bb 02 	call	0x576	; 0x576 <comprobar_Teclado>
 1c4:	2f ef       	ldi	r18, 0xFF	; 255
 1c6:	89 e6       	ldi	r24, 0x69	; 105
 1c8:	98 e1       	ldi	r25, 0x18	; 24
 1ca:	21 50       	subi	r18, 0x01	; 1
 1cc:	80 40       	sbci	r24, 0x00	; 0
 1ce:	90 40       	sbci	r25, 0x00	; 0
 1d0:	e1 f7       	brne	.-8      	; 0x1ca <main+0x4a>
 1d2:	00 c0       	rjmp	.+0      	; 0x1d4 <main+0x54>
 1d4:	00 00       	nop
 1d6:	e4 cf       	rjmp	.-56     	; 0x1a0 <main+0x20>
			_delay_ms(500);
			
		} else if (state == 1) {             // Menu de opciones
 1d8:	81 30       	cpi	r24, 0x01	; 1
 1da:	91 05       	cpc	r25, r1
 1dc:	c9 f4       	brne	.+50     	; 0x210 <main+0x90>
			Enviar_Mensaje("* : Abrir", "# : Cambiar PASS");
 1de:	22 e2       	ldi	r18, 0x22	; 34
 1e0:	31 e0       	ldi	r19, 0x01	; 1
 1e2:	40 e0       	ldi	r20, 0x00	; 0
 1e4:	63 e3       	ldi	r22, 0x33	; 51
 1e6:	71 e0       	ldi	r23, 0x01	; 1
 1e8:	80 e0       	ldi	r24, 0x00	; 0
 1ea:	0e 94 3b 04 	call	0x876	; 0x876 <Enviar_Mensaje>
			comprobar_Teclado(&state, &caracter);
 1ee:	be 01       	movw	r22, r28
 1f0:	6f 5f       	subi	r22, 0xFF	; 255
 1f2:	7f 4f       	sbci	r23, 0xFF	; 255
 1f4:	84 e3       	ldi	r24, 0x34	; 52
 1f6:	91 e0       	ldi	r25, 0x01	; 1
 1f8:	0e 94 bb 02 	call	0x576	; 0x576 <comprobar_Teclado>
 1fc:	2f ef       	ldi	r18, 0xFF	; 255
 1fe:	89 e6       	ldi	r24, 0x69	; 105
 200:	98 e1       	ldi	r25, 0x18	; 24
 202:	21 50       	subi	r18, 0x01	; 1
 204:	80 40       	sbci	r24, 0x00	; 0
 206:	90 40       	sbci	r25, 0x00	; 0
 208:	e1 f7       	brne	.-8      	; 0x202 <main+0x82>
 20a:	00 c0       	rjmp	.+0      	; 0x20c <main+0x8c>
 20c:	00 00       	nop
 20e:	c8 cf       	rjmp	.-112    	; 0x1a0 <main+0x20>
			_delay_ms(500);
			
		} else if (state == 2) {             // Solicitar Contraseña para abrir
 210:	82 30       	cpi	r24, 0x02	; 2
 212:	91 05       	cpc	r25, r1
 214:	09 f0       	breq	.+2      	; 0x218 <main+0x98>
 216:	ac c0       	rjmp	.+344    	; 0x370 <main+0x1f0>
			if(contador == 0){
 218:	01 15       	cp	r16, r1
 21a:	11 05       	cpc	r17, r1
 21c:	89 f4       	brne	.+34     	; 0x240 <main+0xc0>
				Enviar_Mensaje("Ingrese PASS", "     ");
 21e:	2d e3       	ldi	r18, 0x3D	; 61
 220:	31 e0       	ldi	r19, 0x01	; 1
 222:	40 e0       	ldi	r20, 0x00	; 0
 224:	63 e4       	ldi	r22, 0x43	; 67
 226:	71 e0       	ldi	r23, 0x01	; 1
 228:	80 e0       	ldi	r24, 0x00	; 0
 22a:	0e 94 3b 04 	call	0x876	; 0x876 <Enviar_Mensaje>
 22e:	2f ef       	ldi	r18, 0xFF	; 255
 230:	89 e6       	ldi	r24, 0x69	; 105
 232:	98 e1       	ldi	r25, 0x18	; 24
 234:	21 50       	subi	r18, 0x01	; 1
 236:	80 40       	sbci	r24, 0x00	; 0
 238:	90 40       	sbci	r25, 0x00	; 0
 23a:	e1 f7       	brne	.-8      	; 0x234 <main+0xb4>
 23c:	00 c0       	rjmp	.+0      	; 0x23e <main+0xbe>
 23e:	00 00       	nop
				_delay_ms(500);
			}
			comprobar_Teclado(&state, &caracter);
 240:	be 01       	movw	r22, r28
 242:	6f 5f       	subi	r22, 0xFF	; 255
 244:	7f 4f       	sbci	r23, 0xFF	; 255
 246:	84 e3       	ldi	r24, 0x34	; 52
 248:	91 e0       	ldi	r25, 0x01	; 1
 24a:	0e 94 bb 02 	call	0x576	; 0x576 <comprobar_Teclado>
			if(caracter != '\0' && contador < 4){ 
 24e:	89 81       	ldd	r24, Y+1	; 0x01
 250:	88 23       	and	r24, r24
 252:	f9 f0       	breq	.+62     	; 0x292 <main+0x112>
 254:	04 30       	cpi	r16, 0x04	; 4
 256:	11 05       	cpc	r17, r1
 258:	e4 f4       	brge	.+56     	; 0x292 <main+0x112>
				pass[contador] = '*';
 25a:	f8 01       	movw	r30, r16
 25c:	ea 5f       	subi	r30, 0xFA	; 250
 25e:	fe 4f       	sbci	r31, 0xFE	; 254
 260:	9a e2       	ldi	r25, 0x2A	; 42
 262:	90 83       	st	Z, r25
				password[contador] = caracter; 
 264:	f8 01       	movw	r30, r16
 266:	e0 50       	subi	r30, 0x00	; 0
 268:	ff 4f       	sbci	r31, 0xFF	; 255
 26a:	80 83       	st	Z, r24
				Enviar_Mensaje("Ingrese PASS", pass);
 26c:	26 e0       	ldi	r18, 0x06	; 6
 26e:	31 e0       	ldi	r19, 0x01	; 1
 270:	40 e8       	ldi	r20, 0x80	; 128
 272:	63 e4       	ldi	r22, 0x43	; 67
 274:	71 e0       	ldi	r23, 0x01	; 1
 276:	80 e0       	ldi	r24, 0x00	; 0
 278:	0e 94 3b 04 	call	0x876	; 0x876 <Enviar_Mensaje>
 27c:	2f ef       	ldi	r18, 0xFF	; 255
 27e:	89 e6       	ldi	r24, 0x69	; 105
 280:	98 e1       	ldi	r25, 0x18	; 24
 282:	21 50       	subi	r18, 0x01	; 1
 284:	80 40       	sbci	r24, 0x00	; 0
 286:	90 40       	sbci	r25, 0x00	; 0
 288:	e1 f7       	brne	.-8      	; 0x282 <main+0x102>
 28a:	00 c0       	rjmp	.+0      	; 0x28c <main+0x10c>
 28c:	00 00       	nop
				_delay_ms(500);
				contador++;
 28e:	0f 5f       	subi	r16, 0xFF	; 255
 290:	1f 4f       	sbci	r17, 0xFF	; 255
			}
			if(contador == 4 || contador == 4){
 292:	04 30       	cpi	r16, 0x04	; 4
 294:	11 05       	cpc	r17, r1
 296:	09 f0       	breq	.+2      	; 0x29a <main+0x11a>
 298:	83 cf       	rjmp	.-250    	; 0x1a0 <main+0x20>
				if(verificar_Contrasena(password)){
 29a:	80 e0       	ldi	r24, 0x00	; 0
 29c:	91 e0       	ldi	r25, 0x01	; 1
 29e:	0e 94 b7 04 	call	0x96e	; 0x96e <verificar_Contrasena>
 2a2:	89 2b       	or	r24, r25
 2a4:	01 f1       	breq	.+64     	; 0x2e6 <main+0x166>
					PORTB |= (1 << LED_Verde);
 2a6:	85 b1       	in	r24, 0x05	; 5
 2a8:	80 62       	ori	r24, 0x20	; 32
 2aa:	85 b9       	out	0x05, r24	; 5
					PORTB &= ~(1 << LED_Rojo);
 2ac:	85 b1       	in	r24, 0x05	; 5
 2ae:	8f 7e       	andi	r24, 0xEF	; 239
 2b0:	85 b9       	out	0x05, r24	; 5
					Enviar_Mensaje("Contraseña", "Correcta");
 2b2:	20 e5       	ldi	r18, 0x50	; 80
 2b4:	31 e0       	ldi	r19, 0x01	; 1
 2b6:	40 e0       	ldi	r20, 0x00	; 0
 2b8:	62 e0       	ldi	r22, 0x02	; 2
 2ba:	71 e0       	ldi	r23, 0x01	; 1
 2bc:	80 e0       	ldi	r24, 0x00	; 0
 2be:	0e 94 3b 04 	call	0x876	; 0x876 <Enviar_Mensaje>
					abrir_Cerradura();
 2c2:	0e 94 6e 05 	call	0xadc	; 0xadc <abrir_Cerradura>
					state = 0;
 2c6:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <state+0x1>
 2ca:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <state>
 2ce:	2f ef       	ldi	r18, 0xFF	; 255
 2d0:	8b e7       	ldi	r24, 0x7B	; 123
 2d2:	92 e9       	ldi	r25, 0x92	; 146
 2d4:	21 50       	subi	r18, 0x01	; 1
 2d6:	80 40       	sbci	r24, 0x00	; 0
 2d8:	90 40       	sbci	r25, 0x00	; 0
 2da:	e1 f7       	brne	.-8      	; 0x2d4 <main+0x154>
 2dc:	00 c0       	rjmp	.+0      	; 0x2de <main+0x15e>
 2de:	00 00       	nop
	init_Pins();
	init_LCD();
	inicializar_EEPROM();
	
	char caracter = '\0';
	int contador = 0;
 2e0:	80 e0       	ldi	r24, 0x00	; 0
 2e2:	90 e0       	ldi	r25, 0x00	; 0
 2e4:	3c c0       	rjmp	.+120    	; 0x35e <main+0x1de>
					Enviar_Mensaje("Contraseña", "Correcta");
					abrir_Cerradura();
					state = 0;
					_delay_ms(3000);
				} else {
					Enviar_Mensaje("Contraseña", "Incorrecta");
 2e6:	29 e5       	ldi	r18, 0x59	; 89
 2e8:	31 e0       	ldi	r19, 0x01	; 1
 2ea:	40 e0       	ldi	r20, 0x00	; 0
 2ec:	62 e0       	ldi	r22, 0x02	; 2
 2ee:	71 e0       	ldi	r23, 0x01	; 1
 2f0:	80 e0       	ldi	r24, 0x00	; 0
 2f2:	0e 94 3b 04 	call	0x876	; 0x876 <Enviar_Mensaje>
					intentos++;
 2f6:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <intentos>
 2fa:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <intentos+0x1>
 2fe:	01 96       	adiw	r24, 0x01	; 1
 300:	90 93 33 01 	sts	0x0133, r25	; 0x800133 <intentos+0x1>
 304:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <intentos>
					if (intentos >= 3) {
 308:	03 97       	sbiw	r24, 0x03	; 3
 30a:	6c f0       	brlt	.+26     	; 0x326 <main+0x1a6>
						PORTB |= (1 << LED_Rojo);
 30c:	85 b1       	in	r24, 0x05	; 5
 30e:	80 61       	ori	r24, 0x10	; 16
 310:	85 b9       	out	0x05, r24	; 5
						activar_Alarma();
 312:	0e 94 ae 05 	call	0xb5c	; 0xb5c <activar_Alarma>
						PORTB &= ~(1 << LED_Rojo);
 316:	85 b1       	in	r24, 0x05	; 5
 318:	8f 7e       	andi	r24, 0xEF	; 239
 31a:	85 b9       	out	0x05, r24	; 5
						intentos = 0; 
 31c:	10 92 33 01 	sts	0x0133, r1	; 0x800133 <intentos+0x1>
 320:	10 92 32 01 	sts	0x0132, r1	; 0x800132 <intentos>
 324:	0f c0       	rjmp	.+30     	; 0x344 <main+0x1c4>
					} else {
						PORTB |= (1 << LED_Rojo);
 326:	85 b1       	in	r24, 0x05	; 5
 328:	80 61       	ori	r24, 0x10	; 16
 32a:	85 b9       	out	0x05, r24	; 5
 32c:	2f ef       	ldi	r18, 0xFF	; 255
 32e:	8b e7       	ldi	r24, 0x7B	; 123
 330:	92 e9       	ldi	r25, 0x92	; 146
 332:	21 50       	subi	r18, 0x01	; 1
 334:	80 40       	sbci	r24, 0x00	; 0
 336:	90 40       	sbci	r25, 0x00	; 0
 338:	e1 f7       	brne	.-8      	; 0x332 <main+0x1b2>
 33a:	00 c0       	rjmp	.+0      	; 0x33c <main+0x1bc>
 33c:	00 00       	nop
						_delay_ms(3000);
						PORTB &= ~(1 << LED_Rojo);
 33e:	85 b1       	in	r24, 0x05	; 5
 340:	8f 7e       	andi	r24, 0xEF	; 239
 342:	85 b9       	out	0x05, r24	; 5
					}

					state = 0; 
 344:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <state+0x1>
 348:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <state>
 34c:	c9 cf       	rjmp	.-110    	; 0x2e0 <main+0x160>
				}
				contador = 0;
				for(int i=0; i<4 ; i++){
					pass[i] = "";
 34e:	fc 01       	movw	r30, r24
 350:	ea 5f       	subi	r30, 0xFA	; 250
 352:	fe 4f       	sbci	r31, 0xFE	; 254
 354:	24 e6       	ldi	r18, 0x64	; 100
 356:	31 e0       	ldi	r19, 0x01	; 1
 358:	40 e0       	ldi	r20, 0x00	; 0
 35a:	20 83       	st	Z, r18
					}

					state = 0; 
				}
				contador = 0;
				for(int i=0; i<4 ; i++){
 35c:	01 96       	adiw	r24, 0x01	; 1
 35e:	84 30       	cpi	r24, 0x04	; 4
 360:	91 05       	cpc	r25, r1
 362:	ac f3       	brlt	.-22     	; 0x34e <main+0x1ce>
					pass[i] = "";
				}
				LCD_cmd(0x01);
 364:	81 e0       	ldi	r24, 0x01	; 1
 366:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <LCD_cmd>
						PORTB &= ~(1 << LED_Rojo);
					}

					state = 0; 
				}
				contador = 0;
 36a:	00 e0       	ldi	r16, 0x00	; 0
 36c:	10 e0       	ldi	r17, 0x00	; 0
 36e:	18 cf       	rjmp	.-464    	; 0x1a0 <main+0x20>
				for(int i=0; i<4 ; i++){
					pass[i] = "";
				}
				LCD_cmd(0x01);
			}
		} else if (state == 3){				 // Solicitar Contraseña para cambiar
 370:	83 30       	cpi	r24, 0x03	; 3
 372:	91 05       	cpc	r25, r1
 374:	09 f0       	breq	.+2      	; 0x378 <main+0x1f8>
 376:	a7 c0       	rjmp	.+334    	; 0x4c6 <__EEPROM_REGION_LENGTH__+0xc6>
			if(contador == 0){
 378:	01 15       	cp	r16, r1
 37a:	11 05       	cpc	r17, r1
 37c:	89 f4       	brne	.+34     	; 0x3a0 <main+0x220>
				Enviar_Mensaje("Ingrese PASS", " ");
 37e:	25 e6       	ldi	r18, 0x65	; 101
 380:	31 e0       	ldi	r19, 0x01	; 1
 382:	40 e0       	ldi	r20, 0x00	; 0
 384:	63 e4       	ldi	r22, 0x43	; 67
 386:	71 e0       	ldi	r23, 0x01	; 1
 388:	80 e0       	ldi	r24, 0x00	; 0
 38a:	0e 94 3b 04 	call	0x876	; 0x876 <Enviar_Mensaje>
 38e:	2f ef       	ldi	r18, 0xFF	; 255
 390:	89 e6       	ldi	r24, 0x69	; 105
 392:	98 e1       	ldi	r25, 0x18	; 24
 394:	21 50       	subi	r18, 0x01	; 1
 396:	80 40       	sbci	r24, 0x00	; 0
 398:	90 40       	sbci	r25, 0x00	; 0
 39a:	e1 f7       	brne	.-8      	; 0x394 <main+0x214>
 39c:	00 c0       	rjmp	.+0      	; 0x39e <main+0x21e>
 39e:	00 00       	nop
				_delay_ms(500);
			}
			comprobar_Teclado(&state, &caracter);
 3a0:	be 01       	movw	r22, r28
 3a2:	6f 5f       	subi	r22, 0xFF	; 255
 3a4:	7f 4f       	sbci	r23, 0xFF	; 255
 3a6:	84 e3       	ldi	r24, 0x34	; 52
 3a8:	91 e0       	ldi	r25, 0x01	; 1
 3aa:	0e 94 bb 02 	call	0x576	; 0x576 <comprobar_Teclado>
			if(caracter != '\0' && contador < 4){
 3ae:	89 81       	ldd	r24, Y+1	; 0x01
 3b0:	88 23       	and	r24, r24
 3b2:	f9 f0       	breq	.+62     	; 0x3f2 <main+0x272>
 3b4:	04 30       	cpi	r16, 0x04	; 4
 3b6:	11 05       	cpc	r17, r1
 3b8:	e4 f4       	brge	.+56     	; 0x3f2 <main+0x272>
				pass[contador] = '*';
 3ba:	f8 01       	movw	r30, r16
 3bc:	ea 5f       	subi	r30, 0xFA	; 250
 3be:	fe 4f       	sbci	r31, 0xFE	; 254
 3c0:	9a e2       	ldi	r25, 0x2A	; 42
 3c2:	90 83       	st	Z, r25
				password[contador] = caracter; 
 3c4:	f8 01       	movw	r30, r16
 3c6:	e0 50       	subi	r30, 0x00	; 0
 3c8:	ff 4f       	sbci	r31, 0xFF	; 255
 3ca:	80 83       	st	Z, r24
				Enviar_Mensaje("Ingrese PASS", pass);
 3cc:	26 e0       	ldi	r18, 0x06	; 6
 3ce:	31 e0       	ldi	r19, 0x01	; 1
 3d0:	40 e8       	ldi	r20, 0x80	; 128
 3d2:	63 e4       	ldi	r22, 0x43	; 67
 3d4:	71 e0       	ldi	r23, 0x01	; 1
 3d6:	80 e0       	ldi	r24, 0x00	; 0
 3d8:	0e 94 3b 04 	call	0x876	; 0x876 <Enviar_Mensaje>
 3dc:	2f ef       	ldi	r18, 0xFF	; 255
 3de:	89 e6       	ldi	r24, 0x69	; 105
 3e0:	98 e1       	ldi	r25, 0x18	; 24
 3e2:	21 50       	subi	r18, 0x01	; 1
 3e4:	80 40       	sbci	r24, 0x00	; 0
 3e6:	90 40       	sbci	r25, 0x00	; 0
 3e8:	e1 f7       	brne	.-8      	; 0x3e2 <main+0x262>
 3ea:	00 c0       	rjmp	.+0      	; 0x3ec <main+0x26c>
 3ec:	00 00       	nop
				_delay_ms(500);
				contador++;
 3ee:	0f 5f       	subi	r16, 0xFF	; 255
 3f0:	1f 4f       	sbci	r17, 0xFF	; 255
			}
			if(contador == 4 || contador == 4){ 
 3f2:	04 30       	cpi	r16, 0x04	; 4
 3f4:	11 05       	cpc	r17, r1
 3f6:	09 f0       	breq	.+2      	; 0x3fa <main+0x27a>
 3f8:	d3 ce       	rjmp	.-602    	; 0x1a0 <main+0x20>
				pass[contador] = '\0'; 
 3fa:	f8 01       	movw	r30, r16
 3fc:	ea 5f       	subi	r30, 0xFA	; 250
 3fe:	fe 4f       	sbci	r31, 0xFE	; 254
 400:	10 82       	st	Z, r1
				if(verificar_Contrasena(password)){
 402:	80 e0       	ldi	r24, 0x00	; 0
 404:	91 e0       	ldi	r25, 0x01	; 1
 406:	0e 94 b7 04 	call	0x96e	; 0x96e <verificar_Contrasena>
 40a:	89 2b       	or	r24, r25
 40c:	d1 f0       	breq	.+52     	; 0x442 <__EEPROM_REGION_LENGTH__+0x42>
					Enviar_Mensaje("Ingrese nueva", "Contraseña");
 40e:	22 e0       	ldi	r18, 0x02	; 2
 410:	31 e0       	ldi	r19, 0x01	; 1
 412:	40 e0       	ldi	r20, 0x00	; 0
 414:	67 e6       	ldi	r22, 0x67	; 103
 416:	71 e0       	ldi	r23, 0x01	; 1
 418:	80 e0       	ldi	r24, 0x00	; 0
 41a:	0e 94 3b 04 	call	0x876	; 0x876 <Enviar_Mensaje>
 41e:	2f ef       	ldi	r18, 0xFF	; 255
 420:	89 e6       	ldi	r24, 0x69	; 105
 422:	98 e1       	ldi	r25, 0x18	; 24
 424:	21 50       	subi	r18, 0x01	; 1
 426:	80 40       	sbci	r24, 0x00	; 0
 428:	90 40       	sbci	r25, 0x00	; 0
 42a:	e1 f7       	brne	.-8      	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
 42c:	00 c0       	rjmp	.+0      	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
 42e:	00 00       	nop
					_delay_ms(500);
					contador = 0; 
					state = 4; 
 430:	84 e0       	ldi	r24, 0x04	; 4
 432:	90 e0       	ldi	r25, 0x00	; 0
 434:	90 93 35 01 	sts	0x0135, r25	; 0x800135 <state+0x1>
 438:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <state>
	init_Pins();
	init_LCD();
	inicializar_EEPROM();
	
	char caracter = '\0';
	int contador = 0;
 43c:	80 e0       	ldi	r24, 0x00	; 0
 43e:	90 e0       	ldi	r25, 0x00	; 0
 440:	3c c0       	rjmp	.+120    	; 0x4ba <__EEPROM_REGION_LENGTH__+0xba>
					Enviar_Mensaje("Ingrese nueva", "Contraseña");
					_delay_ms(500);
					contador = 0; 
					state = 4; 
				} else {
					Enviar_Mensaje("Contraseña", "Incorrecta");
 442:	29 e5       	ldi	r18, 0x59	; 89
 444:	31 e0       	ldi	r19, 0x01	; 1
 446:	40 e0       	ldi	r20, 0x00	; 0
 448:	62 e0       	ldi	r22, 0x02	; 2
 44a:	71 e0       	ldi	r23, 0x01	; 1
 44c:	80 e0       	ldi	r24, 0x00	; 0
 44e:	0e 94 3b 04 	call	0x876	; 0x876 <Enviar_Mensaje>
					intentos++;
 452:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <intentos>
 456:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <intentos+0x1>
 45a:	01 96       	adiw	r24, 0x01	; 1
 45c:	90 93 33 01 	sts	0x0133, r25	; 0x800133 <intentos+0x1>
 460:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <intentos>
					if (intentos >= 3) {
 464:	03 97       	sbiw	r24, 0x03	; 3
 466:	6c f0       	brlt	.+26     	; 0x482 <__EEPROM_REGION_LENGTH__+0x82>
						PORTB |= (1 << LED_Rojo);
 468:	85 b1       	in	r24, 0x05	; 5
 46a:	80 61       	ori	r24, 0x10	; 16
 46c:	85 b9       	out	0x05, r24	; 5
						activar_Alarma();
 46e:	0e 94 ae 05 	call	0xb5c	; 0xb5c <activar_Alarma>
						PORTB &= ~(1 << LED_Rojo);
 472:	85 b1       	in	r24, 0x05	; 5
 474:	8f 7e       	andi	r24, 0xEF	; 239
 476:	85 b9       	out	0x05, r24	; 5
						intentos = 0;
 478:	10 92 33 01 	sts	0x0133, r1	; 0x800133 <intentos+0x1>
 47c:	10 92 32 01 	sts	0x0132, r1	; 0x800132 <intentos>
 480:	0f c0       	rjmp	.+30     	; 0x4a0 <__EEPROM_REGION_LENGTH__+0xa0>
						} else {
						PORTB |= (1 << LED_Rojo);
 482:	85 b1       	in	r24, 0x05	; 5
 484:	80 61       	ori	r24, 0x10	; 16
 486:	85 b9       	out	0x05, r24	; 5
 488:	2f ef       	ldi	r18, 0xFF	; 255
 48a:	8b e7       	ldi	r24, 0x7B	; 123
 48c:	92 e9       	ldi	r25, 0x92	; 146
 48e:	21 50       	subi	r18, 0x01	; 1
 490:	80 40       	sbci	r24, 0x00	; 0
 492:	90 40       	sbci	r25, 0x00	; 0
 494:	e1 f7       	brne	.-8      	; 0x48e <__EEPROM_REGION_LENGTH__+0x8e>
 496:	00 c0       	rjmp	.+0      	; 0x498 <__EEPROM_REGION_LENGTH__+0x98>
 498:	00 00       	nop
						_delay_ms(3000);
						PORTB &= ~(1 << LED_Rojo);
 49a:	85 b1       	in	r24, 0x05	; 5
 49c:	8f 7e       	andi	r24, 0xEF	; 239
 49e:	85 b9       	out	0x05, r24	; 5
					}
					state = 0; 
 4a0:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <state+0x1>
 4a4:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <state>
 4a8:	c9 cf       	rjmp	.-110    	; 0x43c <__EEPROM_REGION_LENGTH__+0x3c>
					contador = 0; 
				}
				for(int i=0; i<4 ; i++){
					pass[i] = "";
 4aa:	fc 01       	movw	r30, r24
 4ac:	ea 5f       	subi	r30, 0xFA	; 250
 4ae:	fe 4f       	sbci	r31, 0xFE	; 254
 4b0:	24 e6       	ldi	r18, 0x64	; 100
 4b2:	31 e0       	ldi	r19, 0x01	; 1
 4b4:	40 e0       	ldi	r20, 0x00	; 0
 4b6:	20 83       	st	Z, r18
						PORTB &= ~(1 << LED_Rojo);
					}
					state = 0; 
					contador = 0; 
				}
				for(int i=0; i<4 ; i++){
 4b8:	01 96       	adiw	r24, 0x01	; 1
 4ba:	84 30       	cpi	r24, 0x04	; 4
 4bc:	91 05       	cpc	r25, r1
 4be:	ac f3       	brlt	.-22     	; 0x4aa <__EEPROM_REGION_LENGTH__+0xaa>
 4c0:	00 e0       	ldi	r16, 0x00	; 0
 4c2:	10 e0       	ldi	r17, 0x00	; 0
 4c4:	6d ce       	rjmp	.-806    	; 0x1a0 <main+0x20>
					pass[i] = "";
				}
			}
		} else if (state == 4) { // Ingreso de nueva contraseña
 4c6:	04 97       	sbiw	r24, 0x04	; 4
 4c8:	09 f0       	breq	.+2      	; 0x4cc <__EEPROM_REGION_LENGTH__+0xcc>
 4ca:	6a ce       	rjmp	.-812    	; 0x1a0 <main+0x20>
			if(contador == 0){
 4cc:	01 15       	cp	r16, r1
 4ce:	11 05       	cpc	r17, r1
 4d0:	89 f4       	brne	.+34     	; 0x4f4 <__EEPROM_REGION_LENGTH__+0xf4>
				Enviar_Mensaje("Ingrese nueva", "Contraseña");
 4d2:	22 e0       	ldi	r18, 0x02	; 2
 4d4:	31 e0       	ldi	r19, 0x01	; 1
 4d6:	40 e0       	ldi	r20, 0x00	; 0
 4d8:	67 e6       	ldi	r22, 0x67	; 103
 4da:	71 e0       	ldi	r23, 0x01	; 1
 4dc:	80 e0       	ldi	r24, 0x00	; 0
 4de:	0e 94 3b 04 	call	0x876	; 0x876 <Enviar_Mensaje>
 4e2:	2f ef       	ldi	r18, 0xFF	; 255
 4e4:	89 e6       	ldi	r24, 0x69	; 105
 4e6:	98 e1       	ldi	r25, 0x18	; 24
 4e8:	21 50       	subi	r18, 0x01	; 1
 4ea:	80 40       	sbci	r24, 0x00	; 0
 4ec:	90 40       	sbci	r25, 0x00	; 0
 4ee:	e1 f7       	brne	.-8      	; 0x4e8 <__EEPROM_REGION_LENGTH__+0xe8>
 4f0:	00 c0       	rjmp	.+0      	; 0x4f2 <__EEPROM_REGION_LENGTH__+0xf2>
 4f2:	00 00       	nop
				_delay_ms(500);
			}
			comprobar_Teclado(&state, &caracter);
 4f4:	be 01       	movw	r22, r28
 4f6:	6f 5f       	subi	r22, 0xFF	; 255
 4f8:	7f 4f       	sbci	r23, 0xFF	; 255
 4fa:	84 e3       	ldi	r24, 0x34	; 52
 4fc:	91 e0       	ldi	r25, 0x01	; 1
 4fe:	0e 94 bb 02 	call	0x576	; 0x576 <comprobar_Teclado>
			if(caracter != '\0' && contador < 4){
 502:	89 81       	ldd	r24, Y+1	; 0x01
 504:	88 23       	and	r24, r24
 506:	d1 f0       	breq	.+52     	; 0x53c <__EEPROM_REGION_LENGTH__+0x13c>
 508:	04 30       	cpi	r16, 0x04	; 4
 50a:	11 05       	cpc	r17, r1
 50c:	bc f4       	brge	.+46     	; 0x53c <__EEPROM_REGION_LENGTH__+0x13c>
				new_password[contador] = caracter; 
 50e:	f8 01       	movw	r30, r16
 510:	e6 5f       	subi	r30, 0xF6	; 246
 512:	fe 4f       	sbci	r31, 0xFE	; 254
 514:	80 83       	st	Z, r24
				Enviar_Mensaje("Nueva PASS", new_password);
 516:	2a e0       	ldi	r18, 0x0A	; 10
 518:	31 e0       	ldi	r19, 0x01	; 1
 51a:	40 e8       	ldi	r20, 0x80	; 128
 51c:	65 e7       	ldi	r22, 0x75	; 117
 51e:	71 e0       	ldi	r23, 0x01	; 1
 520:	80 e0       	ldi	r24, 0x00	; 0
 522:	0e 94 3b 04 	call	0x876	; 0x876 <Enviar_Mensaje>
 526:	2f ef       	ldi	r18, 0xFF	; 255
 528:	89 e6       	ldi	r24, 0x69	; 105
 52a:	98 e1       	ldi	r25, 0x18	; 24
 52c:	21 50       	subi	r18, 0x01	; 1
 52e:	80 40       	sbci	r24, 0x00	; 0
 530:	90 40       	sbci	r25, 0x00	; 0
 532:	e1 f7       	brne	.-8      	; 0x52c <__EEPROM_REGION_LENGTH__+0x12c>
 534:	00 c0       	rjmp	.+0      	; 0x536 <__EEPROM_REGION_LENGTH__+0x136>
 536:	00 00       	nop
				_delay_ms(500);
				contador++;
 538:	0f 5f       	subi	r16, 0xFF	; 255
 53a:	1f 4f       	sbci	r17, 0xFF	; 255
			}
			if(contador == 4 || contador == 4){ 
 53c:	04 30       	cpi	r16, 0x04	; 4
 53e:	11 05       	cpc	r17, r1
 540:	09 f0       	breq	.+2      	; 0x544 <__EEPROM_REGION_LENGTH__+0x144>
 542:	2e ce       	rjmp	.-932    	; 0x1a0 <main+0x20>
				cambiar_Contrasena(new_password);
 544:	8a e0       	ldi	r24, 0x0A	; 10
 546:	91 e0       	ldi	r25, 0x01	; 1
 548:	0e 94 82 04 	call	0x904	; 0x904 <cambiar_Contrasena>
				state = 0; 
 54c:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <state+0x1>
 550:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <state>
				contador = 0;
				for(int i=0; i<4 ; i++){
 554:	80 e0       	ldi	r24, 0x00	; 0
 556:	90 e0       	ldi	r25, 0x00	; 0
 558:	08 c0       	rjmp	.+16     	; 0x56a <__EEPROM_REGION_LENGTH__+0x16a>
					new_password[i] = "";
 55a:	fc 01       	movw	r30, r24
 55c:	e6 5f       	subi	r30, 0xF6	; 246
 55e:	fe 4f       	sbci	r31, 0xFE	; 254
 560:	24 e6       	ldi	r18, 0x64	; 100
 562:	31 e0       	ldi	r19, 0x01	; 1
 564:	40 e0       	ldi	r20, 0x00	; 0
 566:	20 83       	st	Z, r18
			}
			if(contador == 4 || contador == 4){ 
				cambiar_Contrasena(new_password);
				state = 0; 
				contador = 0;
				for(int i=0; i<4 ; i++){
 568:	01 96       	adiw	r24, 0x01	; 1
 56a:	84 30       	cpi	r24, 0x04	; 4
 56c:	91 05       	cpc	r25, r1
 56e:	ac f3       	brlt	.-22     	; 0x55a <__EEPROM_REGION_LENGTH__+0x15a>
				contador++;
			}
			if(contador == 4 || contador == 4){ 
				cambiar_Contrasena(new_password);
				state = 0; 
				contador = 0;
 570:	00 e0       	ldi	r16, 0x00	; 0
 572:	10 e0       	ldi	r17, 0x00	; 0
 574:	15 ce       	rjmp	.-982    	; 0x1a0 <main+0x20>

Disassembly of section .text.libgcc:

00000b98 <__movmemx_qi>:
 b98:	99 27       	eor	r25, r25

00000b9a <__movmemx_hi>:
 b9a:	77 fd       	sbrc	r23, 7
 b9c:	05 c0       	rjmp	.+10     	; 0xba8 <__movmemx_hi+0xe>
 b9e:	05 90       	lpm	r0, Z+
 ba0:	0d 92       	st	X+, r0
 ba2:	01 97       	sbiw	r24, 0x01	; 1
 ba4:	e1 f7       	brne	.-8      	; 0xb9e <__movmemx_hi+0x4>
 ba6:	08 95       	ret
 ba8:	01 90       	ld	r0, Z+
 baa:	0d 92       	st	X+, r0
 bac:	01 97       	sbiw	r24, 0x01	; 1
 bae:	e1 f7       	brne	.-8      	; 0xba8 <__movmemx_hi+0xe>
 bb0:	08 95       	ret

Disassembly of section .text.__dummy_fini:

00000c0e <_fini>:
 c0e:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

00000c10 <__funcs_on_exit>:
 c10:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

00000c12 <__simulator_exit>:
 c12:	08 95       	ret

Disassembly of section .text.exit:

00000bb2 <exit>:
 bb2:	ec 01       	movw	r28, r24
 bb4:	0e 94 08 06 	call	0xc10	; 0xc10 <__funcs_on_exit>
 bb8:	0e 94 07 06 	call	0xc0e	; 0xc0e <_fini>
 bbc:	ce 01       	movw	r24, r28
 bbe:	0e 94 09 06 	call	0xc12	; 0xc12 <__simulator_exit>
 bc2:	ce 01       	movw	r24, r28
 bc4:	0e 94 05 06 	call	0xc0a	; 0xc0a <_Exit>

Disassembly of section .text.strcmp:

00000a64 <strcmp>:
 a64:	cf 92       	push	r12
 a66:	df 92       	push	r13
 a68:	ef 92       	push	r14
 a6a:	6b 01       	movw	r12, r22
 a6c:	e8 2e       	mov	r14, r24
 a6e:	f6 01       	movw	r30, r12
 a70:	84 91       	lpm	r24, Z
 a72:	e7 fc       	sbrc	r14, 7
 a74:	80 81       	ld	r24, Z
 a76:	f9 01       	movw	r30, r18
 a78:	54 91       	lpm	r21, Z
 a7a:	47 fd       	sbrc	r20, 7
 a7c:	50 81       	ld	r21, Z
 a7e:	85 13       	cpse	r24, r21
 a80:	0b c0       	rjmp	.+22     	; 0xa98 <strcmp+0x34>
 a82:	88 23       	and	r24, r24
 a84:	41 f0       	breq	.+16     	; 0xa96 <strcmp+0x32>
 a86:	8f ef       	ldi	r24, 0xFF	; 255
 a88:	c8 1a       	sub	r12, r24
 a8a:	d8 0a       	sbc	r13, r24
 a8c:	e8 0a       	sbc	r14, r24
 a8e:	2f 5f       	subi	r18, 0xFF	; 255
 a90:	3f 4f       	sbci	r19, 0xFF	; 255
 a92:	4f 4f       	sbci	r20, 0xFF	; 255
 a94:	ec cf       	rjmp	.-40     	; 0xa6e <strcmp+0xa>
 a96:	58 2f       	mov	r21, r24
 a98:	90 e0       	ldi	r25, 0x00	; 0
 a9a:	85 1b       	sub	r24, r21
 a9c:	91 09       	sbc	r25, r1
 a9e:	ef 90       	pop	r14
 aa0:	df 90       	pop	r13
 aa2:	cf 90       	pop	r12
 aa4:	08 95       	ret

Disassembly of section .text.strlen:

00000b0c <strlen>:
 b0c:	cf 92       	push	r12
 b0e:	df 92       	push	r13
 b10:	ef 92       	push	r14
 b12:	6b 01       	movw	r12, r22
 b14:	e8 2e       	mov	r14, r24
 b16:	a8 2f       	mov	r26, r24
 b18:	cb 01       	movw	r24, r22
 b1a:	fc 01       	movw	r30, r24
 b1c:	24 91       	lpm	r18, Z
 b1e:	a7 fd       	sbrc	r26, 7
 b20:	20 81       	ld	r18, Z
 b22:	22 23       	and	r18, r18
 b24:	19 f0       	breq	.+6      	; 0xb2c <strlen+0x20>
 b26:	01 96       	adiw	r24, 0x01	; 1
 b28:	a1 1d       	adc	r26, r1
 b2a:	f7 cf       	rjmp	.-18     	; 0xb1a <strlen+0xe>
 b2c:	8c 19       	sub	r24, r12
 b2e:	9d 09       	sbc	r25, r13
 b30:	ef 90       	pop	r14
 b32:	df 90       	pop	r13
 b34:	cf 90       	pop	r12
 b36:	08 95       	ret

Disassembly of section .text._Exit:

00000c0a <_Exit>:
 c0a:	0e 94 65 00 	call	0xca	; 0xca <_exit>

Disassembly of section .text.avrlibc:

00000b38 <eeprom_read_block>:
 b38:	ba 01       	movw	r22, r20
 b3a:	a9 01       	movw	r20, r18
 b3c:	dc 01       	movw	r26, r24
 b3e:	cb 01       	movw	r24, r22

00000b40 <eeprom_read_blraw>:
 b40:	fc 01       	movw	r30, r24
 b42:	f9 99       	sbic	0x1f, 1	; 31
 b44:	fe cf       	rjmp	.-4      	; 0xb42 <eeprom_read_blraw+0x2>
 b46:	06 c0       	rjmp	.+12     	; 0xb54 <eeprom_read_blraw+0x14>
 b48:	f2 bd       	out	0x22, r31	; 34
 b4a:	e1 bd       	out	0x21, r30	; 33
 b4c:	f8 9a       	sbi	0x1f, 0	; 31
 b4e:	31 96       	adiw	r30, 0x01	; 1
 b50:	00 b4       	in	r0, 0x20	; 32
 b52:	0d 92       	st	X+, r0
 b54:	41 50       	subi	r20, 0x01	; 1
 b56:	50 40       	sbci	r21, 0x00	; 0
 b58:	b8 f7       	brcc	.-18     	; 0xb48 <eeprom_read_blraw+0x8>
 b5a:	08 95       	ret

Disassembly of section .text.avrlibc:

00000aa6 <eeprom_write_block>:
 aa6:	cf 92       	push	r12
 aa8:	df 92       	push	r13
 aaa:	ef 92       	push	r14
 aac:	6b 01       	movw	r12, r22
 aae:	e8 2e       	mov	r14, r24
 ab0:	ca 01       	movw	r24, r20
 ab2:	42 2f       	mov	r20, r18
 ab4:	73 2f       	mov	r23, r19
 ab6:	0b c0       	rjmp	.+22     	; 0xace <eeprom_write_block+0x28>
 ab8:	f6 01       	movw	r30, r12
 aba:	5e 2d       	mov	r21, r14
 abc:	0e 94 fe 05 	call	0xbfc	; 0xbfc <__xload_1>
 ac0:	26 2f       	mov	r18, r22
 ac2:	0e 94 bf 05 	call	0xb7e	; 0xb7e <eeprom_write_r18>
 ac6:	3f ef       	ldi	r19, 0xFF	; 255
 ac8:	c3 1a       	sub	r12, r19
 aca:	d3 0a       	sbc	r13, r19
 acc:	e3 0a       	sbc	r14, r19
 ace:	41 50       	subi	r20, 0x01	; 1
 ad0:	70 40       	sbci	r23, 0x00	; 0
 ad2:	90 f7       	brcc	.-28     	; 0xab8 <eeprom_write_block+0x12>
 ad4:	ef 90       	pop	r14
 ad6:	df 90       	pop	r13
 ad8:	cf 90       	pop	r12
 ada:	08 95       	ret

Disassembly of section .text.avrlibc:

00000b7c <eeprom_write_byte>:
 b7c:	26 2f       	mov	r18, r22

00000b7e <eeprom_write_r18>:
 b7e:	f9 99       	sbic	0x1f, 1	; 31
 b80:	fe cf       	rjmp	.-4      	; 0xb7e <eeprom_write_r18>
 b82:	1f ba       	out	0x1f, r1	; 31
 b84:	92 bd       	out	0x22, r25	; 34
 b86:	81 bd       	out	0x21, r24	; 33
 b88:	20 bd       	out	0x20, r18	; 32
 b8a:	0f b6       	in	r0, 0x3f	; 63
 b8c:	f8 94       	cli
 b8e:	fa 9a       	sbi	0x1f, 2	; 31
 b90:	f9 9a       	sbi	0x1f, 1	; 31
 b92:	0f be       	out	0x3f, r0	; 63
 b94:	01 96       	adiw	r24, 0x01	; 1
 b96:	08 95       	ret

Disassembly of section .text.libgcc:

00000bfc <__xload_1>:
 bfc:	57 fd       	sbrc	r21, 7
 bfe:	60 81       	ld	r22, Z
 c00:	57 ff       	sbrs	r21, 7
 c02:	64 91       	lpm	r22, Z
 c04:	08 95       	ret
