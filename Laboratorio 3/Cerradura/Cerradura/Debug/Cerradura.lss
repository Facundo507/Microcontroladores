
Cerradura.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000bda  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000ce  00000000  00000000  000000f4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  00800100  00800100  00000bd4  2**0
                  ALLOC
  3 .eeprom       00000006  00810000  00810000  00000bd4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      0000002f  00000000  00000000  00000bda  2**0
                  CONTENTS, READONLY
  5 .stack.descriptors.hdr 00000046  00000000  00000000  00000c09  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000000e0  00000000  00000000  00000c50  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001a8e  00000000  00000000  00000d30  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000091b  00000000  00000000  000027be  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000a7a  00000000  00000000  000030d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  0000017c  00000000  00000000  00003b54  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000272  00000000  00000000  00003cd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000cb7  00000000  00000000  00003f42  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000088  00000000  00000000  00004bf9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .text         00000004  00000ab2  00000ab2  00000ba6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00004c84  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .text.LCD_cmd 0000004a  00000896  00000896  0000098a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.init_LCD 000000bc  00000680  00000680  00000774  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.init_Pins 00000010  00000a98  00000a98  00000b8c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.LCD_write 0000004a  000008e0  000008e0  000009d4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .rodata       00000020  0080010c  00000ac0  00000bb4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 21 .text.comprobar_Teclado 000001a4  000004dc  000004dc  000005d0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.Enviar_Mensaje 0000008e  0000073c  0000073c  00000830  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .progmemx.data 000000aa  000000ce  000000ce  000001c2  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 24 .text.Bienvenida 00000012  00000a74  00000a74  00000b68  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text.almacenar_Contrasena 00000012  00000a86  00000a86  00000b7a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .text.verificar_Contrasena 00000062  00000834  00000834  00000928  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .text.abrir_Cerradura 00000030  000009a2  000009a2  00000a96  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .text.cambiar_Contrasena 0000006a  000007ca  000007ca  000008be  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .text.activar_Alarma 00000020  00000a22  00000a22  00000b16  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .text.main    00000364  00000178  00000178  0000026c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 31 .bss.intentos 00000002  0080012c  0080012c  00000bd4  2**0
                  ALLOC
 32 .bss.state    00000002  0080012e  0080012e  00000bd4  2**0
                  ALLOC
 33 .text.__dummy_fini 00000002  00000aba  00000aba  00000bae  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 34 .text.__dummy_funcs_on_exit 00000002  00000abc  00000abc  00000bb0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 35 .text.__dummy_simulator_exit 00000002  00000abe  00000abe  00000bb2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 36 .text.exit    00000016  00000a5e  00000a5e  00000b52  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 37 .text.strcmp  00000042  0000092a  0000092a  00000a1e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 38 .text.strlen  0000002c  000009d2  000009d2  00000ac6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 39 .text._Exit   00000004  00000ab6  00000ab6  00000baa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 40 .text.avrlibc 00000024  000009fe  000009fe  00000af2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 41 .text.avrlibc 00000036  0000096c  0000096c  00000a60  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 42 .text.avrlibc 0000001c  00000a42  00000a42  00000b36  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 43 .text.libgcc  0000000a  00000aa8  00000aa8  00000b9c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3d 00 	jmp	0x7a	; 0x7a <__ctors_end>
   4:	0c 94 59 05 	jmp	0xab2	; 0xab2 <__bad_interrupt>
   8:	0c 94 59 05 	jmp	0xab2	; 0xab2 <__bad_interrupt>
   c:	0c 94 59 05 	jmp	0xab2	; 0xab2 <__bad_interrupt>
  10:	0c 94 59 05 	jmp	0xab2	; 0xab2 <__bad_interrupt>
  14:	0c 94 59 05 	jmp	0xab2	; 0xab2 <__bad_interrupt>
  18:	0c 94 59 05 	jmp	0xab2	; 0xab2 <__bad_interrupt>
  1c:	0c 94 59 05 	jmp	0xab2	; 0xab2 <__bad_interrupt>
  20:	0c 94 59 05 	jmp	0xab2	; 0xab2 <__bad_interrupt>
  24:	0c 94 59 05 	jmp	0xab2	; 0xab2 <__bad_interrupt>
  28:	0c 94 59 05 	jmp	0xab2	; 0xab2 <__bad_interrupt>
  2c:	0c 94 59 05 	jmp	0xab2	; 0xab2 <__bad_interrupt>
  30:	0c 94 59 05 	jmp	0xab2	; 0xab2 <__bad_interrupt>
  34:	0c 94 59 05 	jmp	0xab2	; 0xab2 <__bad_interrupt>
  38:	0c 94 59 05 	jmp	0xab2	; 0xab2 <__bad_interrupt>
  3c:	0c 94 59 05 	jmp	0xab2	; 0xab2 <__bad_interrupt>
  40:	0c 94 59 05 	jmp	0xab2	; 0xab2 <__bad_interrupt>
  44:	0c 94 59 05 	jmp	0xab2	; 0xab2 <__bad_interrupt>
  48:	0c 94 59 05 	jmp	0xab2	; 0xab2 <__bad_interrupt>
  4c:	0c 94 59 05 	jmp	0xab2	; 0xab2 <__bad_interrupt>
  50:	0c 94 59 05 	jmp	0xab2	; 0xab2 <__bad_interrupt>
  54:	0c 94 59 05 	jmp	0xab2	; 0xab2 <__bad_interrupt>
  58:	0c 94 59 05 	jmp	0xab2	; 0xab2 <__bad_interrupt>
  5c:	0c 94 59 05 	jmp	0xab2	; 0xab2 <__bad_interrupt>
  60:	0c 94 59 05 	jmp	0xab2	; 0xab2 <__bad_interrupt>
  64:	0c 94 59 05 	jmp	0xab2	; 0xab2 <__bad_interrupt>

00000068 <.dinit>:
  68:	01 00       	.word	0x0001	; ????
  6a:	01 0c       	add	r0, r1
  6c:	80 01       	movw	r16, r0
  6e:	0c 01       	movw	r0, r24
  70:	2c 00       	.word	0x002c	; ????
  72:	0a c0       	rjmp	.+20     	; 0x88 <__do_copy_data+0x2>
  74:	01 2c       	mov	r0, r1
  76:	01 30       	cpi	r16, 0x01	; 1
  78:	80 00       	.word	0x0080	; ????

0000007a <__ctors_end>:
  7a:	11 24       	eor	r1, r1
  7c:	1f be       	out	0x3f, r1	; 63
  7e:	cf ef       	ldi	r28, 0xFF	; 255
  80:	d8 e0       	ldi	r29, 0x08	; 8
  82:	de bf       	out	0x3e, r29	; 62
  84:	cd bf       	out	0x3d, r28	; 61

00000086 <__do_copy_data>:
  86:	e8 e6       	ldi	r30, 0x68	; 104
  88:	f0 e0       	ldi	r31, 0x00	; 0
  8a:	40 e0       	ldi	r20, 0x00	; 0
  8c:	17 c0       	rjmp	.+46     	; 0xbc <__do_clear_bss+0x8>
  8e:	b5 91       	lpm	r27, Z+
  90:	a5 91       	lpm	r26, Z+
  92:	35 91       	lpm	r19, Z+
  94:	25 91       	lpm	r18, Z+
  96:	05 91       	lpm	r16, Z+
  98:	07 fd       	sbrc	r16, 7
  9a:	0c c0       	rjmp	.+24     	; 0xb4 <__do_clear_bss>
  9c:	95 91       	lpm	r25, Z+
  9e:	85 91       	lpm	r24, Z+
  a0:	ef 01       	movw	r28, r30
  a2:	f9 2f       	mov	r31, r25
  a4:	e8 2f       	mov	r30, r24
  a6:	05 90       	lpm	r0, Z+
  a8:	0d 92       	st	X+, r0
  aa:	a2 17       	cp	r26, r18
  ac:	b3 07       	cpc	r27, r19
  ae:	d9 f7       	brne	.-10     	; 0xa6 <__do_copy_data+0x20>
  b0:	fe 01       	movw	r30, r28
  b2:	04 c0       	rjmp	.+8      	; 0xbc <__do_clear_bss+0x8>

000000b4 <__do_clear_bss>:
  b4:	1d 92       	st	X+, r1
  b6:	a2 17       	cp	r26, r18
  b8:	b3 07       	cpc	r27, r19
  ba:	e1 f7       	brne	.-8      	; 0xb4 <__do_clear_bss>
  bc:	e9 37       	cpi	r30, 0x79	; 121
  be:	f4 07       	cpc	r31, r20
  c0:	31 f7       	brne	.-52     	; 0x8e <__do_copy_data+0x8>
  c2:	0e 94 bc 00 	call	0x178	; 0x178 <main>
  c6:	0c 94 2f 05 	jmp	0xa5e	; 0xa5e <exit>

000000ca <_exit>:
  ca:	f8 94       	cli

000000cc <__stop_program>:
  cc:	ff cf       	rjmp	.-2      	; 0xcc <__stop_program>

Disassembly of section .text:

00000ab2 <__bad_interrupt>:
 ab2:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.LCD_cmd:

00000896 <LCD_cmd>:
		}
	}
}

void LCD_cmd(char cmd) {
	PORTB = (cmd >> 4) & 0x0F; // Enviar los 4 bits más significativos
 896:	98 2f       	mov	r25, r24
 898:	92 95       	swap	r25
 89a:	9f 70       	andi	r25, 0x0F	; 15
 89c:	95 b9       	out	0x05, r25	; 5
	PORTD &= ~(1 << RS);
 89e:	9b b1       	in	r25, 0x0b	; 11
 8a0:	9f 7d       	andi	r25, 0xDF	; 223
 8a2:	9b b9       	out	0x0b, r25	; 11
	PORTD &= ~(1 << RW);
 8a4:	9b b1       	in	r25, 0x0b	; 11
 8a6:	9f 7b       	andi	r25, 0xBF	; 191
 8a8:	9b b9       	out	0x0b, r25	; 11
	PORTD |= (1 << Enable);
 8aa:	9b b1       	in	r25, 0x0b	; 11
 8ac:	90 68       	ori	r25, 0x80	; 128
 8ae:	9b b9       	out	0x0b, r25	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 8b0:	ef e9       	ldi	r30, 0x9F	; 159
 8b2:	ff e0       	ldi	r31, 0x0F	; 15
 8b4:	31 97       	sbiw	r30, 0x01	; 1
 8b6:	f1 f7       	brne	.-4      	; 0x8b4 <LCD_cmd+0x1e>
 8b8:	00 c0       	rjmp	.+0      	; 0x8ba <LCD_cmd+0x24>
 8ba:	00 00       	nop
	_delay_ms(1);
	PORTD &= ~(1 << Enable);
 8bc:	9b b1       	in	r25, 0x0b	; 11
 8be:	9f 77       	andi	r25, 0x7F	; 127
 8c0:	9b b9       	out	0x0b, r25	; 11

	PORTB = cmd & 0x0F; // Enviar los 4 bits menos significativos
 8c2:	8f 70       	andi	r24, 0x0F	; 15
 8c4:	85 b9       	out	0x05, r24	; 5
	PORTD |= (1 << Enable);
 8c6:	8b b1       	in	r24, 0x0b	; 11
 8c8:	80 68       	ori	r24, 0x80	; 128
 8ca:	8b b9       	out	0x0b, r24	; 11
 8cc:	8f e9       	ldi	r24, 0x9F	; 159
 8ce:	9f e0       	ldi	r25, 0x0F	; 15
 8d0:	01 97       	sbiw	r24, 0x01	; 1
 8d2:	f1 f7       	brne	.-4      	; 0x8d0 <LCD_cmd+0x3a>
 8d4:	00 c0       	rjmp	.+0      	; 0x8d6 <LCD_cmd+0x40>
 8d6:	00 00       	nop
	_delay_ms(1);
	PORTD &= ~(1 << Enable);
 8d8:	8b b1       	in	r24, 0x0b	; 11
 8da:	8f 77       	andi	r24, 0x7F	; 127
 8dc:	8b b9       	out	0x0b, r24	; 11
 8de:	08 95       	ret

Disassembly of section .text.init_LCD:

00000680 <init_LCD>:
 680:	2f ef       	ldi	r18, 0xFF	; 255
 682:	80 e7       	ldi	r24, 0x70	; 112
 684:	92 e0       	ldi	r25, 0x02	; 2
 686:	21 50       	subi	r18, 0x01	; 1
 688:	80 40       	sbci	r24, 0x00	; 0
 68a:	90 40       	sbci	r25, 0x00	; 0
 68c:	e1 f7       	brne	.-8      	; 0x686 <init_LCD+0x6>
 68e:	00 c0       	rjmp	.+0      	; 0x690 <init_LCD+0x10>
 690:	00 00       	nop
}

void init_LCD() {
	_delay_ms(50);
	LCD_cmd(0x33);  
 692:	83 e3       	ldi	r24, 0x33	; 51
 694:	0e 94 4b 04 	call	0x896	; 0x896 <LCD_cmd>
 698:	2f ef       	ldi	r18, 0xFF	; 255
 69a:	80 e7       	ldi	r24, 0x70	; 112
 69c:	92 e0       	ldi	r25, 0x02	; 2
 69e:	21 50       	subi	r18, 0x01	; 1
 6a0:	80 40       	sbci	r24, 0x00	; 0
 6a2:	90 40       	sbci	r25, 0x00	; 0
 6a4:	e1 f7       	brne	.-8      	; 0x69e <init_LCD+0x1e>
 6a6:	00 c0       	rjmp	.+0      	; 0x6a8 <init_LCD+0x28>
 6a8:	00 00       	nop
	_delay_ms(50);
	LCD_cmd(0x32);  
 6aa:	82 e3       	ldi	r24, 0x32	; 50
 6ac:	0e 94 4b 04 	call	0x896	; 0x896 <LCD_cmd>
 6b0:	2f ef       	ldi	r18, 0xFF	; 255
 6b2:	80 e7       	ldi	r24, 0x70	; 112
 6b4:	92 e0       	ldi	r25, 0x02	; 2
 6b6:	21 50       	subi	r18, 0x01	; 1
 6b8:	80 40       	sbci	r24, 0x00	; 0
 6ba:	90 40       	sbci	r25, 0x00	; 0
 6bc:	e1 f7       	brne	.-8      	; 0x6b6 <init_LCD+0x36>
 6be:	00 c0       	rjmp	.+0      	; 0x6c0 <init_LCD+0x40>
 6c0:	00 00       	nop
	_delay_ms(50);
	LCD_cmd(0x28);  // Inicializar en 4 bit
 6c2:	88 e2       	ldi	r24, 0x28	; 40
 6c4:	0e 94 4b 04 	call	0x896	; 0x896 <LCD_cmd>
 6c8:	2f ef       	ldi	r18, 0xFF	; 255
 6ca:	80 e7       	ldi	r24, 0x70	; 112
 6cc:	92 e0       	ldi	r25, 0x02	; 2
 6ce:	21 50       	subi	r18, 0x01	; 1
 6d0:	80 40       	sbci	r24, 0x00	; 0
 6d2:	90 40       	sbci	r25, 0x00	; 0
 6d4:	e1 f7       	brne	.-8      	; 0x6ce <init_LCD+0x4e>
 6d6:	00 c0       	rjmp	.+0      	; 0x6d8 <init_LCD+0x58>
 6d8:	00 00       	nop
	_delay_ms(50);
	LCD_cmd(0x0C); 
 6da:	8c e0       	ldi	r24, 0x0C	; 12
 6dc:	0e 94 4b 04 	call	0x896	; 0x896 <LCD_cmd>
 6e0:	2f ef       	ldi	r18, 0xFF	; 255
 6e2:	80 e7       	ldi	r24, 0x70	; 112
 6e4:	92 e0       	ldi	r25, 0x02	; 2
 6e6:	21 50       	subi	r18, 0x01	; 1
 6e8:	80 40       	sbci	r24, 0x00	; 0
 6ea:	90 40       	sbci	r25, 0x00	; 0
 6ec:	e1 f7       	brne	.-8      	; 0x6e6 <init_LCD+0x66>
 6ee:	00 c0       	rjmp	.+0      	; 0x6f0 <init_LCD+0x70>
 6f0:	00 00       	nop
	_delay_ms(50);
	LCD_cmd(0x06);  
 6f2:	86 e0       	ldi	r24, 0x06	; 6
 6f4:	0e 94 4b 04 	call	0x896	; 0x896 <LCD_cmd>
 6f8:	2f ef       	ldi	r18, 0xFF	; 255
 6fa:	80 e7       	ldi	r24, 0x70	; 112
 6fc:	92 e0       	ldi	r25, 0x02	; 2
 6fe:	21 50       	subi	r18, 0x01	; 1
 700:	80 40       	sbci	r24, 0x00	; 0
 702:	90 40       	sbci	r25, 0x00	; 0
 704:	e1 f7       	brne	.-8      	; 0x6fe <init_LCD+0x7e>
 706:	00 c0       	rjmp	.+0      	; 0x708 <init_LCD+0x88>
 708:	00 00       	nop
	_delay_ms(50);
	LCD_cmd(0x01);  
 70a:	81 e0       	ldi	r24, 0x01	; 1
 70c:	0e 94 4b 04 	call	0x896	; 0x896 <LCD_cmd>
 710:	2f ef       	ldi	r18, 0xFF	; 255
 712:	80 e7       	ldi	r24, 0x70	; 112
 714:	92 e0       	ldi	r25, 0x02	; 2
 716:	21 50       	subi	r18, 0x01	; 1
 718:	80 40       	sbci	r24, 0x00	; 0
 71a:	90 40       	sbci	r25, 0x00	; 0
 71c:	e1 f7       	brne	.-8      	; 0x716 <init_LCD+0x96>
 71e:	00 c0       	rjmp	.+0      	; 0x720 <init_LCD+0xa0>
 720:	00 00       	nop
	_delay_ms(50);
	LCD_cmd(0x80); 
 722:	80 e8       	ldi	r24, 0x80	; 128
 724:	0e 94 4b 04 	call	0x896	; 0x896 <LCD_cmd>
 728:	2f ef       	ldi	r18, 0xFF	; 255
 72a:	80 e7       	ldi	r24, 0x70	; 112
 72c:	92 e0       	ldi	r25, 0x02	; 2
 72e:	21 50       	subi	r18, 0x01	; 1
 730:	80 40       	sbci	r24, 0x00	; 0
 732:	90 40       	sbci	r25, 0x00	; 0
 734:	e1 f7       	brne	.-8      	; 0x72e <init_LCD+0xae>
 736:	00 c0       	rjmp	.+0      	; 0x738 <init_LCD+0xb8>
 738:	00 00       	nop
 73a:	08 95       	ret

Disassembly of section .text.init_Pins:

00000a98 <init_Pins>:
	_delay_ms(50);
}

void init_Pins() {
	DDRD = 0xFF;
 a98:	8f ef       	ldi	r24, 0xFF	; 255
 a9a:	8a b9       	out	0x0a, r24	; 10
	DDRB = 0xFF;
 a9c:	84 b9       	out	0x04, r24	; 4
	DDRC = 0xF0;
 a9e:	80 ef       	ldi	r24, 0xF0	; 240
 aa0:	87 b9       	out	0x07, r24	; 7
	PORTC = 0x0F;  // Configurar el puerto C para lectura (con pull-up)
 aa2:	8f e0       	ldi	r24, 0x0F	; 15
 aa4:	88 b9       	out	0x08, r24	; 8
 aa6:	08 95       	ret

Disassembly of section .text.LCD_write:

000008e0 <LCD_write>:
}

void LCD_write(char data) {
	PORTB = (data >> 4) & 0x0F; // Enviar los 4 bits más significativos
 8e0:	98 2f       	mov	r25, r24
 8e2:	92 95       	swap	r25
 8e4:	9f 70       	andi	r25, 0x0F	; 15
 8e6:	95 b9       	out	0x05, r25	; 5
	PORTD |= (1 << RS);
 8e8:	9b b1       	in	r25, 0x0b	; 11
 8ea:	90 62       	ori	r25, 0x20	; 32
 8ec:	9b b9       	out	0x0b, r25	; 11
	PORTD &= ~(1 << RW);
 8ee:	9b b1       	in	r25, 0x0b	; 11
 8f0:	9f 7b       	andi	r25, 0xBF	; 191
 8f2:	9b b9       	out	0x0b, r25	; 11
	PORTD |= (1 << Enable);
 8f4:	9b b1       	in	r25, 0x0b	; 11
 8f6:	90 68       	ori	r25, 0x80	; 128
 8f8:	9b b9       	out	0x0b, r25	; 11
 8fa:	ef e9       	ldi	r30, 0x9F	; 159
 8fc:	ff e0       	ldi	r31, 0x0F	; 15
 8fe:	31 97       	sbiw	r30, 0x01	; 1
 900:	f1 f7       	brne	.-4      	; 0x8fe <LCD_write+0x1e>
 902:	00 c0       	rjmp	.+0      	; 0x904 <__stack+0x5>
 904:	00 00       	nop
	_delay_ms(1);
	PORTD &= ~(1 << Enable);
 906:	9b b1       	in	r25, 0x0b	; 11
 908:	9f 77       	andi	r25, 0x7F	; 127
 90a:	9b b9       	out	0x0b, r25	; 11

	PORTB = data & 0x0F; // Enviar los 4 bits menos significativos
 90c:	8f 70       	andi	r24, 0x0F	; 15
 90e:	85 b9       	out	0x05, r24	; 5
	PORTD |= (1 << Enable);
 910:	8b b1       	in	r24, 0x0b	; 11
 912:	80 68       	ori	r24, 0x80	; 128
 914:	8b b9       	out	0x0b, r24	; 11
 916:	8f e9       	ldi	r24, 0x9F	; 159
 918:	9f e0       	ldi	r25, 0x0F	; 15
 91a:	01 97       	sbiw	r24, 0x01	; 1
 91c:	f1 f7       	brne	.-4      	; 0x91a <__stack+0x1b>
 91e:	00 c0       	rjmp	.+0      	; 0x920 <__stack+0x21>
 920:	00 00       	nop
	_delay_ms(1);
	PORTD &= ~(1 << Enable);
 922:	8b b1       	in	r24, 0x0b	; 11
 924:	8f 77       	andi	r24, 0x7F	; 127
 926:	8b b9       	out	0x0b, r24	; 11
 928:	08 95       	ret

Disassembly of section .text.comprobar_Teclado:

000004dc <comprobar_Teclado>:
}

void comprobar_Teclado(int* state, char* caracter) {
 4dc:	cf 92       	push	r12
 4de:	df 92       	push	r13
 4e0:	ef 92       	push	r14
 4e2:	ff 92       	push	r15
 4e4:	0f 93       	push	r16
 4e6:	1f 93       	push	r17
 4e8:	cf 93       	push	r28
 4ea:	df 93       	push	r29
 4ec:	cd b7       	in	r28, 0x3d	; 61
 4ee:	de b7       	in	r29, 0x3e	; 62
 4f0:	a0 97       	sbiw	r28, 0x20	; 32
 4f2:	0f b6       	in	r0, 0x3f	; 63
 4f4:	f8 94       	cli
 4f6:	de bf       	out	0x3e, r29	; 62
 4f8:	0f be       	out	0x3f, r0	; 63
 4fa:	cd bf       	out	0x3d, r28	; 61
	int Columna_ = -1;
	int Fila_ = -1;
	int Fila[4] = {Fila1, Fila2, Fila3, Fila4};
 4fc:	28 e0       	ldi	r18, 0x08	; 8
 4fe:	ec e0       	ldi	r30, 0x0C	; 12
 500:	f1 e0       	ldi	r31, 0x01	; 1
 502:	de 01       	movw	r26, r28
 504:	11 96       	adiw	r26, 0x01	; 1
 506:	01 90       	ld	r0, Z+
 508:	0d 92       	st	X+, r0
 50a:	2a 95       	dec	r18
 50c:	e1 f7       	brne	.-8      	; 0x506 <comprobar_Teclado+0x2a>
	int Col[4] = {Col1, Col2, Col3, Col4};
 50e:	28 e0       	ldi	r18, 0x08	; 8
 510:	e4 e1       	ldi	r30, 0x14	; 20
 512:	f1 e0       	ldi	r31, 0x01	; 1
 514:	de 01       	movw	r26, r28
 516:	19 96       	adiw	r26, 0x09	; 9
 518:	01 90       	ld	r0, Z+
 51a:	0d 92       	st	X+, r0
 51c:	2a 95       	dec	r18
 51e:	e1 f7       	brne	.-8      	; 0x518 <comprobar_Teclado+0x3c>
	char Teclado[4][4] = {
 520:	20 e1       	ldi	r18, 0x10	; 16
 522:	ec e1       	ldi	r30, 0x1C	; 28
 524:	f1 e0       	ldi	r31, 0x01	; 1
 526:	de 01       	movw	r26, r28
 528:	51 96       	adiw	r26, 0x11	; 17
 52a:	01 90       	ld	r0, Z+
 52c:	0d 92       	st	X+, r0
 52e:	2a 95       	dec	r18
 530:	e1 f7       	brne	.-8      	; 0x52a <comprobar_Teclado+0x4e>
		{'4', '5', '6', 'B'},
		{'7', '8', '9', 'C'},
		{'*', '0', '#', 'D'}
	};

	PORTD |= (1 << Fila1) | (1 << Fila2) | (1 << Fila3) | (1 << Fila4);
 532:	2b b1       	in	r18, 0x0b	; 11
 534:	2e 61       	ori	r18, 0x1E	; 30
 536:	2b b9       	out	0x0b, r18	; 11
	for (int i = 0; i < 4; i++){
 538:	a0 e0       	ldi	r26, 0x00	; 0
 53a:	b0 e0       	ldi	r27, 0x00	; 0
	PORTD &= ~(1 << Enable);
}

void comprobar_Teclado(int* state, char* caracter) {
	int Columna_ = -1;
	int Fila_ = -1;
 53c:	ee 24       	eor	r14, r14
 53e:	ea 94       	dec	r14
 540:	fe 2c       	mov	r15, r14
	_delay_ms(1);
	PORTD &= ~(1 << Enable);
}

void comprobar_Teclado(int* state, char* caracter) {
	int Columna_ = -1;
 542:	0f ef       	ldi	r16, 0xFF	; 255
 544:	1f ef       	ldi	r17, 0xFF	; 255
		{'7', '8', '9', 'C'},
		{'*', '0', '#', 'D'}
	};

	PORTD |= (1 << Fila1) | (1 << Fila2) | (1 << Fila3) | (1 << Fila4);
	for (int i = 0; i < 4; i++){
 546:	52 c0       	rjmp	.+164    	; 0x5ec <comprobar_Teclado+0x110>
		PORTD &= ~(1 << Fila[i]);
 548:	4b b1       	in	r20, 0x0b	; 11
 54a:	fd 01       	movw	r30, r26
 54c:	ee 0f       	add	r30, r30
 54e:	ff 1f       	adc	r31, r31
 550:	cc 24       	eor	r12, r12
 552:	c3 94       	inc	r12
 554:	d1 2c       	mov	r13, r1
 556:	cc 0e       	add	r12, r28
 558:	dd 1e       	adc	r13, r29
 55a:	ec 0d       	add	r30, r12
 55c:	fd 1d       	adc	r31, r13
 55e:	21 e0       	ldi	r18, 0x01	; 1
 560:	30 e0       	ldi	r19, 0x00	; 0
 562:	00 80       	ld	r0, Z
 564:	02 c0       	rjmp	.+4      	; 0x56a <comprobar_Teclado+0x8e>
 566:	22 0f       	add	r18, r18
 568:	33 1f       	adc	r19, r19
 56a:	0a 94       	dec	r0
 56c:	e2 f7       	brpl	.-8      	; 0x566 <comprobar_Teclado+0x8a>
 56e:	20 95       	com	r18
 570:	24 23       	and	r18, r20
 572:	2b b9       	out	0x0b, r18	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 574:	2a e1       	ldi	r18, 0x1A	; 26
 576:	2a 95       	dec	r18
 578:	f1 f7       	brne	.-4      	; 0x576 <comprobar_Teclado+0x9a>
 57a:	00 c0       	rjmp	.+0      	; 0x57c <comprobar_Teclado+0xa0>
		_delay_us(5);
		for (int j = 0; j < 4; j++) {
 57c:	40 e0       	ldi	r20, 0x00	; 0
 57e:	50 e0       	ldi	r21, 0x00	; 0
 580:	16 c0       	rjmp	.+44     	; 0x5ae <comprobar_Teclado+0xd2>
			if (!(PINC & (1 << Col[j]))) {
 582:	26 b1       	in	r18, 0x06	; 6
 584:	fa 01       	movw	r30, r20
 586:	ee 0f       	add	r30, r30
 588:	ff 1f       	adc	r31, r31
 58a:	cc 24       	eor	r12, r12
 58c:	c3 94       	inc	r12
 58e:	d1 2c       	mov	r13, r1
 590:	cc 0e       	add	r12, r28
 592:	dd 1e       	adc	r13, r29
 594:	ec 0d       	add	r30, r12
 596:	fd 1d       	adc	r31, r13
 598:	30 e0       	ldi	r19, 0x00	; 0
 59a:	00 84       	ldd	r0, Z+8	; 0x08
 59c:	02 c0       	rjmp	.+4      	; 0x5a2 <comprobar_Teclado+0xc6>
 59e:	35 95       	asr	r19
 5a0:	27 95       	ror	r18
 5a2:	0a 94       	dec	r0
 5a4:	e2 f7       	brpl	.-8      	; 0x59e <comprobar_Teclado+0xc2>
 5a6:	20 ff       	sbrs	r18, 0
 5a8:	06 c0       	rjmp	.+12     	; 0x5b6 <comprobar_Teclado+0xda>

	PORTD |= (1 << Fila1) | (1 << Fila2) | (1 << Fila3) | (1 << Fila4);
	for (int i = 0; i < 4; i++){
		PORTD &= ~(1 << Fila[i]);
		_delay_us(5);
		for (int j = 0; j < 4; j++) {
 5aa:	4f 5f       	subi	r20, 0xFF	; 255
 5ac:	5f 4f       	sbci	r21, 0xFF	; 255
 5ae:	44 30       	cpi	r20, 0x04	; 4
 5b0:	51 05       	cpc	r21, r1
 5b2:	3c f3       	brlt	.-50     	; 0x582 <comprobar_Teclado+0xa6>
 5b4:	02 c0       	rjmp	.+4      	; 0x5ba <comprobar_Teclado+0xde>
			if (!(PINC & (1 << Col[j]))) {
				Columna_ = j;
				Fila_ = i; 
 5b6:	7d 01       	movw	r14, r26
	for (int i = 0; i < 4; i++){
		PORTD &= ~(1 << Fila[i]);
		_delay_us(5);
		for (int j = 0; j < 4; j++) {
			if (!(PINC & (1 << Col[j]))) {
				Columna_ = j;
 5b8:	8a 01       	movw	r16, r20
				Fila_ = i; 
				break;
			}
		}
		PORTD |= (1 << Fila[i]);
 5ba:	4b b1       	in	r20, 0x0b	; 11
 5bc:	fd 01       	movw	r30, r26
 5be:	ee 0f       	add	r30, r30
 5c0:	ff 1f       	adc	r31, r31
 5c2:	21 e0       	ldi	r18, 0x01	; 1
 5c4:	30 e0       	ldi	r19, 0x00	; 0
 5c6:	2c 0f       	add	r18, r28
 5c8:	3d 1f       	adc	r19, r29
 5ca:	e2 0f       	add	r30, r18
 5cc:	f3 1f       	adc	r31, r19
 5ce:	21 e0       	ldi	r18, 0x01	; 1
 5d0:	30 e0       	ldi	r19, 0x00	; 0
 5d2:	00 80       	ld	r0, Z
 5d4:	02 c0       	rjmp	.+4      	; 0x5da <comprobar_Teclado+0xfe>
 5d6:	22 0f       	add	r18, r18
 5d8:	33 1f       	adc	r19, r19
 5da:	0a 94       	dec	r0
 5dc:	e2 f7       	brpl	.-8      	; 0x5d6 <comprobar_Teclado+0xfa>
 5de:	24 2b       	or	r18, r20
 5e0:	2b b9       	out	0x0b, r18	; 11
		if (Columna_ != -1) {
 5e2:	0f 3f       	cpi	r16, 0xFF	; 255
 5e4:	3f ef       	ldi	r19, 0xFF	; 255
 5e6:	13 07       	cpc	r17, r19
 5e8:	29 f4       	brne	.+10     	; 0x5f4 <comprobar_Teclado+0x118>
		{'7', '8', '9', 'C'},
		{'*', '0', '#', 'D'}
	};

	PORTD |= (1 << Fila1) | (1 << Fila2) | (1 << Fila3) | (1 << Fila4);
	for (int i = 0; i < 4; i++){
 5ea:	11 96       	adiw	r26, 0x01	; 1
 5ec:	a4 30       	cpi	r26, 0x04	; 4
 5ee:	b1 05       	cpc	r27, r1
 5f0:	0c f4       	brge	.+2      	; 0x5f4 <comprobar_Teclado+0x118>
 5f2:	aa cf       	rjmp	.-172    	; 0x548 <comprobar_Teclado+0x6c>
		if (Columna_ != -1) {
			break;
		}
	}

	if (Columna_ != -1) {
 5f4:	0f 3f       	cpi	r16, 0xFF	; 255
 5f6:	ef ef       	ldi	r30, 0xFF	; 255
 5f8:	1e 07       	cpc	r17, r30
 5fa:	99 f1       	breq	.+102    	; 0x662 <comprobar_Teclado+0x186>
		*caracter = Teclado[Fila_][Columna_];
 5fc:	ee 0c       	add	r14, r14
 5fe:	ff 1c       	adc	r15, r15
 600:	ee 0c       	add	r14, r14
 602:	ff 1c       	adc	r15, r15
 604:	cc 24       	eor	r12, r12
 606:	c3 94       	inc	r12
 608:	d1 2c       	mov	r13, r1
 60a:	cc 0e       	add	r12, r28
 60c:	dd 1e       	adc	r13, r29
 60e:	ec 0c       	add	r14, r12
 610:	fd 1c       	adc	r15, r13
 612:	f7 01       	movw	r30, r14
 614:	e0 0f       	add	r30, r16
 616:	f1 1f       	adc	r31, r17
 618:	20 89       	ldd	r18, Z+16	; 0x10
 61a:	fb 01       	movw	r30, r22
 61c:	20 83       	st	Z, r18
		
		if (*state == 0 && *caracter == 'A') {
 61e:	fc 01       	movw	r30, r24
 620:	40 81       	ld	r20, Z
 622:	51 81       	ldd	r21, Z+1	; 0x01
 624:	45 2b       	or	r20, r21
 626:	31 f4       	brne	.+12     	; 0x634 <comprobar_Teclado+0x158>
 628:	21 34       	cpi	r18, 0x41	; 65
 62a:	21 f4       	brne	.+8      	; 0x634 <comprobar_Teclado+0x158>
			*state = 1;
 62c:	21 e0       	ldi	r18, 0x01	; 1
 62e:	30 e0       	ldi	r19, 0x00	; 0
 630:	31 83       	std	Z+1, r19	; 0x01
 632:	20 83       	st	Z, r18
		}
		
		if (*state == 1) {
 634:	fc 01       	movw	r30, r24
 636:	20 81       	ld	r18, Z
 638:	31 81       	ldd	r19, Z+1	; 0x01
 63a:	21 30       	cpi	r18, 0x01	; 1
 63c:	31 05       	cpc	r19, r1
 63e:	89 f4       	brne	.+34     	; 0x662 <comprobar_Teclado+0x186>
			if (*caracter == '#') {
 640:	fb 01       	movw	r30, r22
 642:	20 81       	ld	r18, Z
 644:	23 32       	cpi	r18, 0x23	; 35
 646:	31 f4       	brne	.+12     	; 0x654 <comprobar_Teclado+0x178>
				*state = 2;
 648:	22 e0       	ldi	r18, 0x02	; 2
 64a:	30 e0       	ldi	r19, 0x00	; 0
 64c:	fc 01       	movw	r30, r24
 64e:	31 83       	std	Z+1, r19	; 0x01
 650:	20 83       	st	Z, r18
 652:	07 c0       	rjmp	.+14     	; 0x662 <comprobar_Teclado+0x186>
			} else if (*caracter == '*') {
 654:	2a 32       	cpi	r18, 0x2A	; 42
 656:	29 f4       	brne	.+10     	; 0x662 <comprobar_Teclado+0x186>
				*state = 3;
 658:	23 e0       	ldi	r18, 0x03	; 3
 65a:	30 e0       	ldi	r19, 0x00	; 0
 65c:	fc 01       	movw	r30, r24
 65e:	31 83       	std	Z+1, r19	; 0x01
 660:	20 83       	st	Z, r18
			}
		}
	}
}
 662:	a0 96       	adiw	r28, 0x20	; 32
 664:	0f b6       	in	r0, 0x3f	; 63
 666:	f8 94       	cli
 668:	de bf       	out	0x3e, r29	; 62
 66a:	0f be       	out	0x3f, r0	; 63
 66c:	cd bf       	out	0x3d, r28	; 61
 66e:	df 91       	pop	r29
 670:	cf 91       	pop	r28
 672:	1f 91       	pop	r17
 674:	0f 91       	pop	r16
 676:	ff 90       	pop	r15
 678:	ef 90       	pop	r14
 67a:	df 90       	pop	r13
 67c:	cf 90       	pop	r12
 67e:	08 95       	ret

Disassembly of section .text.Enviar_Mensaje:

0000073c <Enviar_Mensaje>:

void Bienvenida() {
	Enviar_Mensaje("Bienvenido", "Ingrese A");
}

void Enviar_Mensaje(const char* Cadena1, const char* Cadena2) {
 73c:	6f 92       	push	r6
 73e:	7f 92       	push	r7
 740:	8f 92       	push	r8
 742:	cf 92       	push	r12
 744:	df 92       	push	r13
 746:	ef 92       	push	r14
 748:	cf 93       	push	r28
 74a:	df 93       	push	r29
 74c:	3b 01       	movw	r6, r22
 74e:	88 2e       	mov	r8, r24
 750:	69 01       	movw	r12, r18
 752:	e4 2e       	mov	r14, r20
	LCD_cmd(0x01);
 754:	81 e0       	ldi	r24, 0x01	; 1
 756:	0e 94 4b 04 	call	0x896	; 0x896 <LCD_cmd>
	for (int i = 0; i < 16 && Cadena1[i] != '\0'; i++) {
 75a:	c0 e0       	ldi	r28, 0x00	; 0
 75c:	d0 e0       	ldi	r29, 0x00	; 0
 75e:	03 c0       	rjmp	.+6      	; 0x766 <Enviar_Mensaje+0x2a>
		LCD_write(Cadena1[i]);
 760:	0e 94 70 04 	call	0x8e0	; 0x8e0 <LCD_write>
	Enviar_Mensaje("Bienvenido", "Ingrese A");
}

void Enviar_Mensaje(const char* Cadena1, const char* Cadena2) {
	LCD_cmd(0x01);
	for (int i = 0; i < 16 && Cadena1[i] != '\0'; i++) {
 764:	21 96       	adiw	r28, 0x01	; 1
 766:	c0 31       	cpi	r28, 0x10	; 16
 768:	d1 05       	cpc	r29, r1
 76a:	6c f4       	brge	.+26     	; 0x786 <Enviar_Mensaje+0x4a>
 76c:	a8 2d       	mov	r26, r8
 76e:	c3 01       	movw	r24, r6
 770:	8c 0f       	add	r24, r28
 772:	9d 1f       	adc	r25, r29
 774:	a1 1d       	adc	r26, r1
 776:	d7 fd       	sbrc	r29, 7
 778:	aa 95       	dec	r26
 77a:	fc 01       	movw	r30, r24
 77c:	84 91       	lpm	r24, Z
 77e:	a7 fd       	sbrc	r26, 7
 780:	80 81       	ld	r24, Z
 782:	81 11       	cpse	r24, r1
 784:	ed cf       	rjmp	.-38     	; 0x760 <Enviar_Mensaje+0x24>
		LCD_write(Cadena1[i]);
	}
	LCD_cmd(0xC0);
 786:	80 ec       	ldi	r24, 0xC0	; 192
 788:	0e 94 4b 04 	call	0x896	; 0x896 <LCD_cmd>
	for (int i = 0; i < 16 && Cadena2[i] != '\0'; i++) {
 78c:	c0 e0       	ldi	r28, 0x00	; 0
 78e:	d0 e0       	ldi	r29, 0x00	; 0
 790:	03 c0       	rjmp	.+6      	; 0x798 <Enviar_Mensaje+0x5c>
		LCD_write(Cadena2[i]);
 792:	0e 94 70 04 	call	0x8e0	; 0x8e0 <LCD_write>
	LCD_cmd(0x01);
	for (int i = 0; i < 16 && Cadena1[i] != '\0'; i++) {
		LCD_write(Cadena1[i]);
	}
	LCD_cmd(0xC0);
	for (int i = 0; i < 16 && Cadena2[i] != '\0'; i++) {
 796:	21 96       	adiw	r28, 0x01	; 1
 798:	c0 31       	cpi	r28, 0x10	; 16
 79a:	d1 05       	cpc	r29, r1
 79c:	6c f4       	brge	.+26     	; 0x7b8 <Enviar_Mensaje+0x7c>
 79e:	ae 2d       	mov	r26, r14
 7a0:	c6 01       	movw	r24, r12
 7a2:	8c 0f       	add	r24, r28
 7a4:	9d 1f       	adc	r25, r29
 7a6:	a1 1d       	adc	r26, r1
 7a8:	d7 fd       	sbrc	r29, 7
 7aa:	aa 95       	dec	r26
 7ac:	fc 01       	movw	r30, r24
 7ae:	84 91       	lpm	r24, Z
 7b0:	a7 fd       	sbrc	r26, 7
 7b2:	80 81       	ld	r24, Z
 7b4:	81 11       	cpse	r24, r1
 7b6:	ed cf       	rjmp	.-38     	; 0x792 <Enviar_Mensaje+0x56>
		LCD_write(Cadena2[i]);
	}
}
 7b8:	df 91       	pop	r29
 7ba:	cf 91       	pop	r28
 7bc:	ef 90       	pop	r14
 7be:	df 90       	pop	r13
 7c0:	cf 90       	pop	r12
 7c2:	8f 90       	pop	r8
 7c4:	7f 90       	pop	r7
 7c6:	6f 90       	pop	r6
 7c8:	08 95       	ret

Disassembly of section .text.Bienvenida:

00000a74 <Bienvenida>:
		}
	}
}

void Bienvenida() {
	Enviar_Mensaje("Bienvenido", "Ingrese A");
 a74:	2e ec       	ldi	r18, 0xCE	; 206
 a76:	30 e0       	ldi	r19, 0x00	; 0
 a78:	40 e0       	ldi	r20, 0x00	; 0
 a7a:	68 ed       	ldi	r22, 0xD8	; 216
 a7c:	70 e0       	ldi	r23, 0x00	; 0
 a7e:	80 e0       	ldi	r24, 0x00	; 0
 a80:	0e 94 9e 03 	call	0x73c	; 0x73c <Enviar_Mensaje>
 a84:	08 95       	ret

Disassembly of section .text.almacenar_Contrasena:

00000a86 <almacenar_Contrasena>:
		LCD_write(Cadena2[i]);
	}
}

void almacenar_Contrasena(char* password) {
	eeprom_write_block(password, &password_ref, sizeof(password_ref));
 a86:	bc 01       	movw	r22, r24
 a88:	80 e8       	ldi	r24, 0x80	; 128
 a8a:	26 e0       	ldi	r18, 0x06	; 6
 a8c:	30 e0       	ldi	r19, 0x00	; 0
 a8e:	40 e0       	ldi	r20, 0x00	; 0
 a90:	50 e0       	ldi	r21, 0x00	; 0
 a92:	0e 94 b6 04 	call	0x96c	; 0x96c <eeprom_write_block>
 a96:	08 95       	ret

Disassembly of section .text.verificar_Contrasena:

00000834 <verificar_Contrasena>:
}

int verificar_Contrasena(char* password) {
 834:	ef 92       	push	r14
 836:	ff 92       	push	r15
 838:	0f 93       	push	r16
 83a:	1f 93       	push	r17
 83c:	cf 93       	push	r28
 83e:	df 93       	push	r29
 840:	00 d0       	rcall	.+0      	; 0x842 <verificar_Contrasena+0xe>
 842:	00 d0       	rcall	.+0      	; 0x844 <verificar_Contrasena+0x10>
 844:	00 d0       	rcall	.+0      	; 0x846 <verificar_Contrasena+0x12>
 846:	cd b7       	in	r28, 0x3d	; 61
 848:	de b7       	in	r29, 0x3e	; 62
 84a:	7c 01       	movw	r14, r24
	char stored_password[6];
	eeprom_read_block(stored_password, &password_ref, sizeof(password_ref));
 84c:	40 e0       	ldi	r20, 0x00	; 0
 84e:	50 e0       	ldi	r21, 0x00	; 0
 850:	60 e8       	ldi	r22, 0x80	; 128
 852:	26 e0       	ldi	r18, 0x06	; 6
 854:	30 e0       	ldi	r19, 0x00	; 0
 856:	8e 01       	movw	r16, r28
 858:	0f 5f       	subi	r16, 0xFF	; 255
 85a:	1f 4f       	sbci	r17, 0xFF	; 255
 85c:	c8 01       	movw	r24, r16
 85e:	0e 94 ff 04 	call	0x9fe	; 0x9fe <eeprom_read_block>
	
	if (strcmp(password, stored_password) == 0) {
 862:	98 01       	movw	r18, r16
 864:	40 e8       	ldi	r20, 0x80	; 128
 866:	b7 01       	movw	r22, r14
 868:	80 e8       	ldi	r24, 0x80	; 128
 86a:	0e 94 95 04 	call	0x92a	; 0x92a <strcmp>
 86e:	89 2b       	or	r24, r25
 870:	19 f4       	brne	.+6      	; 0x878 <verificar_Contrasena+0x44>
		return 1;
 872:	81 e0       	ldi	r24, 0x01	; 1
 874:	90 e0       	ldi	r25, 0x00	; 0
 876:	02 c0       	rjmp	.+4      	; 0x87c <verificar_Contrasena+0x48>
	}
	return 0;
 878:	80 e0       	ldi	r24, 0x00	; 0
 87a:	90 e0       	ldi	r25, 0x00	; 0
}
 87c:	26 96       	adiw	r28, 0x06	; 6
 87e:	0f b6       	in	r0, 0x3f	; 63
 880:	f8 94       	cli
 882:	de bf       	out	0x3e, r29	; 62
 884:	0f be       	out	0x3f, r0	; 63
 886:	cd bf       	out	0x3d, r28	; 61
 888:	df 91       	pop	r29
 88a:	cf 91       	pop	r28
 88c:	1f 91       	pop	r17
 88e:	0f 91       	pop	r16
 890:	ff 90       	pop	r15
 892:	ef 90       	pop	r14
 894:	08 95       	ret

Disassembly of section .text.abrir_Cerradura:

000009a2 <abrir_Cerradura>:

void abrir_Cerradura() {
	Enviar_Mensaje("Abriendo...", "Cerradura");
 9a2:	23 ee       	ldi	r18, 0xE3	; 227
 9a4:	30 e0       	ldi	r19, 0x00	; 0
 9a6:	40 e0       	ldi	r20, 0x00	; 0
 9a8:	6d ee       	ldi	r22, 0xED	; 237
 9aa:	70 e0       	ldi	r23, 0x00	; 0
 9ac:	80 e0       	ldi	r24, 0x00	; 0
 9ae:	0e 94 9e 03 	call	0x73c	; 0x73c <Enviar_Mensaje>
	PORTB |= (1 << LED_Verde);
 9b2:	85 b1       	in	r24, 0x05	; 5
 9b4:	80 62       	ori	r24, 0x20	; 32
 9b6:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 9b8:	2f ef       	ldi	r18, 0xFF	; 255
 9ba:	8b e7       	ldi	r24, 0x7B	; 123
 9bc:	92 e9       	ldi	r25, 0x92	; 146
 9be:	21 50       	subi	r18, 0x01	; 1
 9c0:	80 40       	sbci	r24, 0x00	; 0
 9c2:	90 40       	sbci	r25, 0x00	; 0
 9c4:	e1 f7       	brne	.-8      	; 0x9be <abrir_Cerradura+0x1c>
 9c6:	00 c0       	rjmp	.+0      	; 0x9c8 <abrir_Cerradura+0x26>
 9c8:	00 00       	nop
	_delay_ms(3000);
	PORTB &= ~(1 << LED_Verde);
 9ca:	85 b1       	in	r24, 0x05	; 5
 9cc:	8f 7d       	andi	r24, 0xDF	; 223
 9ce:	85 b9       	out	0x05, r24	; 5
 9d0:	08 95       	ret

Disassembly of section .text.cambiar_Contrasena:

000007ca <cambiar_Contrasena>:
}

void cambiar_Contrasena(char* new_password) {
 7ca:	cf 93       	push	r28
 7cc:	df 93       	push	r29
 7ce:	ec 01       	movw	r28, r24
	if (strlen(new_password) >= 4 && strlen(new_password) <= 6) { 
 7d0:	bc 01       	movw	r22, r24
 7d2:	80 e8       	ldi	r24, 0x80	; 128
 7d4:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <strlen>
 7d8:	84 30       	cpi	r24, 0x04	; 4
 7da:	91 05       	cpc	r25, r1
 7dc:	b8 f0       	brcs	.+46     	; 0x80c <__DATA_REGION_LENGTH__+0xc>
 7de:	07 97       	sbiw	r24, 0x07	; 7
 7e0:	a8 f4       	brcc	.+42     	; 0x80c <__DATA_REGION_LENGTH__+0xc>
		almacenar_Contrasena(new_password);
 7e2:	ce 01       	movw	r24, r28
 7e4:	0e 94 43 05 	call	0xa86	; 0xa86 <almacenar_Contrasena>
		Enviar_Mensaje("Contraseña", "Cambiada");
 7e8:	29 ef       	ldi	r18, 0xF9	; 249
 7ea:	30 e0       	ldi	r19, 0x00	; 0
 7ec:	40 e0       	ldi	r20, 0x00	; 0
 7ee:	62 e0       	ldi	r22, 0x02	; 2
 7f0:	71 e0       	ldi	r23, 0x01	; 1
 7f2:	80 e0       	ldi	r24, 0x00	; 0
 7f4:	0e 94 9e 03 	call	0x73c	; 0x73c <Enviar_Mensaje>
 7f8:	2f ef       	ldi	r18, 0xFF	; 255
 7fa:	83 ed       	ldi	r24, 0xD3	; 211
 7fc:	90 e3       	ldi	r25, 0x30	; 48
 7fe:	21 50       	subi	r18, 0x01	; 1
 800:	80 40       	sbci	r24, 0x00	; 0
 802:	90 40       	sbci	r25, 0x00	; 0
 804:	e1 f7       	brne	.-8      	; 0x7fe <cambiar_Contrasena+0x34>
 806:	00 c0       	rjmp	.+0      	; 0x808 <__DATA_REGION_LENGTH__+0x8>
 808:	00 00       	nop
 80a:	11 c0       	rjmp	.+34     	; 0x82e <__DATA_REGION_LENGTH__+0x2e>
		_delay_ms(1000);
		} else {
		Enviar_Mensaje("Error:", "Longitud");
 80c:	2d e0       	ldi	r18, 0x0D	; 13
 80e:	31 e0       	ldi	r19, 0x01	; 1
 810:	40 e0       	ldi	r20, 0x00	; 0
 812:	66 e1       	ldi	r22, 0x16	; 22
 814:	71 e0       	ldi	r23, 0x01	; 1
 816:	80 e0       	ldi	r24, 0x00	; 0
 818:	0e 94 9e 03 	call	0x73c	; 0x73c <Enviar_Mensaje>
 81c:	2f ef       	ldi	r18, 0xFF	; 255
 81e:	83 ed       	ldi	r24, 0xD3	; 211
 820:	90 e3       	ldi	r25, 0x30	; 48
 822:	21 50       	subi	r18, 0x01	; 1
 824:	80 40       	sbci	r24, 0x00	; 0
 826:	90 40       	sbci	r25, 0x00	; 0
 828:	e1 f7       	brne	.-8      	; 0x822 <__DATA_REGION_LENGTH__+0x22>
 82a:	00 c0       	rjmp	.+0      	; 0x82c <__DATA_REGION_LENGTH__+0x2c>
 82c:	00 00       	nop
		_delay_ms(1000);
	}
}
 82e:	df 91       	pop	r29
 830:	cf 91       	pop	r28
 832:	08 95       	ret

Disassembly of section .text.activar_Alarma:

00000a22 <activar_Alarma>:

void activar_Alarma() {
	PORTB |= (1 << Buzzer); // Activar el buzzer
 a22:	85 b1       	in	r24, 0x05	; 5
 a24:	80 61       	ori	r24, 0x10	; 16
 a26:	85 b9       	out	0x05, r24	; 5
 a28:	2f ef       	ldi	r18, 0xFF	; 255
 a2a:	83 e2       	ldi	r24, 0x23	; 35
 a2c:	94 ef       	ldi	r25, 0xF4	; 244
 a2e:	21 50       	subi	r18, 0x01	; 1
 a30:	80 40       	sbci	r24, 0x00	; 0
 a32:	90 40       	sbci	r25, 0x00	; 0
 a34:	e1 f7       	brne	.-8      	; 0xa2e <activar_Alarma+0xc>
 a36:	00 c0       	rjmp	.+0      	; 0xa38 <activar_Alarma+0x16>
 a38:	00 00       	nop
	_delay_ms(5000); // Sonar por 5 segundos
	PORTB &= ~(1 << Buzzer); // Desactivar el buzzer
 a3a:	85 b1       	in	r24, 0x05	; 5
 a3c:	8f 7e       	andi	r24, 0xEF	; 239
 a3e:	85 b9       	out	0x05, r24	; 5
 a40:	08 95       	ret

Disassembly of section .text.main:

00000178 <main>:
char pass[6];    
char new_password[6]; 
char password_ref[6] EEMEM = "1234";  // Contraseña por defecto en la EEPROM
int intentos = 0; 

int main(void) {
 178:	cf 93       	push	r28
 17a:	df 93       	push	r29
 17c:	cd b7       	in	r28, 0x3d	; 61
 17e:	de b7       	in	r29, 0x3e	; 62
 180:	61 97       	sbiw	r28, 0x11	; 17
 182:	0f b6       	in	r0, 0x3f	; 63
 184:	f8 94       	cli
 186:	de bf       	out	0x3e, r29	; 62
 188:	0f be       	out	0x3f, r0	; 63
 18a:	cd bf       	out	0x3d, r28	; 61
	init_Pins();
 18c:	0e 94 4c 05 	call	0xa98	; 0xa98 <init_Pins>
	init_LCD();
 190:	0e 94 40 03 	call	0x680	; 0x680 <init_LCD>
	
	char caracter = '\0';
 194:	19 82       	std	Y+1, r1	; 0x01
	int contador = 0;
	char Cadena1[16];
	char Cadena2[16];
	
	Bienvenida();
 196:	0e 94 3a 05 	call	0xa74	; 0xa74 <Bienvenida>
int main(void) {
	init_Pins();
	init_LCD();
	
	char caracter = '\0';
	int contador = 0;
 19a:	00 e0       	ldi	r16, 0x00	; 0
 19c:	10 e0       	ldi	r17, 0x00	; 0
	char Cadena2[16];
	
	Bienvenida();
	
	while (1) {
		if (state == 0) {                    // Bienvenida
 19e:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <state>
 1a2:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <state+0x1>
 1a6:	00 97       	sbiw	r24, 0x00	; 0
 1a8:	99 f4       	brne	.+38     	; 0x1d0 <main+0x58>
			Bienvenida();
 1aa:	0e 94 3a 05 	call	0xa74	; 0xa74 <Bienvenida>
			comprobar_Teclado(&state, &caracter);
 1ae:	be 01       	movw	r22, r28
 1b0:	6f 5f       	subi	r22, 0xFF	; 255
 1b2:	7f 4f       	sbci	r23, 0xFF	; 255
 1b4:	8e e2       	ldi	r24, 0x2E	; 46
 1b6:	91 e0       	ldi	r25, 0x01	; 1
 1b8:	0e 94 6e 02 	call	0x4dc	; 0x4dc <comprobar_Teclado>
 1bc:	2f ef       	ldi	r18, 0xFF	; 255
 1be:	89 e6       	ldi	r24, 0x69	; 105
 1c0:	98 e1       	ldi	r25, 0x18	; 24
 1c2:	21 50       	subi	r18, 0x01	; 1
 1c4:	80 40       	sbci	r24, 0x00	; 0
 1c6:	90 40       	sbci	r25, 0x00	; 0
 1c8:	e1 f7       	brne	.-8      	; 0x1c2 <main+0x4a>
 1ca:	00 c0       	rjmp	.+0      	; 0x1cc <main+0x54>
 1cc:	00 00       	nop
 1ce:	e7 cf       	rjmp	.-50     	; 0x19e <main+0x26>
			_delay_ms(500);
			
			} else if (state == 1) {             // Menu de opciones
 1d0:	81 30       	cpi	r24, 0x01	; 1
 1d2:	91 05       	cpc	r25, r1
 1d4:	c9 f4       	brne	.+50     	; 0x208 <main+0x90>
			Enviar_Mensaje("* : Abrir", "# : Cambiar PASS");
 1d6:	2d e1       	ldi	r18, 0x1D	; 29
 1d8:	31 e0       	ldi	r19, 0x01	; 1
 1da:	40 e0       	ldi	r20, 0x00	; 0
 1dc:	6e e2       	ldi	r22, 0x2E	; 46
 1de:	71 e0       	ldi	r23, 0x01	; 1
 1e0:	80 e0       	ldi	r24, 0x00	; 0
 1e2:	0e 94 9e 03 	call	0x73c	; 0x73c <Enviar_Mensaje>
			comprobar_Teclado(&state, &caracter);
 1e6:	be 01       	movw	r22, r28
 1e8:	6f 5f       	subi	r22, 0xFF	; 255
 1ea:	7f 4f       	sbci	r23, 0xFF	; 255
 1ec:	8e e2       	ldi	r24, 0x2E	; 46
 1ee:	91 e0       	ldi	r25, 0x01	; 1
 1f0:	0e 94 6e 02 	call	0x4dc	; 0x4dc <comprobar_Teclado>
 1f4:	2f ef       	ldi	r18, 0xFF	; 255
 1f6:	89 e6       	ldi	r24, 0x69	; 105
 1f8:	98 e1       	ldi	r25, 0x18	; 24
 1fa:	21 50       	subi	r18, 0x01	; 1
 1fc:	80 40       	sbci	r24, 0x00	; 0
 1fe:	90 40       	sbci	r25, 0x00	; 0
 200:	e1 f7       	brne	.-8      	; 0x1fa <main+0x82>
 202:	00 c0       	rjmp	.+0      	; 0x204 <main+0x8c>
 204:	00 00       	nop
 206:	cb cf       	rjmp	.-106    	; 0x19e <main+0x26>
			_delay_ms(500);
			
			} else if (state == 2) {             // Solicitar Contraseña para abrir
 208:	82 30       	cpi	r24, 0x02	; 2
 20a:	91 05       	cpc	r25, r1
 20c:	09 f0       	breq	.+2      	; 0x210 <main+0x98>
 20e:	94 c0       	rjmp	.+296    	; 0x338 <main+0x1c0>
			if(contador == 0){
 210:	01 15       	cp	r16, r1
 212:	11 05       	cpc	r17, r1
 214:	89 f4       	brne	.+34     	; 0x238 <main+0xc0>
				Enviar_Mensaje("Ingrese PASS", " ");
 216:	28 e3       	ldi	r18, 0x38	; 56
 218:	31 e0       	ldi	r19, 0x01	; 1
 21a:	40 e0       	ldi	r20, 0x00	; 0
 21c:	6a e3       	ldi	r22, 0x3A	; 58
 21e:	71 e0       	ldi	r23, 0x01	; 1
 220:	80 e0       	ldi	r24, 0x00	; 0
 222:	0e 94 9e 03 	call	0x73c	; 0x73c <Enviar_Mensaje>
 226:	2f ef       	ldi	r18, 0xFF	; 255
 228:	89 e6       	ldi	r24, 0x69	; 105
 22a:	98 e1       	ldi	r25, 0x18	; 24
 22c:	21 50       	subi	r18, 0x01	; 1
 22e:	80 40       	sbci	r24, 0x00	; 0
 230:	90 40       	sbci	r25, 0x00	; 0
 232:	e1 f7       	brne	.-8      	; 0x22c <main+0xb4>
 234:	00 c0       	rjmp	.+0      	; 0x236 <main+0xbe>
 236:	00 00       	nop
				_delay_ms(500);
			}
			comprobar_Teclado(&state, &caracter);
 238:	be 01       	movw	r22, r28
 23a:	6f 5f       	subi	r22, 0xFF	; 255
 23c:	7f 4f       	sbci	r23, 0xFF	; 255
 23e:	8e e2       	ldi	r24, 0x2E	; 46
 240:	91 e0       	ldi	r25, 0x01	; 1
 242:	0e 94 6e 02 	call	0x4dc	; 0x4dc <comprobar_Teclado>
			if(caracter != '\0' && contador < 6){ 
 246:	89 81       	ldd	r24, Y+1	; 0x01
 248:	88 23       	and	r24, r24
 24a:	d9 f0       	breq	.+54     	; 0x282 <main+0x10a>
 24c:	06 30       	cpi	r16, 0x06	; 6
 24e:	11 05       	cpc	r17, r1
 250:	c4 f4       	brge	.+48     	; 0x282 <main+0x10a>
				pass[contador] = caracter; 
 252:	f8 01       	movw	r30, r16
 254:	e0 50       	subi	r30, 0x00	; 0
 256:	ff 4f       	sbci	r31, 0xFF	; 255
 258:	80 83       	st	Z, r24
				Enviar_Mensaje(Cadena1, pass);
 25a:	20 e0       	ldi	r18, 0x00	; 0
 25c:	31 e0       	ldi	r19, 0x01	; 1
 25e:	40 e8       	ldi	r20, 0x80	; 128
 260:	be 01       	movw	r22, r28
 262:	6e 5f       	subi	r22, 0xFE	; 254
 264:	7f 4f       	sbci	r23, 0xFF	; 255
 266:	80 e8       	ldi	r24, 0x80	; 128
 268:	0e 94 9e 03 	call	0x73c	; 0x73c <Enviar_Mensaje>
 26c:	2f ef       	ldi	r18, 0xFF	; 255
 26e:	89 e6       	ldi	r24, 0x69	; 105
 270:	98 e1       	ldi	r25, 0x18	; 24
 272:	21 50       	subi	r18, 0x01	; 1
 274:	80 40       	sbci	r24, 0x00	; 0
 276:	90 40       	sbci	r25, 0x00	; 0
 278:	e1 f7       	brne	.-8      	; 0x272 <main+0xfa>
 27a:	00 c0       	rjmp	.+0      	; 0x27c <main+0x104>
 27c:	00 00       	nop
				_delay_ms(500);
				contador++;
 27e:	0f 5f       	subi	r16, 0xFF	; 255
 280:	1f 4f       	sbci	r17, 0xFF	; 255
			}
			if(contador == 4 || contador == 6){
 282:	04 30       	cpi	r16, 0x04	; 4
 284:	11 05       	cpc	r17, r1
 286:	21 f0       	breq	.+8      	; 0x290 <main+0x118>
 288:	06 30       	cpi	r16, 0x06	; 6
 28a:	11 05       	cpc	r17, r1
 28c:	09 f0       	breq	.+2      	; 0x290 <main+0x118>
 28e:	87 cf       	rjmp	.-242    	; 0x19e <main+0x26>
				pass[contador] = '\0';
 290:	f8 01       	movw	r30, r16
 292:	e0 50       	subi	r30, 0x00	; 0
 294:	ff 4f       	sbci	r31, 0xFF	; 255
 296:	10 82       	st	Z, r1
				if(verificar_Contrasena(pass)){
 298:	80 e0       	ldi	r24, 0x00	; 0
 29a:	91 e0       	ldi	r25, 0x01	; 1
 29c:	0e 94 1a 04 	call	0x834	; 0x834 <verificar_Contrasena>
 2a0:	89 2b       	or	r24, r25
 2a2:	b9 f0       	breq	.+46     	; 0x2d2 <main+0x15a>
					PORTB |= (1 << LED_Verde);
 2a4:	85 b1       	in	r24, 0x05	; 5
 2a6:	80 62       	ori	r24, 0x20	; 32
 2a8:	85 b9       	out	0x05, r24	; 5
					PORTB &= ~(1 << LED_Rojo);
 2aa:	85 b1       	in	r24, 0x05	; 5
 2ac:	8f 7e       	andi	r24, 0xEF	; 239
 2ae:	85 b9       	out	0x05, r24	; 5
					Enviar_Mensaje("Contraseña", "Correcta");
 2b0:	27 e4       	ldi	r18, 0x47	; 71
 2b2:	31 e0       	ldi	r19, 0x01	; 1
 2b4:	40 e0       	ldi	r20, 0x00	; 0
 2b6:	62 e0       	ldi	r22, 0x02	; 2
 2b8:	71 e0       	ldi	r23, 0x01	; 1
 2ba:	80 e0       	ldi	r24, 0x00	; 0
 2bc:	0e 94 9e 03 	call	0x73c	; 0x73c <Enviar_Mensaje>
					abrir_Cerradura();
 2c0:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <abrir_Cerradura>
					state = 0;
 2c4:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <state+0x1>
 2c8:	10 92 2e 01 	sts	0x012E, r1	; 0x80012e <state>
						activar_Alarma();
						intentos = 0; 
					}
					state = 0; 
				}
				contador = 0;
 2cc:	00 e0       	ldi	r16, 0x00	; 0
 2ce:	10 e0       	ldi	r17, 0x00	; 0
 2d0:	66 cf       	rjmp	.-308    	; 0x19e <main+0x26>
					PORTB &= ~(1 << LED_Rojo);
					Enviar_Mensaje("Contraseña", "Correcta");
					abrir_Cerradura();
					state = 0;
					} else {
					PORTB |= (1 << LED_Rojo);
 2d2:	85 b1       	in	r24, 0x05	; 5
 2d4:	80 61       	ori	r24, 0x10	; 16
 2d6:	85 b9       	out	0x05, r24	; 5
					Enviar_Mensaje("Contraseña", "Incorrecta");
 2d8:	20 e5       	ldi	r18, 0x50	; 80
 2da:	31 e0       	ldi	r19, 0x01	; 1
 2dc:	40 e0       	ldi	r20, 0x00	; 0
 2de:	62 e0       	ldi	r22, 0x02	; 2
 2e0:	71 e0       	ldi	r23, 0x01	; 1
 2e2:	80 e0       	ldi	r24, 0x00	; 0
 2e4:	0e 94 9e 03 	call	0x73c	; 0x73c <Enviar_Mensaje>
					intentos++;
 2e8:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <intentos>
 2ec:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <intentos+0x1>
 2f0:	01 96       	adiw	r24, 0x01	; 1
 2f2:	90 93 2d 01 	sts	0x012D, r25	; 0x80012d <intentos+0x1>
 2f6:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <intentos>
 2fa:	2f ef       	ldi	r18, 0xFF	; 255
 2fc:	83 ed       	ldi	r24, 0xD3	; 211
 2fe:	90 e3       	ldi	r25, 0x30	; 48
 300:	21 50       	subi	r18, 0x01	; 1
 302:	80 40       	sbci	r24, 0x00	; 0
 304:	90 40       	sbci	r25, 0x00	; 0
 306:	e1 f7       	brne	.-8      	; 0x300 <main+0x188>
 308:	00 c0       	rjmp	.+0      	; 0x30a <main+0x192>
 30a:	00 00       	nop
					_delay_ms(1000);
					PORTB &= ~(1 << LED_Rojo);
 30c:	85 b1       	in	r24, 0x05	; 5
 30e:	8f 7e       	andi	r24, 0xEF	; 239
 310:	85 b9       	out	0x05, r24	; 5
					if (intentos >= 3) {
 312:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <intentos>
 316:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <intentos+0x1>
 31a:	03 97       	sbiw	r24, 0x03	; 3
 31c:	34 f0       	brlt	.+12     	; 0x32a <main+0x1b2>
						activar_Alarma();
 31e:	0e 94 11 05 	call	0xa22	; 0xa22 <activar_Alarma>
						intentos = 0; 
 322:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <intentos+0x1>
 326:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <intentos>
					}
					state = 0; 
 32a:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <state+0x1>
 32e:	10 92 2e 01 	sts	0x012E, r1	; 0x80012e <state>
				}
				contador = 0;
 332:	00 e0       	ldi	r16, 0x00	; 0
 334:	10 e0       	ldi	r17, 0x00	; 0
 336:	33 cf       	rjmp	.-410    	; 0x19e <main+0x26>
			}
			} else if (state == 3){				 // Solicitar Contraseña para cambiar
 338:	83 30       	cpi	r24, 0x03	; 3
 33a:	91 05       	cpc	r25, r1
 33c:	09 f0       	breq	.+2      	; 0x340 <main+0x1c8>
 33e:	7c c0       	rjmp	.+248    	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
			if(contador == 0){
 340:	01 15       	cp	r16, r1
 342:	11 05       	cpc	r17, r1
 344:	89 f4       	brne	.+34     	; 0x368 <main+0x1f0>
				Enviar_Mensaje("Ingrese actual", "Contraseña");
 346:	22 e0       	ldi	r18, 0x02	; 2
 348:	31 e0       	ldi	r19, 0x01	; 1
 34a:	40 e0       	ldi	r20, 0x00	; 0
 34c:	6b e5       	ldi	r22, 0x5B	; 91
 34e:	71 e0       	ldi	r23, 0x01	; 1
 350:	80 e0       	ldi	r24, 0x00	; 0
 352:	0e 94 9e 03 	call	0x73c	; 0x73c <Enviar_Mensaje>
 356:	2f ef       	ldi	r18, 0xFF	; 255
 358:	89 e6       	ldi	r24, 0x69	; 105
 35a:	98 e1       	ldi	r25, 0x18	; 24
 35c:	21 50       	subi	r18, 0x01	; 1
 35e:	80 40       	sbci	r24, 0x00	; 0
 360:	90 40       	sbci	r25, 0x00	; 0
 362:	e1 f7       	brne	.-8      	; 0x35c <main+0x1e4>
 364:	00 c0       	rjmp	.+0      	; 0x366 <main+0x1ee>
 366:	00 00       	nop
				_delay_ms(500);
			}
			comprobar_Teclado(&state, &caracter);
 368:	be 01       	movw	r22, r28
 36a:	6f 5f       	subi	r22, 0xFF	; 255
 36c:	7f 4f       	sbci	r23, 0xFF	; 255
 36e:	8e e2       	ldi	r24, 0x2E	; 46
 370:	91 e0       	ldi	r25, 0x01	; 1
 372:	0e 94 6e 02 	call	0x4dc	; 0x4dc <comprobar_Teclado>
			if(caracter != '\0' && contador < 6){
 376:	89 81       	ldd	r24, Y+1	; 0x01
 378:	88 23       	and	r24, r24
 37a:	d9 f0       	breq	.+54     	; 0x3b2 <main+0x23a>
 37c:	06 30       	cpi	r16, 0x06	; 6
 37e:	11 05       	cpc	r17, r1
 380:	c4 f4       	brge	.+48     	; 0x3b2 <main+0x23a>
				pass[contador] = caracter; 
 382:	f8 01       	movw	r30, r16
 384:	e0 50       	subi	r30, 0x00	; 0
 386:	ff 4f       	sbci	r31, 0xFF	; 255
 388:	80 83       	st	Z, r24
				Enviar_Mensaje(Cadena1, pass);
 38a:	20 e0       	ldi	r18, 0x00	; 0
 38c:	31 e0       	ldi	r19, 0x01	; 1
 38e:	40 e8       	ldi	r20, 0x80	; 128
 390:	be 01       	movw	r22, r28
 392:	6e 5f       	subi	r22, 0xFE	; 254
 394:	7f 4f       	sbci	r23, 0xFF	; 255
 396:	80 e8       	ldi	r24, 0x80	; 128
 398:	0e 94 9e 03 	call	0x73c	; 0x73c <Enviar_Mensaje>
 39c:	2f ef       	ldi	r18, 0xFF	; 255
 39e:	89 e6       	ldi	r24, 0x69	; 105
 3a0:	98 e1       	ldi	r25, 0x18	; 24
 3a2:	21 50       	subi	r18, 0x01	; 1
 3a4:	80 40       	sbci	r24, 0x00	; 0
 3a6:	90 40       	sbci	r25, 0x00	; 0
 3a8:	e1 f7       	brne	.-8      	; 0x3a2 <main+0x22a>
 3aa:	00 c0       	rjmp	.+0      	; 0x3ac <main+0x234>
 3ac:	00 00       	nop
				_delay_ms(500);
				contador++;
 3ae:	0f 5f       	subi	r16, 0xFF	; 255
 3b0:	1f 4f       	sbci	r17, 0xFF	; 255
			}
			if(contador == 4 || contador == 6){ 
 3b2:	04 30       	cpi	r16, 0x04	; 4
 3b4:	11 05       	cpc	r17, r1
 3b6:	21 f0       	breq	.+8      	; 0x3c0 <main+0x248>
 3b8:	06 30       	cpi	r16, 0x06	; 6
 3ba:	11 05       	cpc	r17, r1
 3bc:	09 f0       	breq	.+2      	; 0x3c0 <main+0x248>
 3be:	ef ce       	rjmp	.-546    	; 0x19e <main+0x26>
				pass[contador] = '\0'; 
 3c0:	f8 01       	movw	r30, r16
 3c2:	e0 50       	subi	r30, 0x00	; 0
 3c4:	ff 4f       	sbci	r31, 0xFF	; 255
 3c6:	10 82       	st	Z, r1
				if(verificar_Contrasena(pass)){
 3c8:	80 e0       	ldi	r24, 0x00	; 0
 3ca:	91 e0       	ldi	r25, 0x01	; 1
 3cc:	0e 94 1a 04 	call	0x834	; 0x834 <verificar_Contrasena>
 3d0:	89 2b       	or	r24, r25
 3d2:	d1 f0       	breq	.+52     	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
					Enviar_Mensaje("Ingrese nueva", "Contraseña");
 3d4:	22 e0       	ldi	r18, 0x02	; 2
 3d6:	31 e0       	ldi	r19, 0x01	; 1
 3d8:	40 e0       	ldi	r20, 0x00	; 0
 3da:	6a e6       	ldi	r22, 0x6A	; 106
 3dc:	71 e0       	ldi	r23, 0x01	; 1
 3de:	80 e0       	ldi	r24, 0x00	; 0
 3e0:	0e 94 9e 03 	call	0x73c	; 0x73c <Enviar_Mensaje>
 3e4:	2f ef       	ldi	r18, 0xFF	; 255
 3e6:	89 e6       	ldi	r24, 0x69	; 105
 3e8:	98 e1       	ldi	r25, 0x18	; 24
 3ea:	21 50       	subi	r18, 0x01	; 1
 3ec:	80 40       	sbci	r24, 0x00	; 0
 3ee:	90 40       	sbci	r25, 0x00	; 0
 3f0:	e1 f7       	brne	.-8      	; 0x3ea <main+0x272>
 3f2:	00 c0       	rjmp	.+0      	; 0x3f4 <main+0x27c>
 3f4:	00 00       	nop
					_delay_ms(500);
					contador = 0; 
					state = 4; 
 3f6:	84 e0       	ldi	r24, 0x04	; 4
 3f8:	90 e0       	ldi	r25, 0x00	; 0
 3fa:	90 93 2f 01 	sts	0x012F, r25	; 0x80012f <state+0x1>
 3fe:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <state>
			if(contador == 4 || contador == 6){ 
				pass[contador] = '\0'; 
				if(verificar_Contrasena(pass)){
					Enviar_Mensaje("Ingrese nueva", "Contraseña");
					_delay_ms(500);
					contador = 0; 
 402:	00 e0       	ldi	r16, 0x00	; 0
 404:	10 e0       	ldi	r17, 0x00	; 0
 406:	cb ce       	rjmp	.-618    	; 0x19e <main+0x26>
					state = 4; 
					} else {
					Enviar_Mensaje("Contraseña", "Incorrecta");
 408:	20 e5       	ldi	r18, 0x50	; 80
 40a:	31 e0       	ldi	r19, 0x01	; 1
 40c:	40 e0       	ldi	r20, 0x00	; 0
 40e:	62 e0       	ldi	r22, 0x02	; 2
 410:	71 e0       	ldi	r23, 0x01	; 1
 412:	80 e0       	ldi	r24, 0x00	; 0
 414:	0e 94 9e 03 	call	0x73c	; 0x73c <Enviar_Mensaje>
 418:	2f ef       	ldi	r18, 0xFF	; 255
 41a:	83 ed       	ldi	r24, 0xD3	; 211
 41c:	90 e3       	ldi	r25, 0x30	; 48
 41e:	21 50       	subi	r18, 0x01	; 1
 420:	80 40       	sbci	r24, 0x00	; 0
 422:	90 40       	sbci	r25, 0x00	; 0
 424:	e1 f7       	brne	.-8      	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
 426:	00 c0       	rjmp	.+0      	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
 428:	00 00       	nop
					_delay_ms(1000);
					state = 0; 
 42a:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <state+0x1>
 42e:	10 92 2e 01 	sts	0x012E, r1	; 0x80012e <state>
					contador = 0; 
 432:	00 e0       	ldi	r16, 0x00	; 0
 434:	10 e0       	ldi	r17, 0x00	; 0
 436:	b3 ce       	rjmp	.-666    	; 0x19e <main+0x26>
				}
			}
			} else if (state == 4) { // Ingreso de nueva contraseña
 438:	04 97       	sbiw	r24, 0x04	; 4
 43a:	09 f0       	breq	.+2      	; 0x43e <__EEPROM_REGION_LENGTH__+0x3e>
 43c:	b0 ce       	rjmp	.-672    	; 0x19e <main+0x26>
			if(contador == 0){
 43e:	01 15       	cp	r16, r1
 440:	11 05       	cpc	r17, r1
 442:	89 f4       	brne	.+34     	; 0x466 <__EEPROM_REGION_LENGTH__+0x66>
				Enviar_Mensaje("Ingrese nueva", "Contraseña");
 444:	22 e0       	ldi	r18, 0x02	; 2
 446:	31 e0       	ldi	r19, 0x01	; 1
 448:	40 e0       	ldi	r20, 0x00	; 0
 44a:	6a e6       	ldi	r22, 0x6A	; 106
 44c:	71 e0       	ldi	r23, 0x01	; 1
 44e:	80 e0       	ldi	r24, 0x00	; 0
 450:	0e 94 9e 03 	call	0x73c	; 0x73c <Enviar_Mensaje>
 454:	2f ef       	ldi	r18, 0xFF	; 255
 456:	89 e6       	ldi	r24, 0x69	; 105
 458:	98 e1       	ldi	r25, 0x18	; 24
 45a:	21 50       	subi	r18, 0x01	; 1
 45c:	80 40       	sbci	r24, 0x00	; 0
 45e:	90 40       	sbci	r25, 0x00	; 0
 460:	e1 f7       	brne	.-8      	; 0x45a <__EEPROM_REGION_LENGTH__+0x5a>
 462:	00 c0       	rjmp	.+0      	; 0x464 <__EEPROM_REGION_LENGTH__+0x64>
 464:	00 00       	nop
				_delay_ms(500);
			}
			comprobar_Teclado(&state, &caracter);
 466:	be 01       	movw	r22, r28
 468:	6f 5f       	subi	r22, 0xFF	; 255
 46a:	7f 4f       	sbci	r23, 0xFF	; 255
 46c:	8e e2       	ldi	r24, 0x2E	; 46
 46e:	91 e0       	ldi	r25, 0x01	; 1
 470:	0e 94 6e 02 	call	0x4dc	; 0x4dc <comprobar_Teclado>
			if(caracter != '\0' && contador < 6){
 474:	89 81       	ldd	r24, Y+1	; 0x01
 476:	88 23       	and	r24, r24
 478:	d9 f0       	breq	.+54     	; 0x4b0 <__EEPROM_REGION_LENGTH__+0xb0>
 47a:	06 30       	cpi	r16, 0x06	; 6
 47c:	11 05       	cpc	r17, r1
 47e:	c4 f4       	brge	.+48     	; 0x4b0 <__EEPROM_REGION_LENGTH__+0xb0>
				new_password[contador] = caracter; 
 480:	f8 01       	movw	r30, r16
 482:	ea 5f       	subi	r30, 0xFA	; 250
 484:	fe 4f       	sbci	r31, 0xFE	; 254
 486:	80 83       	st	Z, r24
				Enviar_Mensaje(Cadena1, new_password);
 488:	26 e0       	ldi	r18, 0x06	; 6
 48a:	31 e0       	ldi	r19, 0x01	; 1
 48c:	40 e8       	ldi	r20, 0x80	; 128
 48e:	be 01       	movw	r22, r28
 490:	6e 5f       	subi	r22, 0xFE	; 254
 492:	7f 4f       	sbci	r23, 0xFF	; 255
 494:	80 e8       	ldi	r24, 0x80	; 128
 496:	0e 94 9e 03 	call	0x73c	; 0x73c <Enviar_Mensaje>
 49a:	2f ef       	ldi	r18, 0xFF	; 255
 49c:	89 e6       	ldi	r24, 0x69	; 105
 49e:	98 e1       	ldi	r25, 0x18	; 24
 4a0:	21 50       	subi	r18, 0x01	; 1
 4a2:	80 40       	sbci	r24, 0x00	; 0
 4a4:	90 40       	sbci	r25, 0x00	; 0
 4a6:	e1 f7       	brne	.-8      	; 0x4a0 <__EEPROM_REGION_LENGTH__+0xa0>
 4a8:	00 c0       	rjmp	.+0      	; 0x4aa <__EEPROM_REGION_LENGTH__+0xaa>
 4aa:	00 00       	nop
				_delay_ms(500);
				contador++;
 4ac:	0f 5f       	subi	r16, 0xFF	; 255
 4ae:	1f 4f       	sbci	r17, 0xFF	; 255
			}
			if(contador == 4 || contador == 6){ 
 4b0:	04 30       	cpi	r16, 0x04	; 4
 4b2:	11 05       	cpc	r17, r1
 4b4:	21 f0       	breq	.+8      	; 0x4be <__EEPROM_REGION_LENGTH__+0xbe>
 4b6:	06 30       	cpi	r16, 0x06	; 6
 4b8:	11 05       	cpc	r17, r1
 4ba:	09 f0       	breq	.+2      	; 0x4be <__EEPROM_REGION_LENGTH__+0xbe>
 4bc:	70 ce       	rjmp	.-800    	; 0x19e <main+0x26>
				new_password[contador] = '\0'; 
 4be:	f8 01       	movw	r30, r16
 4c0:	ea 5f       	subi	r30, 0xFA	; 250
 4c2:	fe 4f       	sbci	r31, 0xFE	; 254
 4c4:	10 82       	st	Z, r1
				cambiar_Contrasena(new_password);
 4c6:	86 e0       	ldi	r24, 0x06	; 6
 4c8:	91 e0       	ldi	r25, 0x01	; 1
 4ca:	0e 94 e5 03 	call	0x7ca	; 0x7ca <cambiar_Contrasena>
				state = 0; 
 4ce:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <state+0x1>
 4d2:	10 92 2e 01 	sts	0x012E, r1	; 0x80012e <state>
				contador = 0; 
 4d6:	00 e0       	ldi	r16, 0x00	; 0
 4d8:	10 e0       	ldi	r17, 0x00	; 0
 4da:	61 ce       	rjmp	.-830    	; 0x19e <main+0x26>

Disassembly of section .text.__dummy_fini:

00000aba <_fini>:
 aba:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

00000abc <__funcs_on_exit>:
 abc:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

00000abe <__simulator_exit>:
 abe:	08 95       	ret

Disassembly of section .text.exit:

00000a5e <exit>:
 a5e:	ec 01       	movw	r28, r24
 a60:	0e 94 5e 05 	call	0xabc	; 0xabc <__funcs_on_exit>
 a64:	0e 94 5d 05 	call	0xaba	; 0xaba <_fini>
 a68:	ce 01       	movw	r24, r28
 a6a:	0e 94 5f 05 	call	0xabe	; 0xabe <__simulator_exit>
 a6e:	ce 01       	movw	r24, r28
 a70:	0e 94 5b 05 	call	0xab6	; 0xab6 <_Exit>

Disassembly of section .text.strcmp:

0000092a <strcmp>:
 92a:	cf 92       	push	r12
 92c:	df 92       	push	r13
 92e:	ef 92       	push	r14
 930:	6b 01       	movw	r12, r22
 932:	e8 2e       	mov	r14, r24
 934:	f6 01       	movw	r30, r12
 936:	84 91       	lpm	r24, Z
 938:	e7 fc       	sbrc	r14, 7
 93a:	80 81       	ld	r24, Z
 93c:	f9 01       	movw	r30, r18
 93e:	54 91       	lpm	r21, Z
 940:	47 fd       	sbrc	r20, 7
 942:	50 81       	ld	r21, Z
 944:	85 13       	cpse	r24, r21
 946:	0b c0       	rjmp	.+22     	; 0x95e <strcmp+0x34>
 948:	88 23       	and	r24, r24
 94a:	41 f0       	breq	.+16     	; 0x95c <strcmp+0x32>
 94c:	8f ef       	ldi	r24, 0xFF	; 255
 94e:	c8 1a       	sub	r12, r24
 950:	d8 0a       	sbc	r13, r24
 952:	e8 0a       	sbc	r14, r24
 954:	2f 5f       	subi	r18, 0xFF	; 255
 956:	3f 4f       	sbci	r19, 0xFF	; 255
 958:	4f 4f       	sbci	r20, 0xFF	; 255
 95a:	ec cf       	rjmp	.-40     	; 0x934 <strcmp+0xa>
 95c:	58 2f       	mov	r21, r24
 95e:	90 e0       	ldi	r25, 0x00	; 0
 960:	85 1b       	sub	r24, r21
 962:	91 09       	sbc	r25, r1
 964:	ef 90       	pop	r14
 966:	df 90       	pop	r13
 968:	cf 90       	pop	r12
 96a:	08 95       	ret

Disassembly of section .text.strlen:

000009d2 <strlen>:
 9d2:	cf 92       	push	r12
 9d4:	df 92       	push	r13
 9d6:	ef 92       	push	r14
 9d8:	6b 01       	movw	r12, r22
 9da:	e8 2e       	mov	r14, r24
 9dc:	a8 2f       	mov	r26, r24
 9de:	cb 01       	movw	r24, r22
 9e0:	fc 01       	movw	r30, r24
 9e2:	24 91       	lpm	r18, Z
 9e4:	a7 fd       	sbrc	r26, 7
 9e6:	20 81       	ld	r18, Z
 9e8:	22 23       	and	r18, r18
 9ea:	19 f0       	breq	.+6      	; 0x9f2 <strlen+0x20>
 9ec:	01 96       	adiw	r24, 0x01	; 1
 9ee:	a1 1d       	adc	r26, r1
 9f0:	f7 cf       	rjmp	.-18     	; 0x9e0 <strlen+0xe>
 9f2:	8c 19       	sub	r24, r12
 9f4:	9d 09       	sbc	r25, r13
 9f6:	ef 90       	pop	r14
 9f8:	df 90       	pop	r13
 9fa:	cf 90       	pop	r12
 9fc:	08 95       	ret

Disassembly of section .text._Exit:

00000ab6 <_Exit>:
 ab6:	0e 94 65 00 	call	0xca	; 0xca <_exit>

Disassembly of section .text.avrlibc:

000009fe <eeprom_read_block>:
 9fe:	ba 01       	movw	r22, r20
 a00:	a9 01       	movw	r20, r18
 a02:	dc 01       	movw	r26, r24
 a04:	cb 01       	movw	r24, r22

00000a06 <eeprom_read_blraw>:
 a06:	fc 01       	movw	r30, r24
 a08:	f9 99       	sbic	0x1f, 1	; 31
 a0a:	fe cf       	rjmp	.-4      	; 0xa08 <eeprom_read_blraw+0x2>
 a0c:	06 c0       	rjmp	.+12     	; 0xa1a <eeprom_read_blraw+0x14>
 a0e:	f2 bd       	out	0x22, r31	; 34
 a10:	e1 bd       	out	0x21, r30	; 33
 a12:	f8 9a       	sbi	0x1f, 0	; 31
 a14:	31 96       	adiw	r30, 0x01	; 1
 a16:	00 b4       	in	r0, 0x20	; 32
 a18:	0d 92       	st	X+, r0
 a1a:	41 50       	subi	r20, 0x01	; 1
 a1c:	50 40       	sbci	r21, 0x00	; 0
 a1e:	b8 f7       	brcc	.-18     	; 0xa0e <eeprom_read_blraw+0x8>
 a20:	08 95       	ret

Disassembly of section .text.avrlibc:

0000096c <eeprom_write_block>:
 96c:	cf 92       	push	r12
 96e:	df 92       	push	r13
 970:	ef 92       	push	r14
 972:	6b 01       	movw	r12, r22
 974:	e8 2e       	mov	r14, r24
 976:	ca 01       	movw	r24, r20
 978:	42 2f       	mov	r20, r18
 97a:	73 2f       	mov	r23, r19
 97c:	0b c0       	rjmp	.+22     	; 0x994 <eeprom_write_block+0x28>
 97e:	f6 01       	movw	r30, r12
 980:	5e 2d       	mov	r21, r14
 982:	0e 94 54 05 	call	0xaa8	; 0xaa8 <__xload_1>
 986:	26 2f       	mov	r18, r22
 988:	0e 94 22 05 	call	0xa44	; 0xa44 <eeprom_write_r18>
 98c:	3f ef       	ldi	r19, 0xFF	; 255
 98e:	c3 1a       	sub	r12, r19
 990:	d3 0a       	sbc	r13, r19
 992:	e3 0a       	sbc	r14, r19
 994:	41 50       	subi	r20, 0x01	; 1
 996:	70 40       	sbci	r23, 0x00	; 0
 998:	90 f7       	brcc	.-28     	; 0x97e <eeprom_write_block+0x12>
 99a:	ef 90       	pop	r14
 99c:	df 90       	pop	r13
 99e:	cf 90       	pop	r12
 9a0:	08 95       	ret

Disassembly of section .text.avrlibc:

00000a42 <eeprom_write_byte>:
 a42:	26 2f       	mov	r18, r22

00000a44 <eeprom_write_r18>:
 a44:	f9 99       	sbic	0x1f, 1	; 31
 a46:	fe cf       	rjmp	.-4      	; 0xa44 <eeprom_write_r18>
 a48:	1f ba       	out	0x1f, r1	; 31
 a4a:	92 bd       	out	0x22, r25	; 34
 a4c:	81 bd       	out	0x21, r24	; 33
 a4e:	20 bd       	out	0x20, r18	; 32
 a50:	0f b6       	in	r0, 0x3f	; 63
 a52:	f8 94       	cli
 a54:	fa 9a       	sbi	0x1f, 2	; 31
 a56:	f9 9a       	sbi	0x1f, 1	; 31
 a58:	0f be       	out	0x3f, r0	; 63
 a5a:	01 96       	adiw	r24, 0x01	; 1
 a5c:	08 95       	ret

Disassembly of section .text.libgcc:

00000aa8 <__xload_1>:
 aa8:	57 fd       	sbrc	r21, 7
 aaa:	60 81       	ld	r22, Z
 aac:	57 ff       	sbrs	r21, 7
 aae:	64 91       	lpm	r22, Z
 ab0:	08 95       	ret
