
Cerradura.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000c84  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000ce  00000000  00000000  00000114  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000e  00800100  00800100  00000c80  2**0
                  ALLOC
  3 .eeprom       00000004  00810000  00810000  00000c80  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      0000002f  00000000  00000000  00000c84  2**0
                  CONTENTS, READONLY
  5 .stack.descriptors.hdr 00000046  00000000  00000000  00000cb3  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000000e0  00000000  00000000  00000d00  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001b68  00000000  00000000  00000de0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000091b  00000000  00000000  00002948  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000b12  00000000  00000000  00003263  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  0000017c  00000000  00000000  00003d78  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000272  00000000  00000000  00003ef4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000d54  00000000  00000000  00004166  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000088  00000000  00000000  00004eba  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .text         00000004  00000b3e  00000b3e  00000c52  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00004f44  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .text.LCD_cmd 0000004a  00000922  00000922  00000a36  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.init_LCD 000000bc  00000712  00000712  00000826  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.init_Pins 00000010  00000b24  00000b24  00000c38  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.LCD_write 0000004a  0000096c  0000096c  00000a80  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .rodata       00000020  0080010e  00000b4c  00000c60  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 21 .text.comprobar_Teclado 000001aa  00000568  00000568  0000067c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.Enviar_Mensaje 0000008e  000007ce  000007ce  000008e2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .progmemx.data 000000ad  000000ce  000000ce  000001e2  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 24 .text.Bienvenida 00000012  00000b00  00000b00  00000c14  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text.almacenar_Contrasena 00000012  00000b12  00000b12  00000c26  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .text.verificar_Contrasena 0000005c  000008c6  000008c6  000009da  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .text.abrir_Cerradura 00000030  00000a2e  00000a2e  00000b42  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .text.cambiar_Contrasena 0000006a  0000085c  0000085c  00000970  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .text.activar_Alarma 00000020  00000aae  00000aae  00000bc2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .text.main    000003ec  0000017c  0000017c  00000290  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 31 .bss.intentos 00000002  0080012e  0080012e  00000c80  2**0
                  ALLOC
 32 .bss.state    00000002  00800130  00800130  00000c80  2**0
                  ALLOC
 33 .text.__dummy_fini 00000002  00000b46  00000b46  00000c5a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 34 .text.__dummy_funcs_on_exit 00000002  00000b48  00000b48  00000c5c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 35 .text.__dummy_simulator_exit 00000002  00000b4a  00000b4a  00000c5e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 36 .text.exit    00000016  00000aea  00000aea  00000bfe  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 37 .text.strcmp  00000042  000009b6  000009b6  00000aca  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 38 .text.strlen  0000002c  00000a5e  00000a5e  00000b72  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 39 .text._Exit   00000004  00000b42  00000b42  00000c56  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 40 .text.avrlibc 00000024  00000a8a  00000a8a  00000b9e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 41 .text.avrlibc 00000036  000009f8  000009f8  00000b0c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 42 .text.avrlibc 0000001c  00000ace  00000ace  00000be2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 43 .text.libgcc  0000000a  00000b34  00000b34  00000c48  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3d 00 	jmp	0x7a	; 0x7a <__ctors_end>
   4:	0c 94 9f 05 	jmp	0xb3e	; 0xb3e <__bad_interrupt>
   8:	0c 94 9f 05 	jmp	0xb3e	; 0xb3e <__bad_interrupt>
   c:	0c 94 9f 05 	jmp	0xb3e	; 0xb3e <__bad_interrupt>
  10:	0c 94 9f 05 	jmp	0xb3e	; 0xb3e <__bad_interrupt>
  14:	0c 94 9f 05 	jmp	0xb3e	; 0xb3e <__bad_interrupt>
  18:	0c 94 9f 05 	jmp	0xb3e	; 0xb3e <__bad_interrupt>
  1c:	0c 94 9f 05 	jmp	0xb3e	; 0xb3e <__bad_interrupt>
  20:	0c 94 9f 05 	jmp	0xb3e	; 0xb3e <__bad_interrupt>
  24:	0c 94 9f 05 	jmp	0xb3e	; 0xb3e <__bad_interrupt>
  28:	0c 94 9f 05 	jmp	0xb3e	; 0xb3e <__bad_interrupt>
  2c:	0c 94 9f 05 	jmp	0xb3e	; 0xb3e <__bad_interrupt>
  30:	0c 94 9f 05 	jmp	0xb3e	; 0xb3e <__bad_interrupt>
  34:	0c 94 9f 05 	jmp	0xb3e	; 0xb3e <__bad_interrupt>
  38:	0c 94 9f 05 	jmp	0xb3e	; 0xb3e <__bad_interrupt>
  3c:	0c 94 9f 05 	jmp	0xb3e	; 0xb3e <__bad_interrupt>
  40:	0c 94 9f 05 	jmp	0xb3e	; 0xb3e <__bad_interrupt>
  44:	0c 94 9f 05 	jmp	0xb3e	; 0xb3e <__bad_interrupt>
  48:	0c 94 9f 05 	jmp	0xb3e	; 0xb3e <__bad_interrupt>
  4c:	0c 94 9f 05 	jmp	0xb3e	; 0xb3e <__bad_interrupt>
  50:	0c 94 9f 05 	jmp	0xb3e	; 0xb3e <__bad_interrupt>
  54:	0c 94 9f 05 	jmp	0xb3e	; 0xb3e <__bad_interrupt>
  58:	0c 94 9f 05 	jmp	0xb3e	; 0xb3e <__bad_interrupt>
  5c:	0c 94 9f 05 	jmp	0xb3e	; 0xb3e <__bad_interrupt>
  60:	0c 94 9f 05 	jmp	0xb3e	; 0xb3e <__bad_interrupt>
  64:	0c 94 9f 05 	jmp	0xb3e	; 0xb3e <__bad_interrupt>

00000068 <.dinit>:
  68:	01 00       	.word	0x0001	; ????
  6a:	01 0e       	add	r0, r17
  6c:	80 01       	movw	r16, r0
  6e:	0e 01       	movw	r0, r28
  70:	2e 00       	.word	0x002e	; ????
  72:	0b 4c       	sbci	r16, 0xCB	; 203
  74:	01 2e       	mov	r0, r17
  76:	01 32       	cpi	r16, 0x21	; 33
  78:	80 00       	.word	0x0080	; ????

0000007a <__ctors_end>:
  7a:	11 24       	eor	r1, r1
  7c:	1f be       	out	0x3f, r1	; 63
  7e:	cf ef       	ldi	r28, 0xFF	; 255
  80:	d8 e0       	ldi	r29, 0x08	; 8
  82:	de bf       	out	0x3e, r29	; 62
  84:	cd bf       	out	0x3d, r28	; 61

00000086 <__do_copy_data>:
  86:	e8 e6       	ldi	r30, 0x68	; 104
  88:	f0 e0       	ldi	r31, 0x00	; 0
  8a:	40 e0       	ldi	r20, 0x00	; 0
  8c:	17 c0       	rjmp	.+46     	; 0xbc <__do_clear_bss+0x8>
  8e:	b5 91       	lpm	r27, Z+
  90:	a5 91       	lpm	r26, Z+
  92:	35 91       	lpm	r19, Z+
  94:	25 91       	lpm	r18, Z+
  96:	05 91       	lpm	r16, Z+
  98:	07 fd       	sbrc	r16, 7
  9a:	0c c0       	rjmp	.+24     	; 0xb4 <__do_clear_bss>
  9c:	95 91       	lpm	r25, Z+
  9e:	85 91       	lpm	r24, Z+
  a0:	ef 01       	movw	r28, r30
  a2:	f9 2f       	mov	r31, r25
  a4:	e8 2f       	mov	r30, r24
  a6:	05 90       	lpm	r0, Z+
  a8:	0d 92       	st	X+, r0
  aa:	a2 17       	cp	r26, r18
  ac:	b3 07       	cpc	r27, r19
  ae:	d9 f7       	brne	.-10     	; 0xa6 <__do_copy_data+0x20>
  b0:	fe 01       	movw	r30, r28
  b2:	04 c0       	rjmp	.+8      	; 0xbc <__do_clear_bss+0x8>

000000b4 <__do_clear_bss>:
  b4:	1d 92       	st	X+, r1
  b6:	a2 17       	cp	r26, r18
  b8:	b3 07       	cpc	r27, r19
  ba:	e1 f7       	brne	.-8      	; 0xb4 <__do_clear_bss>
  bc:	e9 37       	cpi	r30, 0x79	; 121
  be:	f4 07       	cpc	r31, r20
  c0:	31 f7       	brne	.-52     	; 0x8e <__do_copy_data+0x8>
  c2:	0e 94 be 00 	call	0x17c	; 0x17c <main>
  c6:	0c 94 75 05 	jmp	0xaea	; 0xaea <exit>

000000ca <_exit>:
  ca:	f8 94       	cli

000000cc <__stop_program>:
  cc:	ff cf       	rjmp	.-2      	; 0xcc <__stop_program>

Disassembly of section .text:

00000b3e <__bad_interrupt>:
 b3e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

Disassembly of section .text.LCD_cmd:

00000922 <LCD_cmd>:
		}
	}
}

void LCD_cmd(char cmd) {
	PORTB = (cmd >> 4) & 0x0F; // Enviar los 4 bits más significativos
 922:	98 2f       	mov	r25, r24
 924:	92 95       	swap	r25
 926:	9f 70       	andi	r25, 0x0F	; 15
 928:	95 b9       	out	0x05, r25	; 5
	PORTD &= ~(1 << RS);
 92a:	9b b1       	in	r25, 0x0b	; 11
 92c:	9f 7d       	andi	r25, 0xDF	; 223
 92e:	9b b9       	out	0x0b, r25	; 11
	PORTD &= ~(1 << RW);
 930:	9b b1       	in	r25, 0x0b	; 11
 932:	9f 7b       	andi	r25, 0xBF	; 191
 934:	9b b9       	out	0x0b, r25	; 11
	PORTD |= (1 << Enable);
 936:	9b b1       	in	r25, 0x0b	; 11
 938:	90 68       	ori	r25, 0x80	; 128
 93a:	9b b9       	out	0x0b, r25	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 93c:	ef e9       	ldi	r30, 0x9F	; 159
 93e:	ff e0       	ldi	r31, 0x0F	; 15
 940:	31 97       	sbiw	r30, 0x01	; 1
 942:	f1 f7       	brne	.-4      	; 0x940 <LCD_cmd+0x1e>
 944:	00 c0       	rjmp	.+0      	; 0x946 <LCD_cmd+0x24>
 946:	00 00       	nop
	_delay_ms(1);
	PORTD &= ~(1 << Enable);
 948:	9b b1       	in	r25, 0x0b	; 11
 94a:	9f 77       	andi	r25, 0x7F	; 127
 94c:	9b b9       	out	0x0b, r25	; 11

	PORTB = cmd & 0x0F; // Enviar los 4 bits menos significativos
 94e:	8f 70       	andi	r24, 0x0F	; 15
 950:	85 b9       	out	0x05, r24	; 5
	PORTD |= (1 << Enable);
 952:	8b b1       	in	r24, 0x0b	; 11
 954:	80 68       	ori	r24, 0x80	; 128
 956:	8b b9       	out	0x0b, r24	; 11
 958:	8f e9       	ldi	r24, 0x9F	; 159
 95a:	9f e0       	ldi	r25, 0x0F	; 15
 95c:	01 97       	sbiw	r24, 0x01	; 1
 95e:	f1 f7       	brne	.-4      	; 0x95c <LCD_cmd+0x3a>
 960:	00 c0       	rjmp	.+0      	; 0x962 <LCD_cmd+0x40>
 962:	00 00       	nop
	_delay_ms(1);
	PORTD &= ~(1 << Enable);
 964:	8b b1       	in	r24, 0x0b	; 11
 966:	8f 77       	andi	r24, 0x7F	; 127
 968:	8b b9       	out	0x0b, r24	; 11
 96a:	08 95       	ret

Disassembly of section .text.init_LCD:

00000712 <init_LCD>:
 712:	2f ef       	ldi	r18, 0xFF	; 255
 714:	80 e7       	ldi	r24, 0x70	; 112
 716:	92 e0       	ldi	r25, 0x02	; 2
 718:	21 50       	subi	r18, 0x01	; 1
 71a:	80 40       	sbci	r24, 0x00	; 0
 71c:	90 40       	sbci	r25, 0x00	; 0
 71e:	e1 f7       	brne	.-8      	; 0x718 <init_LCD+0x6>
 720:	00 c0       	rjmp	.+0      	; 0x722 <init_LCD+0x10>
 722:	00 00       	nop
}

void init_LCD() {
	_delay_ms(50);
	LCD_cmd(0x33);  
 724:	83 e3       	ldi	r24, 0x33	; 51
 726:	0e 94 91 04 	call	0x922	; 0x922 <LCD_cmd>
 72a:	2f ef       	ldi	r18, 0xFF	; 255
 72c:	80 e7       	ldi	r24, 0x70	; 112
 72e:	92 e0       	ldi	r25, 0x02	; 2
 730:	21 50       	subi	r18, 0x01	; 1
 732:	80 40       	sbci	r24, 0x00	; 0
 734:	90 40       	sbci	r25, 0x00	; 0
 736:	e1 f7       	brne	.-8      	; 0x730 <init_LCD+0x1e>
 738:	00 c0       	rjmp	.+0      	; 0x73a <init_LCD+0x28>
 73a:	00 00       	nop
	_delay_ms(50);
	LCD_cmd(0x32);  
 73c:	82 e3       	ldi	r24, 0x32	; 50
 73e:	0e 94 91 04 	call	0x922	; 0x922 <LCD_cmd>
 742:	2f ef       	ldi	r18, 0xFF	; 255
 744:	80 e7       	ldi	r24, 0x70	; 112
 746:	92 e0       	ldi	r25, 0x02	; 2
 748:	21 50       	subi	r18, 0x01	; 1
 74a:	80 40       	sbci	r24, 0x00	; 0
 74c:	90 40       	sbci	r25, 0x00	; 0
 74e:	e1 f7       	brne	.-8      	; 0x748 <init_LCD+0x36>
 750:	00 c0       	rjmp	.+0      	; 0x752 <init_LCD+0x40>
 752:	00 00       	nop
	_delay_ms(50);
	LCD_cmd(0x28);  // Inicializar en 4 bit
 754:	88 e2       	ldi	r24, 0x28	; 40
 756:	0e 94 91 04 	call	0x922	; 0x922 <LCD_cmd>
 75a:	2f ef       	ldi	r18, 0xFF	; 255
 75c:	80 e7       	ldi	r24, 0x70	; 112
 75e:	92 e0       	ldi	r25, 0x02	; 2
 760:	21 50       	subi	r18, 0x01	; 1
 762:	80 40       	sbci	r24, 0x00	; 0
 764:	90 40       	sbci	r25, 0x00	; 0
 766:	e1 f7       	brne	.-8      	; 0x760 <init_LCD+0x4e>
 768:	00 c0       	rjmp	.+0      	; 0x76a <init_LCD+0x58>
 76a:	00 00       	nop
	_delay_ms(50);
	LCD_cmd(0x0C); 
 76c:	8c e0       	ldi	r24, 0x0C	; 12
 76e:	0e 94 91 04 	call	0x922	; 0x922 <LCD_cmd>
 772:	2f ef       	ldi	r18, 0xFF	; 255
 774:	80 e7       	ldi	r24, 0x70	; 112
 776:	92 e0       	ldi	r25, 0x02	; 2
 778:	21 50       	subi	r18, 0x01	; 1
 77a:	80 40       	sbci	r24, 0x00	; 0
 77c:	90 40       	sbci	r25, 0x00	; 0
 77e:	e1 f7       	brne	.-8      	; 0x778 <init_LCD+0x66>
 780:	00 c0       	rjmp	.+0      	; 0x782 <init_LCD+0x70>
 782:	00 00       	nop
	_delay_ms(50);
	LCD_cmd(0x06);  
 784:	86 e0       	ldi	r24, 0x06	; 6
 786:	0e 94 91 04 	call	0x922	; 0x922 <LCD_cmd>
 78a:	2f ef       	ldi	r18, 0xFF	; 255
 78c:	80 e7       	ldi	r24, 0x70	; 112
 78e:	92 e0       	ldi	r25, 0x02	; 2
 790:	21 50       	subi	r18, 0x01	; 1
 792:	80 40       	sbci	r24, 0x00	; 0
 794:	90 40       	sbci	r25, 0x00	; 0
 796:	e1 f7       	brne	.-8      	; 0x790 <init_LCD+0x7e>
 798:	00 c0       	rjmp	.+0      	; 0x79a <init_LCD+0x88>
 79a:	00 00       	nop
	_delay_ms(50);
	LCD_cmd(0x01);  
 79c:	81 e0       	ldi	r24, 0x01	; 1
 79e:	0e 94 91 04 	call	0x922	; 0x922 <LCD_cmd>
 7a2:	2f ef       	ldi	r18, 0xFF	; 255
 7a4:	80 e7       	ldi	r24, 0x70	; 112
 7a6:	92 e0       	ldi	r25, 0x02	; 2
 7a8:	21 50       	subi	r18, 0x01	; 1
 7aa:	80 40       	sbci	r24, 0x00	; 0
 7ac:	90 40       	sbci	r25, 0x00	; 0
 7ae:	e1 f7       	brne	.-8      	; 0x7a8 <init_LCD+0x96>
 7b0:	00 c0       	rjmp	.+0      	; 0x7b2 <init_LCD+0xa0>
 7b2:	00 00       	nop
	_delay_ms(50);
	LCD_cmd(0x80); 
 7b4:	80 e8       	ldi	r24, 0x80	; 128
 7b6:	0e 94 91 04 	call	0x922	; 0x922 <LCD_cmd>
 7ba:	2f ef       	ldi	r18, 0xFF	; 255
 7bc:	80 e7       	ldi	r24, 0x70	; 112
 7be:	92 e0       	ldi	r25, 0x02	; 2
 7c0:	21 50       	subi	r18, 0x01	; 1
 7c2:	80 40       	sbci	r24, 0x00	; 0
 7c4:	90 40       	sbci	r25, 0x00	; 0
 7c6:	e1 f7       	brne	.-8      	; 0x7c0 <init_LCD+0xae>
 7c8:	00 c0       	rjmp	.+0      	; 0x7ca <init_LCD+0xb8>
 7ca:	00 00       	nop
 7cc:	08 95       	ret

Disassembly of section .text.init_Pins:

00000b24 <init_Pins>:
	_delay_ms(50);
}

void init_Pins() {
	DDRD = 0xFF;
 b24:	8f ef       	ldi	r24, 0xFF	; 255
 b26:	8a b9       	out	0x0a, r24	; 10
	DDRB = 0xFF;
 b28:	84 b9       	out	0x04, r24	; 4
	DDRC = 0xF0;
 b2a:	80 ef       	ldi	r24, 0xF0	; 240
 b2c:	87 b9       	out	0x07, r24	; 7
	PORTC = 0x0F;  // Configurar el puerto C para lectura (con pull-up)
 b2e:	8f e0       	ldi	r24, 0x0F	; 15
 b30:	88 b9       	out	0x08, r24	; 8
 b32:	08 95       	ret

Disassembly of section .text.LCD_write:

0000096c <LCD_write>:
}

void LCD_write(char data) {
	PORTB = (data >> 4) & 0x0F; // Enviar los 4 bits más significativos
 96c:	98 2f       	mov	r25, r24
 96e:	92 95       	swap	r25
 970:	9f 70       	andi	r25, 0x0F	; 15
 972:	95 b9       	out	0x05, r25	; 5
	PORTD |= (1 << RS);
 974:	9b b1       	in	r25, 0x0b	; 11
 976:	90 62       	ori	r25, 0x20	; 32
 978:	9b b9       	out	0x0b, r25	; 11
	PORTD &= ~(1 << RW);
 97a:	9b b1       	in	r25, 0x0b	; 11
 97c:	9f 7b       	andi	r25, 0xBF	; 191
 97e:	9b b9       	out	0x0b, r25	; 11
	PORTD |= (1 << Enable);
 980:	9b b1       	in	r25, 0x0b	; 11
 982:	90 68       	ori	r25, 0x80	; 128
 984:	9b b9       	out	0x0b, r25	; 11
 986:	ef e9       	ldi	r30, 0x9F	; 159
 988:	ff e0       	ldi	r31, 0x0F	; 15
 98a:	31 97       	sbiw	r30, 0x01	; 1
 98c:	f1 f7       	brne	.-4      	; 0x98a <LCD_write+0x1e>
 98e:	00 c0       	rjmp	.+0      	; 0x990 <LCD_write+0x24>
 990:	00 00       	nop
	_delay_ms(1);
	PORTD &= ~(1 << Enable);
 992:	9b b1       	in	r25, 0x0b	; 11
 994:	9f 77       	andi	r25, 0x7F	; 127
 996:	9b b9       	out	0x0b, r25	; 11

	PORTB = data & 0x0F; // Enviar los 4 bits menos significativos
 998:	8f 70       	andi	r24, 0x0F	; 15
 99a:	85 b9       	out	0x05, r24	; 5
	PORTD |= (1 << Enable);
 99c:	8b b1       	in	r24, 0x0b	; 11
 99e:	80 68       	ori	r24, 0x80	; 128
 9a0:	8b b9       	out	0x0b, r24	; 11
 9a2:	8f e9       	ldi	r24, 0x9F	; 159
 9a4:	9f e0       	ldi	r25, 0x0F	; 15
 9a6:	01 97       	sbiw	r24, 0x01	; 1
 9a8:	f1 f7       	brne	.-4      	; 0x9a6 <LCD_write+0x3a>
 9aa:	00 c0       	rjmp	.+0      	; 0x9ac <LCD_write+0x40>
 9ac:	00 00       	nop
	_delay_ms(1);
	PORTD &= ~(1 << Enable);
 9ae:	8b b1       	in	r24, 0x0b	; 11
 9b0:	8f 77       	andi	r24, 0x7F	; 127
 9b2:	8b b9       	out	0x0b, r24	; 11
 9b4:	08 95       	ret

Disassembly of section .text.comprobar_Teclado:

00000568 <comprobar_Teclado>:
}

void comprobar_Teclado(int* state, char* caracter) {
 568:	cf 92       	push	r12
 56a:	df 92       	push	r13
 56c:	ef 92       	push	r14
 56e:	ff 92       	push	r15
 570:	0f 93       	push	r16
 572:	1f 93       	push	r17
 574:	cf 93       	push	r28
 576:	df 93       	push	r29
 578:	cd b7       	in	r28, 0x3d	; 61
 57a:	de b7       	in	r29, 0x3e	; 62
 57c:	a0 97       	sbiw	r28, 0x20	; 32
 57e:	0f b6       	in	r0, 0x3f	; 63
 580:	f8 94       	cli
 582:	de bf       	out	0x3e, r29	; 62
 584:	0f be       	out	0x3f, r0	; 63
 586:	cd bf       	out	0x3d, r28	; 61
	int Columna_ = -1;
	int Fila_ = -1;
	int Fila[4] = {Fila1, Fila2, Fila3, Fila4};
 588:	28 e0       	ldi	r18, 0x08	; 8
 58a:	ee e0       	ldi	r30, 0x0E	; 14
 58c:	f1 e0       	ldi	r31, 0x01	; 1
 58e:	de 01       	movw	r26, r28
 590:	11 96       	adiw	r26, 0x01	; 1
 592:	01 90       	ld	r0, Z+
 594:	0d 92       	st	X+, r0
 596:	2a 95       	dec	r18
 598:	e1 f7       	brne	.-8      	; 0x592 <comprobar_Teclado+0x2a>
	int Col[4] = {Col1, Col2, Col3, Col4};
 59a:	28 e0       	ldi	r18, 0x08	; 8
 59c:	e6 e1       	ldi	r30, 0x16	; 22
 59e:	f1 e0       	ldi	r31, 0x01	; 1
 5a0:	de 01       	movw	r26, r28
 5a2:	19 96       	adiw	r26, 0x09	; 9
 5a4:	01 90       	ld	r0, Z+
 5a6:	0d 92       	st	X+, r0
 5a8:	2a 95       	dec	r18
 5aa:	e1 f7       	brne	.-8      	; 0x5a4 <comprobar_Teclado+0x3c>
	char Teclado[4][4] = {
 5ac:	20 e1       	ldi	r18, 0x10	; 16
 5ae:	ee e1       	ldi	r30, 0x1E	; 30
 5b0:	f1 e0       	ldi	r31, 0x01	; 1
 5b2:	de 01       	movw	r26, r28
 5b4:	51 96       	adiw	r26, 0x11	; 17
 5b6:	01 90       	ld	r0, Z+
 5b8:	0d 92       	st	X+, r0
 5ba:	2a 95       	dec	r18
 5bc:	e1 f7       	brne	.-8      	; 0x5b6 <comprobar_Teclado+0x4e>
		{'4', '5', '6', 'B'},
		{'7', '8', '9', 'C'},
		{'*', '0', '#', 'D'}
	};

	PORTD |= (1 << Fila1) | (1 << Fila2) | (1 << Fila3) | (1 << Fila4);
 5be:	2b b1       	in	r18, 0x0b	; 11
 5c0:	2e 61       	ori	r18, 0x1E	; 30
 5c2:	2b b9       	out	0x0b, r18	; 11
	for (int i = 0; i < 4; i++){
 5c4:	a0 e0       	ldi	r26, 0x00	; 0
 5c6:	b0 e0       	ldi	r27, 0x00	; 0
	PORTD &= ~(1 << Enable);
}

void comprobar_Teclado(int* state, char* caracter) {
	int Columna_ = -1;
	int Fila_ = -1;
 5c8:	ee 24       	eor	r14, r14
 5ca:	ea 94       	dec	r14
 5cc:	fe 2c       	mov	r15, r14
	_delay_ms(1);
	PORTD &= ~(1 << Enable);
}

void comprobar_Teclado(int* state, char* caracter) {
	int Columna_ = -1;
 5ce:	0f ef       	ldi	r16, 0xFF	; 255
 5d0:	1f ef       	ldi	r17, 0xFF	; 255
		{'7', '8', '9', 'C'},
		{'*', '0', '#', 'D'}
	};

	PORTD |= (1 << Fila1) | (1 << Fila2) | (1 << Fila3) | (1 << Fila4);
	for (int i = 0; i < 4; i++){
 5d2:	52 c0       	rjmp	.+164    	; 0x678 <comprobar_Teclado+0x110>
		PORTD &= ~(1 << Fila[i]);
 5d4:	4b b1       	in	r20, 0x0b	; 11
 5d6:	fd 01       	movw	r30, r26
 5d8:	ee 0f       	add	r30, r30
 5da:	ff 1f       	adc	r31, r31
 5dc:	cc 24       	eor	r12, r12
 5de:	c3 94       	inc	r12
 5e0:	d1 2c       	mov	r13, r1
 5e2:	cc 0e       	add	r12, r28
 5e4:	dd 1e       	adc	r13, r29
 5e6:	ec 0d       	add	r30, r12
 5e8:	fd 1d       	adc	r31, r13
 5ea:	21 e0       	ldi	r18, 0x01	; 1
 5ec:	30 e0       	ldi	r19, 0x00	; 0
 5ee:	00 80       	ld	r0, Z
 5f0:	02 c0       	rjmp	.+4      	; 0x5f6 <comprobar_Teclado+0x8e>
 5f2:	22 0f       	add	r18, r18
 5f4:	33 1f       	adc	r19, r19
 5f6:	0a 94       	dec	r0
 5f8:	e2 f7       	brpl	.-8      	; 0x5f2 <comprobar_Teclado+0x8a>
 5fa:	20 95       	com	r18
 5fc:	24 23       	and	r18, r20
 5fe:	2b b9       	out	0x0b, r18	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 600:	2a e1       	ldi	r18, 0x1A	; 26
 602:	2a 95       	dec	r18
 604:	f1 f7       	brne	.-4      	; 0x602 <comprobar_Teclado+0x9a>
 606:	00 c0       	rjmp	.+0      	; 0x608 <comprobar_Teclado+0xa0>
		_delay_us(5);
		for (int j = 0; j < 4; j++) {
 608:	40 e0       	ldi	r20, 0x00	; 0
 60a:	50 e0       	ldi	r21, 0x00	; 0
 60c:	16 c0       	rjmp	.+44     	; 0x63a <comprobar_Teclado+0xd2>
			if (!(PINC & (1 << Col[j]))) {
 60e:	26 b1       	in	r18, 0x06	; 6
 610:	fa 01       	movw	r30, r20
 612:	ee 0f       	add	r30, r30
 614:	ff 1f       	adc	r31, r31
 616:	cc 24       	eor	r12, r12
 618:	c3 94       	inc	r12
 61a:	d1 2c       	mov	r13, r1
 61c:	cc 0e       	add	r12, r28
 61e:	dd 1e       	adc	r13, r29
 620:	ec 0d       	add	r30, r12
 622:	fd 1d       	adc	r31, r13
 624:	30 e0       	ldi	r19, 0x00	; 0
 626:	00 84       	ldd	r0, Z+8	; 0x08
 628:	02 c0       	rjmp	.+4      	; 0x62e <comprobar_Teclado+0xc6>
 62a:	35 95       	asr	r19
 62c:	27 95       	ror	r18
 62e:	0a 94       	dec	r0
 630:	e2 f7       	brpl	.-8      	; 0x62a <comprobar_Teclado+0xc2>
 632:	20 ff       	sbrs	r18, 0
 634:	06 c0       	rjmp	.+12     	; 0x642 <comprobar_Teclado+0xda>

	PORTD |= (1 << Fila1) | (1 << Fila2) | (1 << Fila3) | (1 << Fila4);
	for (int i = 0; i < 4; i++){
		PORTD &= ~(1 << Fila[i]);
		_delay_us(5);
		for (int j = 0; j < 4; j++) {
 636:	4f 5f       	subi	r20, 0xFF	; 255
 638:	5f 4f       	sbci	r21, 0xFF	; 255
 63a:	44 30       	cpi	r20, 0x04	; 4
 63c:	51 05       	cpc	r21, r1
 63e:	3c f3       	brlt	.-50     	; 0x60e <comprobar_Teclado+0xa6>
 640:	02 c0       	rjmp	.+4      	; 0x646 <comprobar_Teclado+0xde>
			if (!(PINC & (1 << Col[j]))) {
				Columna_ = j;
				Fila_ = i; 
 642:	7d 01       	movw	r14, r26
	for (int i = 0; i < 4; i++){
		PORTD &= ~(1 << Fila[i]);
		_delay_us(5);
		for (int j = 0; j < 4; j++) {
			if (!(PINC & (1 << Col[j]))) {
				Columna_ = j;
 644:	8a 01       	movw	r16, r20
				Fila_ = i; 
				break;
			}
		}
		PORTD |= (1 << Fila[i]);
 646:	4b b1       	in	r20, 0x0b	; 11
 648:	fd 01       	movw	r30, r26
 64a:	ee 0f       	add	r30, r30
 64c:	ff 1f       	adc	r31, r31
 64e:	21 e0       	ldi	r18, 0x01	; 1
 650:	30 e0       	ldi	r19, 0x00	; 0
 652:	2c 0f       	add	r18, r28
 654:	3d 1f       	adc	r19, r29
 656:	e2 0f       	add	r30, r18
 658:	f3 1f       	adc	r31, r19
 65a:	21 e0       	ldi	r18, 0x01	; 1
 65c:	30 e0       	ldi	r19, 0x00	; 0
 65e:	00 80       	ld	r0, Z
 660:	02 c0       	rjmp	.+4      	; 0x666 <comprobar_Teclado+0xfe>
 662:	22 0f       	add	r18, r18
 664:	33 1f       	adc	r19, r19
 666:	0a 94       	dec	r0
 668:	e2 f7       	brpl	.-8      	; 0x662 <comprobar_Teclado+0xfa>
 66a:	24 2b       	or	r18, r20
 66c:	2b b9       	out	0x0b, r18	; 11
		if (Columna_ != -1) {
 66e:	0f 3f       	cpi	r16, 0xFF	; 255
 670:	3f ef       	ldi	r19, 0xFF	; 255
 672:	13 07       	cpc	r17, r19
 674:	29 f4       	brne	.+10     	; 0x680 <comprobar_Teclado+0x118>
		{'7', '8', '9', 'C'},
		{'*', '0', '#', 'D'}
	};

	PORTD |= (1 << Fila1) | (1 << Fila2) | (1 << Fila3) | (1 << Fila4);
	for (int i = 0; i < 4; i++){
 676:	11 96       	adiw	r26, 0x01	; 1
 678:	a4 30       	cpi	r26, 0x04	; 4
 67a:	b1 05       	cpc	r27, r1
 67c:	0c f4       	brge	.+2      	; 0x680 <comprobar_Teclado+0x118>
 67e:	aa cf       	rjmp	.-172    	; 0x5d4 <comprobar_Teclado+0x6c>
		if (Columna_ != -1) {
			break;
		}
	}

	if (Columna_ != -1) {
 680:	0f 3f       	cpi	r16, 0xFF	; 255
 682:	ef ef       	ldi	r30, 0xFF	; 255
 684:	1e 07       	cpc	r17, r30
 686:	a1 f1       	breq	.+104    	; 0x6f0 <comprobar_Teclado+0x188>
		*caracter = Teclado[Fila_][Columna_];
 688:	ee 0c       	add	r14, r14
 68a:	ff 1c       	adc	r15, r15
 68c:	ee 0c       	add	r14, r14
 68e:	ff 1c       	adc	r15, r15
 690:	cc 24       	eor	r12, r12
 692:	c3 94       	inc	r12
 694:	d1 2c       	mov	r13, r1
 696:	cc 0e       	add	r12, r28
 698:	dd 1e       	adc	r13, r29
 69a:	ec 0c       	add	r14, r12
 69c:	fd 1c       	adc	r15, r13
 69e:	f7 01       	movw	r30, r14
 6a0:	e0 0f       	add	r30, r16
 6a2:	f1 1f       	adc	r31, r17
 6a4:	20 89       	ldd	r18, Z+16	; 0x10
 6a6:	fb 01       	movw	r30, r22
 6a8:	20 83       	st	Z, r18
		
		if (*state == 0 && *caracter == 'A') {
 6aa:	fc 01       	movw	r30, r24
 6ac:	40 81       	ld	r20, Z
 6ae:	51 81       	ldd	r21, Z+1	; 0x01
 6b0:	45 2b       	or	r20, r21
 6b2:	31 f4       	brne	.+12     	; 0x6c0 <comprobar_Teclado+0x158>
 6b4:	21 34       	cpi	r18, 0x41	; 65
 6b6:	21 f4       	brne	.+8      	; 0x6c0 <comprobar_Teclado+0x158>
			*state = 1;
 6b8:	21 e0       	ldi	r18, 0x01	; 1
 6ba:	30 e0       	ldi	r19, 0x00	; 0
 6bc:	31 83       	std	Z+1, r19	; 0x01
 6be:	20 83       	st	Z, r18
		}
		
		if (*state == 1) {
 6c0:	fc 01       	movw	r30, r24
 6c2:	20 81       	ld	r18, Z
 6c4:	31 81       	ldd	r19, Z+1	; 0x01
 6c6:	21 30       	cpi	r18, 0x01	; 1
 6c8:	31 05       	cpc	r19, r1
 6ca:	a1 f4       	brne	.+40     	; 0x6f4 <comprobar_Teclado+0x18c>
			if (*caracter == '*') {
 6cc:	fb 01       	movw	r30, r22
 6ce:	20 81       	ld	r18, Z
 6d0:	2a 32       	cpi	r18, 0x2A	; 42
 6d2:	31 f4       	brne	.+12     	; 0x6e0 <comprobar_Teclado+0x178>
				*state = 2;
 6d4:	22 e0       	ldi	r18, 0x02	; 2
 6d6:	30 e0       	ldi	r19, 0x00	; 0
 6d8:	fc 01       	movw	r30, r24
 6da:	31 83       	std	Z+1, r19	; 0x01
 6dc:	20 83       	st	Z, r18
 6de:	0a c0       	rjmp	.+20     	; 0x6f4 <comprobar_Teclado+0x18c>
			} else if (*caracter == '#') {
 6e0:	23 32       	cpi	r18, 0x23	; 35
 6e2:	41 f4       	brne	.+16     	; 0x6f4 <comprobar_Teclado+0x18c>
				*state = 3;
 6e4:	23 e0       	ldi	r18, 0x03	; 3
 6e6:	30 e0       	ldi	r19, 0x00	; 0
 6e8:	fc 01       	movw	r30, r24
 6ea:	31 83       	std	Z+1, r19	; 0x01
 6ec:	20 83       	st	Z, r18
 6ee:	02 c0       	rjmp	.+4      	; 0x6f4 <comprobar_Teclado+0x18c>
			}
		}
	} else {
		*caracter = '\0';
 6f0:	fb 01       	movw	r30, r22
 6f2:	10 82       	st	Z, r1
	}
}
 6f4:	a0 96       	adiw	r28, 0x20	; 32
 6f6:	0f b6       	in	r0, 0x3f	; 63
 6f8:	f8 94       	cli
 6fa:	de bf       	out	0x3e, r29	; 62
 6fc:	0f be       	out	0x3f, r0	; 63
 6fe:	cd bf       	out	0x3d, r28	; 61
 700:	df 91       	pop	r29
 702:	cf 91       	pop	r28
 704:	1f 91       	pop	r17
 706:	0f 91       	pop	r16
 708:	ff 90       	pop	r15
 70a:	ef 90       	pop	r14
 70c:	df 90       	pop	r13
 70e:	cf 90       	pop	r12
 710:	08 95       	ret

Disassembly of section .text.Enviar_Mensaje:

000007ce <Enviar_Mensaje>:

void Bienvenida() {
	Enviar_Mensaje("Bienvenido", "Ingrese A");
}

void Enviar_Mensaje(const char* Cadena1, const char* Cadena2) {
 7ce:	6f 92       	push	r6
 7d0:	7f 92       	push	r7
 7d2:	8f 92       	push	r8
 7d4:	cf 92       	push	r12
 7d6:	df 92       	push	r13
 7d8:	ef 92       	push	r14
 7da:	cf 93       	push	r28
 7dc:	df 93       	push	r29
 7de:	3b 01       	movw	r6, r22
 7e0:	88 2e       	mov	r8, r24
 7e2:	69 01       	movw	r12, r18
 7e4:	e4 2e       	mov	r14, r20
	LCD_cmd(0x01);
 7e6:	81 e0       	ldi	r24, 0x01	; 1
 7e8:	0e 94 91 04 	call	0x922	; 0x922 <LCD_cmd>
	for (int i = 0; i < 16 && Cadena1[i] != '\0'; i++) {
 7ec:	c0 e0       	ldi	r28, 0x00	; 0
 7ee:	d0 e0       	ldi	r29, 0x00	; 0
 7f0:	03 c0       	rjmp	.+6      	; 0x7f8 <Enviar_Mensaje+0x2a>
		LCD_write(Cadena1[i]);
 7f2:	0e 94 b6 04 	call	0x96c	; 0x96c <LCD_write>
	Enviar_Mensaje("Bienvenido", "Ingrese A");
}

void Enviar_Mensaje(const char* Cadena1, const char* Cadena2) {
	LCD_cmd(0x01);
	for (int i = 0; i < 16 && Cadena1[i] != '\0'; i++) {
 7f6:	21 96       	adiw	r28, 0x01	; 1
 7f8:	c0 31       	cpi	r28, 0x10	; 16
 7fa:	d1 05       	cpc	r29, r1
 7fc:	6c f4       	brge	.+26     	; 0x818 <__DATA_REGION_LENGTH__+0x18>
 7fe:	a8 2d       	mov	r26, r8
 800:	c3 01       	movw	r24, r6
 802:	8c 0f       	add	r24, r28
 804:	9d 1f       	adc	r25, r29
 806:	a1 1d       	adc	r26, r1
 808:	d7 fd       	sbrc	r29, 7
 80a:	aa 95       	dec	r26
 80c:	fc 01       	movw	r30, r24
 80e:	84 91       	lpm	r24, Z
 810:	a7 fd       	sbrc	r26, 7
 812:	80 81       	ld	r24, Z
 814:	81 11       	cpse	r24, r1
 816:	ed cf       	rjmp	.-38     	; 0x7f2 <Enviar_Mensaje+0x24>
		LCD_write(Cadena1[i]);
	}
	LCD_cmd(0xC0);
 818:	80 ec       	ldi	r24, 0xC0	; 192
 81a:	0e 94 91 04 	call	0x922	; 0x922 <LCD_cmd>
	for (int i = 0; i < 16 && Cadena2[i] != '\0'; i++) {
 81e:	c0 e0       	ldi	r28, 0x00	; 0
 820:	d0 e0       	ldi	r29, 0x00	; 0
 822:	03 c0       	rjmp	.+6      	; 0x82a <__DATA_REGION_LENGTH__+0x2a>
		LCD_write(Cadena2[i]);
 824:	0e 94 b6 04 	call	0x96c	; 0x96c <LCD_write>
	LCD_cmd(0x01);
	for (int i = 0; i < 16 && Cadena1[i] != '\0'; i++) {
		LCD_write(Cadena1[i]);
	}
	LCD_cmd(0xC0);
	for (int i = 0; i < 16 && Cadena2[i] != '\0'; i++) {
 828:	21 96       	adiw	r28, 0x01	; 1
 82a:	c0 31       	cpi	r28, 0x10	; 16
 82c:	d1 05       	cpc	r29, r1
 82e:	6c f4       	brge	.+26     	; 0x84a <__DATA_REGION_LENGTH__+0x4a>
 830:	ae 2d       	mov	r26, r14
 832:	c6 01       	movw	r24, r12
 834:	8c 0f       	add	r24, r28
 836:	9d 1f       	adc	r25, r29
 838:	a1 1d       	adc	r26, r1
 83a:	d7 fd       	sbrc	r29, 7
 83c:	aa 95       	dec	r26
 83e:	fc 01       	movw	r30, r24
 840:	84 91       	lpm	r24, Z
 842:	a7 fd       	sbrc	r26, 7
 844:	80 81       	ld	r24, Z
 846:	81 11       	cpse	r24, r1
 848:	ed cf       	rjmp	.-38     	; 0x824 <__DATA_REGION_LENGTH__+0x24>
		LCD_write(Cadena2[i]);
	}
}
 84a:	df 91       	pop	r29
 84c:	cf 91       	pop	r28
 84e:	ef 90       	pop	r14
 850:	df 90       	pop	r13
 852:	cf 90       	pop	r12
 854:	8f 90       	pop	r8
 856:	7f 90       	pop	r7
 858:	6f 90       	pop	r6
 85a:	08 95       	ret

Disassembly of section .text.Bienvenida:

00000b00 <Bienvenida>:
		*caracter = '\0';
	}
}

void Bienvenida() {
	Enviar_Mensaje("Bienvenido", "Ingrese A");
 b00:	2e ec       	ldi	r18, 0xCE	; 206
 b02:	30 e0       	ldi	r19, 0x00	; 0
 b04:	40 e0       	ldi	r20, 0x00	; 0
 b06:	68 ed       	ldi	r22, 0xD8	; 216
 b08:	70 e0       	ldi	r23, 0x00	; 0
 b0a:	80 e0       	ldi	r24, 0x00	; 0
 b0c:	0e 94 e7 03 	call	0x7ce	; 0x7ce <Enviar_Mensaje>
 b10:	08 95       	ret

Disassembly of section .text.almacenar_Contrasena:

00000b12 <almacenar_Contrasena>:
		LCD_write(Cadena2[i]);
	}
}

void almacenar_Contrasena(char* password) {
	eeprom_write_block(password, &password_ref, sizeof(password_ref));
 b12:	bc 01       	movw	r22, r24
 b14:	80 e8       	ldi	r24, 0x80	; 128
 b16:	24 e0       	ldi	r18, 0x04	; 4
 b18:	30 e0       	ldi	r19, 0x00	; 0
 b1a:	40 e0       	ldi	r20, 0x00	; 0
 b1c:	50 e0       	ldi	r21, 0x00	; 0
 b1e:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <eeprom_write_block>
 b22:	08 95       	ret

Disassembly of section .text.verificar_Contrasena:

000008c6 <verificar_Contrasena>:
}

int verificar_Contrasena(char* password) {
 8c6:	ef 92       	push	r14
 8c8:	ff 92       	push	r15
 8ca:	0f 93       	push	r16
 8cc:	1f 93       	push	r17
 8ce:	cf 93       	push	r28
 8d0:	df 93       	push	r29
 8d2:	00 d0       	rcall	.+0      	; 0x8d4 <verificar_Contrasena+0xe>
 8d4:	00 d0       	rcall	.+0      	; 0x8d6 <verificar_Contrasena+0x10>
 8d6:	cd b7       	in	r28, 0x3d	; 61
 8d8:	de b7       	in	r29, 0x3e	; 62
 8da:	7c 01       	movw	r14, r24
	char stored_password[4];
	eeprom_read_block(stored_password, &password_ref, sizeof(stored_password));
 8dc:	40 e0       	ldi	r20, 0x00	; 0
 8de:	50 e0       	ldi	r21, 0x00	; 0
 8e0:	60 e8       	ldi	r22, 0x80	; 128
 8e2:	24 e0       	ldi	r18, 0x04	; 4
 8e4:	30 e0       	ldi	r19, 0x00	; 0
 8e6:	8e 01       	movw	r16, r28
 8e8:	0f 5f       	subi	r16, 0xFF	; 255
 8ea:	1f 4f       	sbci	r17, 0xFF	; 255
 8ec:	c8 01       	movw	r24, r16
 8ee:	0e 94 45 05 	call	0xa8a	; 0xa8a <eeprom_read_block>

	if (strcmp(password, stored_password) == 0) {
 8f2:	98 01       	movw	r18, r16
 8f4:	40 e8       	ldi	r20, 0x80	; 128
 8f6:	b7 01       	movw	r22, r14
 8f8:	80 e8       	ldi	r24, 0x80	; 128
 8fa:	0e 94 db 04 	call	0x9b6	; 0x9b6 <strcmp>
 8fe:	89 2b       	or	r24, r25
 900:	19 f4       	brne	.+6      	; 0x908 <__stack+0x9>
		return 1; 
 902:	81 e0       	ldi	r24, 0x01	; 1
 904:	90 e0       	ldi	r25, 0x00	; 0
 906:	02 c0       	rjmp	.+4      	; 0x90c <__stack+0xd>
	}
	
	return 0; 
 908:	80 e0       	ldi	r24, 0x00	; 0
 90a:	90 e0       	ldi	r25, 0x00	; 0
}
 90c:	0f 90       	pop	r0
 90e:	0f 90       	pop	r0
 910:	0f 90       	pop	r0
 912:	0f 90       	pop	r0
 914:	df 91       	pop	r29
 916:	cf 91       	pop	r28
 918:	1f 91       	pop	r17
 91a:	0f 91       	pop	r16
 91c:	ff 90       	pop	r15
 91e:	ef 90       	pop	r14
 920:	08 95       	ret

Disassembly of section .text.abrir_Cerradura:

00000a2e <abrir_Cerradura>:

void abrir_Cerradura() {
	Enviar_Mensaje("Abriendo...", "Cerradura");
 a2e:	23 ee       	ldi	r18, 0xE3	; 227
 a30:	30 e0       	ldi	r19, 0x00	; 0
 a32:	40 e0       	ldi	r20, 0x00	; 0
 a34:	6d ee       	ldi	r22, 0xED	; 237
 a36:	70 e0       	ldi	r23, 0x00	; 0
 a38:	80 e0       	ldi	r24, 0x00	; 0
 a3a:	0e 94 e7 03 	call	0x7ce	; 0x7ce <Enviar_Mensaje>
	PORTB |= (1 << LED_Verde);
 a3e:	85 b1       	in	r24, 0x05	; 5
 a40:	80 62       	ori	r24, 0x20	; 32
 a42:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 a44:	2f ef       	ldi	r18, 0xFF	; 255
 a46:	8b e7       	ldi	r24, 0x7B	; 123
 a48:	92 e9       	ldi	r25, 0x92	; 146
 a4a:	21 50       	subi	r18, 0x01	; 1
 a4c:	80 40       	sbci	r24, 0x00	; 0
 a4e:	90 40       	sbci	r25, 0x00	; 0
 a50:	e1 f7       	brne	.-8      	; 0xa4a <abrir_Cerradura+0x1c>
 a52:	00 c0       	rjmp	.+0      	; 0xa54 <abrir_Cerradura+0x26>
 a54:	00 00       	nop
	_delay_ms(3000);
	PORTB &= ~(1 << LED_Verde);
 a56:	85 b1       	in	r24, 0x05	; 5
 a58:	8f 7d       	andi	r24, 0xDF	; 223
 a5a:	85 b9       	out	0x05, r24	; 5
 a5c:	08 95       	ret

Disassembly of section .text.cambiar_Contrasena:

0000085c <cambiar_Contrasena>:
}

void cambiar_Contrasena(char* new_password) {
 85c:	cf 93       	push	r28
 85e:	df 93       	push	r29
 860:	ec 01       	movw	r28, r24
	if (strlen(new_password) >= 4 && strlen(new_password) <= 6) { 
 862:	bc 01       	movw	r22, r24
 864:	80 e8       	ldi	r24, 0x80	; 128
 866:	0e 94 2f 05 	call	0xa5e	; 0xa5e <strlen>
 86a:	84 30       	cpi	r24, 0x04	; 4
 86c:	91 05       	cpc	r25, r1
 86e:	b8 f0       	brcs	.+46     	; 0x89e <cambiar_Contrasena+0x42>
 870:	07 97       	sbiw	r24, 0x07	; 7
 872:	a8 f4       	brcc	.+42     	; 0x89e <cambiar_Contrasena+0x42>
		almacenar_Contrasena(new_password);
 874:	ce 01       	movw	r24, r28
 876:	0e 94 89 05 	call	0xb12	; 0xb12 <almacenar_Contrasena>
		Enviar_Mensaje("Contraseña", "Cambiada");
 87a:	29 ef       	ldi	r18, 0xF9	; 249
 87c:	30 e0       	ldi	r19, 0x00	; 0
 87e:	40 e0       	ldi	r20, 0x00	; 0
 880:	62 e0       	ldi	r22, 0x02	; 2
 882:	71 e0       	ldi	r23, 0x01	; 1
 884:	80 e0       	ldi	r24, 0x00	; 0
 886:	0e 94 e7 03 	call	0x7ce	; 0x7ce <Enviar_Mensaje>
 88a:	2f ef       	ldi	r18, 0xFF	; 255
 88c:	83 ed       	ldi	r24, 0xD3	; 211
 88e:	90 e3       	ldi	r25, 0x30	; 48
 890:	21 50       	subi	r18, 0x01	; 1
 892:	80 40       	sbci	r24, 0x00	; 0
 894:	90 40       	sbci	r25, 0x00	; 0
 896:	e1 f7       	brne	.-8      	; 0x890 <cambiar_Contrasena+0x34>
 898:	00 c0       	rjmp	.+0      	; 0x89a <cambiar_Contrasena+0x3e>
 89a:	00 00       	nop
 89c:	11 c0       	rjmp	.+34     	; 0x8c0 <cambiar_Contrasena+0x64>
		_delay_ms(1000);
		} else {
		Enviar_Mensaje("Error:", "Longitud");
 89e:	2d e0       	ldi	r18, 0x0D	; 13
 8a0:	31 e0       	ldi	r19, 0x01	; 1
 8a2:	40 e0       	ldi	r20, 0x00	; 0
 8a4:	66 e1       	ldi	r22, 0x16	; 22
 8a6:	71 e0       	ldi	r23, 0x01	; 1
 8a8:	80 e0       	ldi	r24, 0x00	; 0
 8aa:	0e 94 e7 03 	call	0x7ce	; 0x7ce <Enviar_Mensaje>
 8ae:	2f ef       	ldi	r18, 0xFF	; 255
 8b0:	83 ed       	ldi	r24, 0xD3	; 211
 8b2:	90 e3       	ldi	r25, 0x30	; 48
 8b4:	21 50       	subi	r18, 0x01	; 1
 8b6:	80 40       	sbci	r24, 0x00	; 0
 8b8:	90 40       	sbci	r25, 0x00	; 0
 8ba:	e1 f7       	brne	.-8      	; 0x8b4 <cambiar_Contrasena+0x58>
 8bc:	00 c0       	rjmp	.+0      	; 0x8be <cambiar_Contrasena+0x62>
 8be:	00 00       	nop
		_delay_ms(1000);
	}
}
 8c0:	df 91       	pop	r29
 8c2:	cf 91       	pop	r28
 8c4:	08 95       	ret

Disassembly of section .text.activar_Alarma:

00000aae <activar_Alarma>:

void activar_Alarma() {
	PORTC |= (1 << Buzzer); // Activar el buzzer
 aae:	88 b1       	in	r24, 0x08	; 8
 ab0:	80 61       	ori	r24, 0x10	; 16
 ab2:	88 b9       	out	0x08, r24	; 8
 ab4:	2f ef       	ldi	r18, 0xFF	; 255
 ab6:	83 e2       	ldi	r24, 0x23	; 35
 ab8:	94 ef       	ldi	r25, 0xF4	; 244
 aba:	21 50       	subi	r18, 0x01	; 1
 abc:	80 40       	sbci	r24, 0x00	; 0
 abe:	90 40       	sbci	r25, 0x00	; 0
 ac0:	e1 f7       	brne	.-8      	; 0xaba <activar_Alarma+0xc>
 ac2:	00 c0       	rjmp	.+0      	; 0xac4 <activar_Alarma+0x16>
 ac4:	00 00       	nop
	_delay_ms(5000); // Sonar por 5 segundos
	PORTC &= ~(1 << Buzzer); // Desactivar el buzzer
 ac6:	88 b1       	in	r24, 0x08	; 8
 ac8:	8f 7e       	andi	r24, 0xEF	; 239
 aca:	88 b9       	out	0x08, r24	; 8
 acc:	08 95       	ret

Disassembly of section .text.main:

0000017c <main>:
char new_password[4];
char password[6]; 
char password_ref[4] EEMEM = "1234";  // Contraseña por defecto en la EEPROM
int intentos = 0; 

int main(void) {
 17c:	cf 93       	push	r28
 17e:	df 93       	push	r29
 180:	0f 92       	push	r0
 182:	cd b7       	in	r28, 0x3d	; 61
 184:	de b7       	in	r29, 0x3e	; 62
	init_Pins();
 186:	0e 94 92 05 	call	0xb24	; 0xb24 <init_Pins>
	init_LCD();
 18a:	0e 94 89 03 	call	0x712	; 0x712 <init_LCD>
	
	char caracter = '\0';
 18e:	19 82       	std	Y+1, r1	; 0x01
	int contador = 0;
	
	Bienvenida();
 190:	0e 94 80 05 	call	0xb00	; 0xb00 <Bienvenida>
int main(void) {
	init_Pins();
	init_LCD();
	
	char caracter = '\0';
	int contador = 0;
 194:	00 e0       	ldi	r16, 0x00	; 0
 196:	10 e0       	ldi	r17, 0x00	; 0
	
	Bienvenida();
	
	while (1) {
		if (state == 0) {                    // Bienvenida
 198:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <state>
 19c:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <state+0x1>
 1a0:	00 97       	sbiw	r24, 0x00	; 0
 1a2:	99 f4       	brne	.+38     	; 0x1ca <main+0x4e>
			Bienvenida();
 1a4:	0e 94 80 05 	call	0xb00	; 0xb00 <Bienvenida>
			comprobar_Teclado(&state, &caracter);
 1a8:	be 01       	movw	r22, r28
 1aa:	6f 5f       	subi	r22, 0xFF	; 255
 1ac:	7f 4f       	sbci	r23, 0xFF	; 255
 1ae:	80 e3       	ldi	r24, 0x30	; 48
 1b0:	91 e0       	ldi	r25, 0x01	; 1
 1b2:	0e 94 b4 02 	call	0x568	; 0x568 <comprobar_Teclado>
 1b6:	2f ef       	ldi	r18, 0xFF	; 255
 1b8:	89 e6       	ldi	r24, 0x69	; 105
 1ba:	98 e1       	ldi	r25, 0x18	; 24
 1bc:	21 50       	subi	r18, 0x01	; 1
 1be:	80 40       	sbci	r24, 0x00	; 0
 1c0:	90 40       	sbci	r25, 0x00	; 0
 1c2:	e1 f7       	brne	.-8      	; 0x1bc <main+0x40>
 1c4:	00 c0       	rjmp	.+0      	; 0x1c6 <main+0x4a>
 1c6:	00 00       	nop
 1c8:	e7 cf       	rjmp	.-50     	; 0x198 <main+0x1c>
			_delay_ms(500);
			
		} else if (state == 1) {             // Menu de opciones
 1ca:	81 30       	cpi	r24, 0x01	; 1
 1cc:	91 05       	cpc	r25, r1
 1ce:	c9 f4       	brne	.+50     	; 0x202 <main+0x86>
			Enviar_Mensaje("* : Abrir", "# : Cambiar PASS");
 1d0:	2d e1       	ldi	r18, 0x1D	; 29
 1d2:	31 e0       	ldi	r19, 0x01	; 1
 1d4:	40 e0       	ldi	r20, 0x00	; 0
 1d6:	6e e2       	ldi	r22, 0x2E	; 46
 1d8:	71 e0       	ldi	r23, 0x01	; 1
 1da:	80 e0       	ldi	r24, 0x00	; 0
 1dc:	0e 94 e7 03 	call	0x7ce	; 0x7ce <Enviar_Mensaje>
			comprobar_Teclado(&state, &caracter);
 1e0:	be 01       	movw	r22, r28
 1e2:	6f 5f       	subi	r22, 0xFF	; 255
 1e4:	7f 4f       	sbci	r23, 0xFF	; 255
 1e6:	80 e3       	ldi	r24, 0x30	; 48
 1e8:	91 e0       	ldi	r25, 0x01	; 1
 1ea:	0e 94 b4 02 	call	0x568	; 0x568 <comprobar_Teclado>
 1ee:	2f ef       	ldi	r18, 0xFF	; 255
 1f0:	89 e6       	ldi	r24, 0x69	; 105
 1f2:	98 e1       	ldi	r25, 0x18	; 24
 1f4:	21 50       	subi	r18, 0x01	; 1
 1f6:	80 40       	sbci	r24, 0x00	; 0
 1f8:	90 40       	sbci	r25, 0x00	; 0
 1fa:	e1 f7       	brne	.-8      	; 0x1f4 <main+0x78>
 1fc:	00 c0       	rjmp	.+0      	; 0x1fe <main+0x82>
 1fe:	00 00       	nop
 200:	cb cf       	rjmp	.-106    	; 0x198 <main+0x1c>
			_delay_ms(500);
			
		} else if (state == 2) {             // Solicitar Contraseña para abrir
 202:	82 30       	cpi	r24, 0x02	; 2
 204:	91 05       	cpc	r25, r1
 206:	09 f0       	breq	.+2      	; 0x20a <main+0x8e>
 208:	ac c0       	rjmp	.+344    	; 0x362 <main+0x1e6>
			if(contador == 0){
 20a:	01 15       	cp	r16, r1
 20c:	11 05       	cpc	r17, r1
 20e:	89 f4       	brne	.+34     	; 0x232 <main+0xb6>
				Enviar_Mensaje("Ingrese PASS", "     ");
 210:	28 e3       	ldi	r18, 0x38	; 56
 212:	31 e0       	ldi	r19, 0x01	; 1
 214:	40 e0       	ldi	r20, 0x00	; 0
 216:	6e e3       	ldi	r22, 0x3E	; 62
 218:	71 e0       	ldi	r23, 0x01	; 1
 21a:	80 e0       	ldi	r24, 0x00	; 0
 21c:	0e 94 e7 03 	call	0x7ce	; 0x7ce <Enviar_Mensaje>
 220:	2f ef       	ldi	r18, 0xFF	; 255
 222:	89 e6       	ldi	r24, 0x69	; 105
 224:	98 e1       	ldi	r25, 0x18	; 24
 226:	21 50       	subi	r18, 0x01	; 1
 228:	80 40       	sbci	r24, 0x00	; 0
 22a:	90 40       	sbci	r25, 0x00	; 0
 22c:	e1 f7       	brne	.-8      	; 0x226 <main+0xaa>
 22e:	00 c0       	rjmp	.+0      	; 0x230 <main+0xb4>
 230:	00 00       	nop
				_delay_ms(500);
			}
			comprobar_Teclado(&state, &caracter);
 232:	be 01       	movw	r22, r28
 234:	6f 5f       	subi	r22, 0xFF	; 255
 236:	7f 4f       	sbci	r23, 0xFF	; 255
 238:	80 e3       	ldi	r24, 0x30	; 48
 23a:	91 e0       	ldi	r25, 0x01	; 1
 23c:	0e 94 b4 02 	call	0x568	; 0x568 <comprobar_Teclado>
			if(caracter != '\0' && contador < 4){ 
 240:	89 81       	ldd	r24, Y+1	; 0x01
 242:	88 23       	and	r24, r24
 244:	f9 f0       	breq	.+62     	; 0x284 <main+0x108>
 246:	04 30       	cpi	r16, 0x04	; 4
 248:	11 05       	cpc	r17, r1
 24a:	e4 f4       	brge	.+56     	; 0x284 <main+0x108>
				pass[contador] = '*';
 24c:	f8 01       	movw	r30, r16
 24e:	ea 5f       	subi	r30, 0xFA	; 250
 250:	fe 4f       	sbci	r31, 0xFE	; 254
 252:	9a e2       	ldi	r25, 0x2A	; 42
 254:	90 83       	st	Z, r25
				password[contador] = caracter; 
 256:	f8 01       	movw	r30, r16
 258:	e0 50       	subi	r30, 0x00	; 0
 25a:	ff 4f       	sbci	r31, 0xFF	; 255
 25c:	80 83       	st	Z, r24
				Enviar_Mensaje("Ingrese PASS", pass);
 25e:	26 e0       	ldi	r18, 0x06	; 6
 260:	31 e0       	ldi	r19, 0x01	; 1
 262:	40 e8       	ldi	r20, 0x80	; 128
 264:	6e e3       	ldi	r22, 0x3E	; 62
 266:	71 e0       	ldi	r23, 0x01	; 1
 268:	80 e0       	ldi	r24, 0x00	; 0
 26a:	0e 94 e7 03 	call	0x7ce	; 0x7ce <Enviar_Mensaje>
 26e:	2f ef       	ldi	r18, 0xFF	; 255
 270:	89 e6       	ldi	r24, 0x69	; 105
 272:	98 e1       	ldi	r25, 0x18	; 24
 274:	21 50       	subi	r18, 0x01	; 1
 276:	80 40       	sbci	r24, 0x00	; 0
 278:	90 40       	sbci	r25, 0x00	; 0
 27a:	e1 f7       	brne	.-8      	; 0x274 <main+0xf8>
 27c:	00 c0       	rjmp	.+0      	; 0x27e <main+0x102>
 27e:	00 00       	nop
				_delay_ms(500);
				contador++;
 280:	0f 5f       	subi	r16, 0xFF	; 255
 282:	1f 4f       	sbci	r17, 0xFF	; 255
			}
			if(contador == 4 || contador == 4){
 284:	04 30       	cpi	r16, 0x04	; 4
 286:	11 05       	cpc	r17, r1
 288:	09 f0       	breq	.+2      	; 0x28c <main+0x110>
 28a:	86 cf       	rjmp	.-244    	; 0x198 <main+0x1c>
				if(verificar_Contrasena(password)){
 28c:	80 e0       	ldi	r24, 0x00	; 0
 28e:	91 e0       	ldi	r25, 0x01	; 1
 290:	0e 94 63 04 	call	0x8c6	; 0x8c6 <verificar_Contrasena>
 294:	89 2b       	or	r24, r25
 296:	01 f1       	breq	.+64     	; 0x2d8 <main+0x15c>
					PORTB |= (1 << LED_Verde);
 298:	85 b1       	in	r24, 0x05	; 5
 29a:	80 62       	ori	r24, 0x20	; 32
 29c:	85 b9       	out	0x05, r24	; 5
					PORTB &= ~(1 << LED_Rojo);
 29e:	85 b1       	in	r24, 0x05	; 5
 2a0:	8f 7e       	andi	r24, 0xEF	; 239
 2a2:	85 b9       	out	0x05, r24	; 5
					Enviar_Mensaje("Contraseña", "Correcta");
 2a4:	2b e4       	ldi	r18, 0x4B	; 75
 2a6:	31 e0       	ldi	r19, 0x01	; 1
 2a8:	40 e0       	ldi	r20, 0x00	; 0
 2aa:	62 e0       	ldi	r22, 0x02	; 2
 2ac:	71 e0       	ldi	r23, 0x01	; 1
 2ae:	80 e0       	ldi	r24, 0x00	; 0
 2b0:	0e 94 e7 03 	call	0x7ce	; 0x7ce <Enviar_Mensaje>
					abrir_Cerradura();
 2b4:	0e 94 17 05 	call	0xa2e	; 0xa2e <abrir_Cerradura>
					state = 0;
 2b8:	10 92 31 01 	sts	0x0131, r1	; 0x800131 <state+0x1>
 2bc:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <state>
 2c0:	2f ef       	ldi	r18, 0xFF	; 255
 2c2:	8b e7       	ldi	r24, 0x7B	; 123
 2c4:	92 e9       	ldi	r25, 0x92	; 146
 2c6:	21 50       	subi	r18, 0x01	; 1
 2c8:	80 40       	sbci	r24, 0x00	; 0
 2ca:	90 40       	sbci	r25, 0x00	; 0
 2cc:	e1 f7       	brne	.-8      	; 0x2c6 <main+0x14a>
 2ce:	00 c0       	rjmp	.+0      	; 0x2d0 <main+0x154>
 2d0:	00 00       	nop
int main(void) {
	init_Pins();
	init_LCD();
	
	char caracter = '\0';
	int contador = 0;
 2d2:	80 e0       	ldi	r24, 0x00	; 0
 2d4:	90 e0       	ldi	r25, 0x00	; 0
 2d6:	3c c0       	rjmp	.+120    	; 0x350 <main+0x1d4>
					Enviar_Mensaje("Contraseña", "Correcta");
					abrir_Cerradura();
					state = 0;
					_delay_ms(3000);
				} else {
					Enviar_Mensaje("Contraseña", "Incorrecta");
 2d8:	24 e5       	ldi	r18, 0x54	; 84
 2da:	31 e0       	ldi	r19, 0x01	; 1
 2dc:	40 e0       	ldi	r20, 0x00	; 0
 2de:	62 e0       	ldi	r22, 0x02	; 2
 2e0:	71 e0       	ldi	r23, 0x01	; 1
 2e2:	80 e0       	ldi	r24, 0x00	; 0
 2e4:	0e 94 e7 03 	call	0x7ce	; 0x7ce <Enviar_Mensaje>
					intentos++;
 2e8:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <intentos>
 2ec:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <intentos+0x1>
 2f0:	01 96       	adiw	r24, 0x01	; 1
 2f2:	90 93 2f 01 	sts	0x012F, r25	; 0x80012f <intentos+0x1>
 2f6:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <intentos>
					if (intentos >= 3) {
 2fa:	03 97       	sbiw	r24, 0x03	; 3
 2fc:	6c f0       	brlt	.+26     	; 0x318 <main+0x19c>
						PORTB |= (1 << LED_Rojo);
 2fe:	85 b1       	in	r24, 0x05	; 5
 300:	80 61       	ori	r24, 0x10	; 16
 302:	85 b9       	out	0x05, r24	; 5
						activar_Alarma();
 304:	0e 94 57 05 	call	0xaae	; 0xaae <activar_Alarma>
						PORTB &= ~(1 << LED_Rojo);
 308:	85 b1       	in	r24, 0x05	; 5
 30a:	8f 7e       	andi	r24, 0xEF	; 239
 30c:	85 b9       	out	0x05, r24	; 5
						intentos = 0; 
 30e:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <intentos+0x1>
 312:	10 92 2e 01 	sts	0x012E, r1	; 0x80012e <intentos>
 316:	0f c0       	rjmp	.+30     	; 0x336 <main+0x1ba>
					} else {
						PORTB |= (1 << LED_Rojo);
 318:	85 b1       	in	r24, 0x05	; 5
 31a:	80 61       	ori	r24, 0x10	; 16
 31c:	85 b9       	out	0x05, r24	; 5
 31e:	2f ef       	ldi	r18, 0xFF	; 255
 320:	8b e7       	ldi	r24, 0x7B	; 123
 322:	92 e9       	ldi	r25, 0x92	; 146
 324:	21 50       	subi	r18, 0x01	; 1
 326:	80 40       	sbci	r24, 0x00	; 0
 328:	90 40       	sbci	r25, 0x00	; 0
 32a:	e1 f7       	brne	.-8      	; 0x324 <main+0x1a8>
 32c:	00 c0       	rjmp	.+0      	; 0x32e <main+0x1b2>
 32e:	00 00       	nop
						_delay_ms(3000);
						PORTB &= ~(1 << LED_Rojo);
 330:	85 b1       	in	r24, 0x05	; 5
 332:	8f 7e       	andi	r24, 0xEF	; 239
 334:	85 b9       	out	0x05, r24	; 5
					}

					state = 0; 
 336:	10 92 31 01 	sts	0x0131, r1	; 0x800131 <state+0x1>
 33a:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <state>
 33e:	c9 cf       	rjmp	.-110    	; 0x2d2 <main+0x156>
				}
				contador = 0;
				for(int i=0; i<4 ; i++){
					pass[i] = "";
 340:	fc 01       	movw	r30, r24
 342:	ea 5f       	subi	r30, 0xFA	; 250
 344:	fe 4f       	sbci	r31, 0xFE	; 254
 346:	2f e5       	ldi	r18, 0x5F	; 95
 348:	31 e0       	ldi	r19, 0x01	; 1
 34a:	40 e0       	ldi	r20, 0x00	; 0
 34c:	20 83       	st	Z, r18
					}

					state = 0; 
				}
				contador = 0;
				for(int i=0; i<4 ; i++){
 34e:	01 96       	adiw	r24, 0x01	; 1
 350:	84 30       	cpi	r24, 0x04	; 4
 352:	91 05       	cpc	r25, r1
 354:	ac f3       	brlt	.-22     	; 0x340 <main+0x1c4>
					pass[i] = "";
				}
				LCD_cmd(0x01);
 356:	81 e0       	ldi	r24, 0x01	; 1
 358:	0e 94 91 04 	call	0x922	; 0x922 <LCD_cmd>
						PORTB &= ~(1 << LED_Rojo);
					}

					state = 0; 
				}
				contador = 0;
 35c:	00 e0       	ldi	r16, 0x00	; 0
 35e:	10 e0       	ldi	r17, 0x00	; 0
 360:	1b cf       	rjmp	.-458    	; 0x198 <main+0x1c>
				for(int i=0; i<4 ; i++){
					pass[i] = "";
				}
				LCD_cmd(0x01);
			}
		} else if (state == 3){				 // Solicitar Contraseña para cambiar
 362:	83 30       	cpi	r24, 0x03	; 3
 364:	91 05       	cpc	r25, r1
 366:	09 f0       	breq	.+2      	; 0x36a <main+0x1ee>
 368:	a7 c0       	rjmp	.+334    	; 0x4b8 <__EEPROM_REGION_LENGTH__+0xb8>
			if(contador == 0){
 36a:	01 15       	cp	r16, r1
 36c:	11 05       	cpc	r17, r1
 36e:	89 f4       	brne	.+34     	; 0x392 <main+0x216>
				Enviar_Mensaje("Ingrese PASS", " ");
 370:	20 e6       	ldi	r18, 0x60	; 96
 372:	31 e0       	ldi	r19, 0x01	; 1
 374:	40 e0       	ldi	r20, 0x00	; 0
 376:	6e e3       	ldi	r22, 0x3E	; 62
 378:	71 e0       	ldi	r23, 0x01	; 1
 37a:	80 e0       	ldi	r24, 0x00	; 0
 37c:	0e 94 e7 03 	call	0x7ce	; 0x7ce <Enviar_Mensaje>
 380:	2f ef       	ldi	r18, 0xFF	; 255
 382:	89 e6       	ldi	r24, 0x69	; 105
 384:	98 e1       	ldi	r25, 0x18	; 24
 386:	21 50       	subi	r18, 0x01	; 1
 388:	80 40       	sbci	r24, 0x00	; 0
 38a:	90 40       	sbci	r25, 0x00	; 0
 38c:	e1 f7       	brne	.-8      	; 0x386 <main+0x20a>
 38e:	00 c0       	rjmp	.+0      	; 0x390 <main+0x214>
 390:	00 00       	nop
				_delay_ms(500);
			}
			comprobar_Teclado(&state, &caracter);
 392:	be 01       	movw	r22, r28
 394:	6f 5f       	subi	r22, 0xFF	; 255
 396:	7f 4f       	sbci	r23, 0xFF	; 255
 398:	80 e3       	ldi	r24, 0x30	; 48
 39a:	91 e0       	ldi	r25, 0x01	; 1
 39c:	0e 94 b4 02 	call	0x568	; 0x568 <comprobar_Teclado>
			if(caracter != '\0' && contador < 4){
 3a0:	89 81       	ldd	r24, Y+1	; 0x01
 3a2:	88 23       	and	r24, r24
 3a4:	f9 f0       	breq	.+62     	; 0x3e4 <main+0x268>
 3a6:	04 30       	cpi	r16, 0x04	; 4
 3a8:	11 05       	cpc	r17, r1
 3aa:	e4 f4       	brge	.+56     	; 0x3e4 <main+0x268>
				pass[contador] = '*';
 3ac:	f8 01       	movw	r30, r16
 3ae:	ea 5f       	subi	r30, 0xFA	; 250
 3b0:	fe 4f       	sbci	r31, 0xFE	; 254
 3b2:	9a e2       	ldi	r25, 0x2A	; 42
 3b4:	90 83       	st	Z, r25
				password[contador] = caracter; 
 3b6:	f8 01       	movw	r30, r16
 3b8:	e0 50       	subi	r30, 0x00	; 0
 3ba:	ff 4f       	sbci	r31, 0xFF	; 255
 3bc:	80 83       	st	Z, r24
				Enviar_Mensaje("Ingrese PASS", pass);
 3be:	26 e0       	ldi	r18, 0x06	; 6
 3c0:	31 e0       	ldi	r19, 0x01	; 1
 3c2:	40 e8       	ldi	r20, 0x80	; 128
 3c4:	6e e3       	ldi	r22, 0x3E	; 62
 3c6:	71 e0       	ldi	r23, 0x01	; 1
 3c8:	80 e0       	ldi	r24, 0x00	; 0
 3ca:	0e 94 e7 03 	call	0x7ce	; 0x7ce <Enviar_Mensaje>
 3ce:	2f ef       	ldi	r18, 0xFF	; 255
 3d0:	89 e6       	ldi	r24, 0x69	; 105
 3d2:	98 e1       	ldi	r25, 0x18	; 24
 3d4:	21 50       	subi	r18, 0x01	; 1
 3d6:	80 40       	sbci	r24, 0x00	; 0
 3d8:	90 40       	sbci	r25, 0x00	; 0
 3da:	e1 f7       	brne	.-8      	; 0x3d4 <main+0x258>
 3dc:	00 c0       	rjmp	.+0      	; 0x3de <main+0x262>
 3de:	00 00       	nop
				_delay_ms(500);
				contador++;
 3e0:	0f 5f       	subi	r16, 0xFF	; 255
 3e2:	1f 4f       	sbci	r17, 0xFF	; 255
			}
			if(contador == 4 || contador == 4){ 
 3e4:	04 30       	cpi	r16, 0x04	; 4
 3e6:	11 05       	cpc	r17, r1
 3e8:	09 f0       	breq	.+2      	; 0x3ec <main+0x270>
 3ea:	d6 ce       	rjmp	.-596    	; 0x198 <main+0x1c>
				pass[contador] = '\0'; 
 3ec:	f8 01       	movw	r30, r16
 3ee:	ea 5f       	subi	r30, 0xFA	; 250
 3f0:	fe 4f       	sbci	r31, 0xFE	; 254
 3f2:	10 82       	st	Z, r1
				if(verificar_Contrasena(password)){
 3f4:	80 e0       	ldi	r24, 0x00	; 0
 3f6:	91 e0       	ldi	r25, 0x01	; 1
 3f8:	0e 94 63 04 	call	0x8c6	; 0x8c6 <verificar_Contrasena>
 3fc:	89 2b       	or	r24, r25
 3fe:	d1 f0       	breq	.+52     	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
					Enviar_Mensaje("Ingrese nueva", "Contraseña");
 400:	22 e0       	ldi	r18, 0x02	; 2
 402:	31 e0       	ldi	r19, 0x01	; 1
 404:	40 e0       	ldi	r20, 0x00	; 0
 406:	62 e6       	ldi	r22, 0x62	; 98
 408:	71 e0       	ldi	r23, 0x01	; 1
 40a:	80 e0       	ldi	r24, 0x00	; 0
 40c:	0e 94 e7 03 	call	0x7ce	; 0x7ce <Enviar_Mensaje>
 410:	2f ef       	ldi	r18, 0xFF	; 255
 412:	89 e6       	ldi	r24, 0x69	; 105
 414:	98 e1       	ldi	r25, 0x18	; 24
 416:	21 50       	subi	r18, 0x01	; 1
 418:	80 40       	sbci	r24, 0x00	; 0
 41a:	90 40       	sbci	r25, 0x00	; 0
 41c:	e1 f7       	brne	.-8      	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
 41e:	00 c0       	rjmp	.+0      	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
 420:	00 00       	nop
					_delay_ms(500);
					contador = 0; 
					state = 4; 
 422:	84 e0       	ldi	r24, 0x04	; 4
 424:	90 e0       	ldi	r25, 0x00	; 0
 426:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <state+0x1>
 42a:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <state>
int main(void) {
	init_Pins();
	init_LCD();
	
	char caracter = '\0';
	int contador = 0;
 42e:	80 e0       	ldi	r24, 0x00	; 0
 430:	90 e0       	ldi	r25, 0x00	; 0
 432:	3c c0       	rjmp	.+120    	; 0x4ac <__EEPROM_REGION_LENGTH__+0xac>
					Enviar_Mensaje("Ingrese nueva", "Contraseña");
					_delay_ms(500);
					contador = 0; 
					state = 4; 
				} else {
					Enviar_Mensaje("Contraseña", "Incorrecta");
 434:	24 e5       	ldi	r18, 0x54	; 84
 436:	31 e0       	ldi	r19, 0x01	; 1
 438:	40 e0       	ldi	r20, 0x00	; 0
 43a:	62 e0       	ldi	r22, 0x02	; 2
 43c:	71 e0       	ldi	r23, 0x01	; 1
 43e:	80 e0       	ldi	r24, 0x00	; 0
 440:	0e 94 e7 03 	call	0x7ce	; 0x7ce <Enviar_Mensaje>
					intentos++;
 444:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <intentos>
 448:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <intentos+0x1>
 44c:	01 96       	adiw	r24, 0x01	; 1
 44e:	90 93 2f 01 	sts	0x012F, r25	; 0x80012f <intentos+0x1>
 452:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <intentos>
					if (intentos >= 3) {
 456:	03 97       	sbiw	r24, 0x03	; 3
 458:	6c f0       	brlt	.+26     	; 0x474 <__EEPROM_REGION_LENGTH__+0x74>
						PORTB |= (1 << LED_Rojo);
 45a:	85 b1       	in	r24, 0x05	; 5
 45c:	80 61       	ori	r24, 0x10	; 16
 45e:	85 b9       	out	0x05, r24	; 5
						activar_Alarma();
 460:	0e 94 57 05 	call	0xaae	; 0xaae <activar_Alarma>
						PORTB &= ~(1 << LED_Rojo);
 464:	85 b1       	in	r24, 0x05	; 5
 466:	8f 7e       	andi	r24, 0xEF	; 239
 468:	85 b9       	out	0x05, r24	; 5
						intentos = 0;
 46a:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <intentos+0x1>
 46e:	10 92 2e 01 	sts	0x012E, r1	; 0x80012e <intentos>
 472:	0f c0       	rjmp	.+30     	; 0x492 <__EEPROM_REGION_LENGTH__+0x92>
						} else {
						PORTB |= (1 << LED_Rojo);
 474:	85 b1       	in	r24, 0x05	; 5
 476:	80 61       	ori	r24, 0x10	; 16
 478:	85 b9       	out	0x05, r24	; 5
 47a:	2f ef       	ldi	r18, 0xFF	; 255
 47c:	8b e7       	ldi	r24, 0x7B	; 123
 47e:	92 e9       	ldi	r25, 0x92	; 146
 480:	21 50       	subi	r18, 0x01	; 1
 482:	80 40       	sbci	r24, 0x00	; 0
 484:	90 40       	sbci	r25, 0x00	; 0
 486:	e1 f7       	brne	.-8      	; 0x480 <__EEPROM_REGION_LENGTH__+0x80>
 488:	00 c0       	rjmp	.+0      	; 0x48a <__EEPROM_REGION_LENGTH__+0x8a>
 48a:	00 00       	nop
						_delay_ms(3000);
						PORTB &= ~(1 << LED_Rojo);
 48c:	85 b1       	in	r24, 0x05	; 5
 48e:	8f 7e       	andi	r24, 0xEF	; 239
 490:	85 b9       	out	0x05, r24	; 5
					}
					state = 0; 
 492:	10 92 31 01 	sts	0x0131, r1	; 0x800131 <state+0x1>
 496:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <state>
 49a:	c9 cf       	rjmp	.-110    	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
					contador = 0; 
				}
				for(int i=0; i<4 ; i++){
					pass[i] = "";
 49c:	fc 01       	movw	r30, r24
 49e:	ea 5f       	subi	r30, 0xFA	; 250
 4a0:	fe 4f       	sbci	r31, 0xFE	; 254
 4a2:	2f e5       	ldi	r18, 0x5F	; 95
 4a4:	31 e0       	ldi	r19, 0x01	; 1
 4a6:	40 e0       	ldi	r20, 0x00	; 0
 4a8:	20 83       	st	Z, r18
						PORTB &= ~(1 << LED_Rojo);
					}
					state = 0; 
					contador = 0; 
				}
				for(int i=0; i<4 ; i++){
 4aa:	01 96       	adiw	r24, 0x01	; 1
 4ac:	84 30       	cpi	r24, 0x04	; 4
 4ae:	91 05       	cpc	r25, r1
 4b0:	ac f3       	brlt	.-22     	; 0x49c <__EEPROM_REGION_LENGTH__+0x9c>
 4b2:	00 e0       	ldi	r16, 0x00	; 0
 4b4:	10 e0       	ldi	r17, 0x00	; 0
 4b6:	70 ce       	rjmp	.-800    	; 0x198 <main+0x1c>
					pass[i] = "";
				}
			}
			} else if (state == 4) { // Ingreso de nueva contraseña
 4b8:	04 97       	sbiw	r24, 0x04	; 4
 4ba:	09 f0       	breq	.+2      	; 0x4be <__EEPROM_REGION_LENGTH__+0xbe>
 4bc:	6d ce       	rjmp	.-806    	; 0x198 <main+0x1c>
			if(contador == 0){
 4be:	01 15       	cp	r16, r1
 4c0:	11 05       	cpc	r17, r1
 4c2:	89 f4       	brne	.+34     	; 0x4e6 <__EEPROM_REGION_LENGTH__+0xe6>
				Enviar_Mensaje("Ingrese nueva", "Contraseña");
 4c4:	22 e0       	ldi	r18, 0x02	; 2
 4c6:	31 e0       	ldi	r19, 0x01	; 1
 4c8:	40 e0       	ldi	r20, 0x00	; 0
 4ca:	62 e6       	ldi	r22, 0x62	; 98
 4cc:	71 e0       	ldi	r23, 0x01	; 1
 4ce:	80 e0       	ldi	r24, 0x00	; 0
 4d0:	0e 94 e7 03 	call	0x7ce	; 0x7ce <Enviar_Mensaje>
 4d4:	2f ef       	ldi	r18, 0xFF	; 255
 4d6:	89 e6       	ldi	r24, 0x69	; 105
 4d8:	98 e1       	ldi	r25, 0x18	; 24
 4da:	21 50       	subi	r18, 0x01	; 1
 4dc:	80 40       	sbci	r24, 0x00	; 0
 4de:	90 40       	sbci	r25, 0x00	; 0
 4e0:	e1 f7       	brne	.-8      	; 0x4da <__EEPROM_REGION_LENGTH__+0xda>
 4e2:	00 c0       	rjmp	.+0      	; 0x4e4 <__EEPROM_REGION_LENGTH__+0xe4>
 4e4:	00 00       	nop
				_delay_ms(500);
			}
			comprobar_Teclado(&state, &caracter);
 4e6:	be 01       	movw	r22, r28
 4e8:	6f 5f       	subi	r22, 0xFF	; 255
 4ea:	7f 4f       	sbci	r23, 0xFF	; 255
 4ec:	80 e3       	ldi	r24, 0x30	; 48
 4ee:	91 e0       	ldi	r25, 0x01	; 1
 4f0:	0e 94 b4 02 	call	0x568	; 0x568 <comprobar_Teclado>
			if(caracter != '\0' && contador < 4){
 4f4:	89 81       	ldd	r24, Y+1	; 0x01
 4f6:	88 23       	and	r24, r24
 4f8:	d1 f0       	breq	.+52     	; 0x52e <__EEPROM_REGION_LENGTH__+0x12e>
 4fa:	04 30       	cpi	r16, 0x04	; 4
 4fc:	11 05       	cpc	r17, r1
 4fe:	bc f4       	brge	.+46     	; 0x52e <__EEPROM_REGION_LENGTH__+0x12e>
				new_password[contador] = caracter; 
 500:	f8 01       	movw	r30, r16
 502:	e6 5f       	subi	r30, 0xF6	; 246
 504:	fe 4f       	sbci	r31, 0xFE	; 254
 506:	80 83       	st	Z, r24
				Enviar_Mensaje("Nueva PASS", new_password);
 508:	2a e0       	ldi	r18, 0x0A	; 10
 50a:	31 e0       	ldi	r19, 0x01	; 1
 50c:	40 e8       	ldi	r20, 0x80	; 128
 50e:	60 e7       	ldi	r22, 0x70	; 112
 510:	71 e0       	ldi	r23, 0x01	; 1
 512:	80 e0       	ldi	r24, 0x00	; 0
 514:	0e 94 e7 03 	call	0x7ce	; 0x7ce <Enviar_Mensaje>
 518:	2f ef       	ldi	r18, 0xFF	; 255
 51a:	89 e6       	ldi	r24, 0x69	; 105
 51c:	98 e1       	ldi	r25, 0x18	; 24
 51e:	21 50       	subi	r18, 0x01	; 1
 520:	80 40       	sbci	r24, 0x00	; 0
 522:	90 40       	sbci	r25, 0x00	; 0
 524:	e1 f7       	brne	.-8      	; 0x51e <__EEPROM_REGION_LENGTH__+0x11e>
 526:	00 c0       	rjmp	.+0      	; 0x528 <__EEPROM_REGION_LENGTH__+0x128>
 528:	00 00       	nop
				_delay_ms(500);
				contador++;
 52a:	0f 5f       	subi	r16, 0xFF	; 255
 52c:	1f 4f       	sbci	r17, 0xFF	; 255
			}
			if(contador == 4 || contador == 4){ 
 52e:	04 30       	cpi	r16, 0x04	; 4
 530:	11 05       	cpc	r17, r1
 532:	09 f0       	breq	.+2      	; 0x536 <__EEPROM_REGION_LENGTH__+0x136>
 534:	31 ce       	rjmp	.-926    	; 0x198 <main+0x1c>
				cambiar_Contrasena(new_password);
 536:	8a e0       	ldi	r24, 0x0A	; 10
 538:	91 e0       	ldi	r25, 0x01	; 1
 53a:	0e 94 2e 04 	call	0x85c	; 0x85c <cambiar_Contrasena>
				state = 0; 
 53e:	10 92 31 01 	sts	0x0131, r1	; 0x800131 <state+0x1>
 542:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <state>
				contador = 0;
				for(int i=0; i<4 ; i++){
 546:	80 e0       	ldi	r24, 0x00	; 0
 548:	90 e0       	ldi	r25, 0x00	; 0
 54a:	08 c0       	rjmp	.+16     	; 0x55c <__EEPROM_REGION_LENGTH__+0x15c>
					new_password[i] = "";
 54c:	fc 01       	movw	r30, r24
 54e:	e6 5f       	subi	r30, 0xF6	; 246
 550:	fe 4f       	sbci	r31, 0xFE	; 254
 552:	2f e5       	ldi	r18, 0x5F	; 95
 554:	31 e0       	ldi	r19, 0x01	; 1
 556:	40 e0       	ldi	r20, 0x00	; 0
 558:	20 83       	st	Z, r18
			}
			if(contador == 4 || contador == 4){ 
				cambiar_Contrasena(new_password);
				state = 0; 
				contador = 0;
				for(int i=0; i<4 ; i++){
 55a:	01 96       	adiw	r24, 0x01	; 1
 55c:	84 30       	cpi	r24, 0x04	; 4
 55e:	91 05       	cpc	r25, r1
 560:	ac f3       	brlt	.-22     	; 0x54c <__EEPROM_REGION_LENGTH__+0x14c>
				contador++;
			}
			if(contador == 4 || contador == 4){ 
				cambiar_Contrasena(new_password);
				state = 0; 
				contador = 0;
 562:	00 e0       	ldi	r16, 0x00	; 0
 564:	10 e0       	ldi	r17, 0x00	; 0
 566:	18 ce       	rjmp	.-976    	; 0x198 <main+0x1c>

Disassembly of section .text.__dummy_fini:

00000b46 <_fini>:
 b46:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

00000b48 <__funcs_on_exit>:
 b48:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

00000b4a <__simulator_exit>:
 b4a:	08 95       	ret

Disassembly of section .text.exit:

00000aea <exit>:
 aea:	ec 01       	movw	r28, r24
 aec:	0e 94 a4 05 	call	0xb48	; 0xb48 <__funcs_on_exit>
 af0:	0e 94 a3 05 	call	0xb46	; 0xb46 <_fini>
 af4:	ce 01       	movw	r24, r28
 af6:	0e 94 a5 05 	call	0xb4a	; 0xb4a <__simulator_exit>
 afa:	ce 01       	movw	r24, r28
 afc:	0e 94 a1 05 	call	0xb42	; 0xb42 <_Exit>

Disassembly of section .text.strcmp:

000009b6 <strcmp>:
 9b6:	cf 92       	push	r12
 9b8:	df 92       	push	r13
 9ba:	ef 92       	push	r14
 9bc:	6b 01       	movw	r12, r22
 9be:	e8 2e       	mov	r14, r24
 9c0:	f6 01       	movw	r30, r12
 9c2:	84 91       	lpm	r24, Z
 9c4:	e7 fc       	sbrc	r14, 7
 9c6:	80 81       	ld	r24, Z
 9c8:	f9 01       	movw	r30, r18
 9ca:	54 91       	lpm	r21, Z
 9cc:	47 fd       	sbrc	r20, 7
 9ce:	50 81       	ld	r21, Z
 9d0:	85 13       	cpse	r24, r21
 9d2:	0b c0       	rjmp	.+22     	; 0x9ea <strcmp+0x34>
 9d4:	88 23       	and	r24, r24
 9d6:	41 f0       	breq	.+16     	; 0x9e8 <strcmp+0x32>
 9d8:	8f ef       	ldi	r24, 0xFF	; 255
 9da:	c8 1a       	sub	r12, r24
 9dc:	d8 0a       	sbc	r13, r24
 9de:	e8 0a       	sbc	r14, r24
 9e0:	2f 5f       	subi	r18, 0xFF	; 255
 9e2:	3f 4f       	sbci	r19, 0xFF	; 255
 9e4:	4f 4f       	sbci	r20, 0xFF	; 255
 9e6:	ec cf       	rjmp	.-40     	; 0x9c0 <strcmp+0xa>
 9e8:	58 2f       	mov	r21, r24
 9ea:	90 e0       	ldi	r25, 0x00	; 0
 9ec:	85 1b       	sub	r24, r21
 9ee:	91 09       	sbc	r25, r1
 9f0:	ef 90       	pop	r14
 9f2:	df 90       	pop	r13
 9f4:	cf 90       	pop	r12
 9f6:	08 95       	ret

Disassembly of section .text.strlen:

00000a5e <strlen>:
 a5e:	cf 92       	push	r12
 a60:	df 92       	push	r13
 a62:	ef 92       	push	r14
 a64:	6b 01       	movw	r12, r22
 a66:	e8 2e       	mov	r14, r24
 a68:	a8 2f       	mov	r26, r24
 a6a:	cb 01       	movw	r24, r22
 a6c:	fc 01       	movw	r30, r24
 a6e:	24 91       	lpm	r18, Z
 a70:	a7 fd       	sbrc	r26, 7
 a72:	20 81       	ld	r18, Z
 a74:	22 23       	and	r18, r18
 a76:	19 f0       	breq	.+6      	; 0xa7e <strlen+0x20>
 a78:	01 96       	adiw	r24, 0x01	; 1
 a7a:	a1 1d       	adc	r26, r1
 a7c:	f7 cf       	rjmp	.-18     	; 0xa6c <strlen+0xe>
 a7e:	8c 19       	sub	r24, r12
 a80:	9d 09       	sbc	r25, r13
 a82:	ef 90       	pop	r14
 a84:	df 90       	pop	r13
 a86:	cf 90       	pop	r12
 a88:	08 95       	ret

Disassembly of section .text._Exit:

00000b42 <_Exit>:
 b42:	0e 94 65 00 	call	0xca	; 0xca <_exit>

Disassembly of section .text.avrlibc:

00000a8a <eeprom_read_block>:
 a8a:	ba 01       	movw	r22, r20
 a8c:	a9 01       	movw	r20, r18
 a8e:	dc 01       	movw	r26, r24
 a90:	cb 01       	movw	r24, r22

00000a92 <eeprom_read_blraw>:
 a92:	fc 01       	movw	r30, r24
 a94:	f9 99       	sbic	0x1f, 1	; 31
 a96:	fe cf       	rjmp	.-4      	; 0xa94 <eeprom_read_blraw+0x2>
 a98:	06 c0       	rjmp	.+12     	; 0xaa6 <eeprom_read_blraw+0x14>
 a9a:	f2 bd       	out	0x22, r31	; 34
 a9c:	e1 bd       	out	0x21, r30	; 33
 a9e:	f8 9a       	sbi	0x1f, 0	; 31
 aa0:	31 96       	adiw	r30, 0x01	; 1
 aa2:	00 b4       	in	r0, 0x20	; 32
 aa4:	0d 92       	st	X+, r0
 aa6:	41 50       	subi	r20, 0x01	; 1
 aa8:	50 40       	sbci	r21, 0x00	; 0
 aaa:	b8 f7       	brcc	.-18     	; 0xa9a <eeprom_read_blraw+0x8>
 aac:	08 95       	ret

Disassembly of section .text.avrlibc:

000009f8 <eeprom_write_block>:
 9f8:	cf 92       	push	r12
 9fa:	df 92       	push	r13
 9fc:	ef 92       	push	r14
 9fe:	6b 01       	movw	r12, r22
 a00:	e8 2e       	mov	r14, r24
 a02:	ca 01       	movw	r24, r20
 a04:	42 2f       	mov	r20, r18
 a06:	73 2f       	mov	r23, r19
 a08:	0b c0       	rjmp	.+22     	; 0xa20 <eeprom_write_block+0x28>
 a0a:	f6 01       	movw	r30, r12
 a0c:	5e 2d       	mov	r21, r14
 a0e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__xload_1>
 a12:	26 2f       	mov	r18, r22
 a14:	0e 94 68 05 	call	0xad0	; 0xad0 <eeprom_write_r18>
 a18:	3f ef       	ldi	r19, 0xFF	; 255
 a1a:	c3 1a       	sub	r12, r19
 a1c:	d3 0a       	sbc	r13, r19
 a1e:	e3 0a       	sbc	r14, r19
 a20:	41 50       	subi	r20, 0x01	; 1
 a22:	70 40       	sbci	r23, 0x00	; 0
 a24:	90 f7       	brcc	.-28     	; 0xa0a <eeprom_write_block+0x12>
 a26:	ef 90       	pop	r14
 a28:	df 90       	pop	r13
 a2a:	cf 90       	pop	r12
 a2c:	08 95       	ret

Disassembly of section .text.avrlibc:

00000ace <eeprom_write_byte>:
 ace:	26 2f       	mov	r18, r22

00000ad0 <eeprom_write_r18>:
 ad0:	f9 99       	sbic	0x1f, 1	; 31
 ad2:	fe cf       	rjmp	.-4      	; 0xad0 <eeprom_write_r18>
 ad4:	1f ba       	out	0x1f, r1	; 31
 ad6:	92 bd       	out	0x22, r25	; 34
 ad8:	81 bd       	out	0x21, r24	; 33
 ada:	20 bd       	out	0x20, r18	; 32
 adc:	0f b6       	in	r0, 0x3f	; 63
 ade:	f8 94       	cli
 ae0:	fa 9a       	sbi	0x1f, 2	; 31
 ae2:	f9 9a       	sbi	0x1f, 1	; 31
 ae4:	0f be       	out	0x3f, r0	; 63
 ae6:	01 96       	adiw	r24, 0x01	; 1
 ae8:	08 95       	ret

Disassembly of section .text.libgcc:

00000b34 <__xload_1>:
 b34:	57 fd       	sbrc	r21, 7
 b36:	60 81       	ld	r22, Z
 b38:	57 ff       	sbrs	r21, 7
 b3a:	64 91       	lpm	r22, Z
 b3c:	08 95       	ret
