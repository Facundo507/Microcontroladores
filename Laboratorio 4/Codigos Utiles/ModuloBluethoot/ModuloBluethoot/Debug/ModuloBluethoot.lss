
ModuloBluethoot.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000216  2**0
                  ALLOC, LOAD, DATA
  1 .text         00000080  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  00000216  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000000e  00000000  00000000  00000245  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  00000253  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000bb7  00000000  00000000  000002a3  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000743  00000000  00000000  00000e5a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003a7  00000000  00000000  0000159d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000084  00000000  00000000  00001944  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000208  00000000  00000000  000019c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001ed  00000000  00000000  00001bd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000058  00000000  00000000  00001dbd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  00000194  00000194  00000208  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001e18  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.initSerial 0000000e  0000016a  0000016a  000001de  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.USART_Init 00000018  0000013c  0000013c  000001b0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.USART_Transmit 0000000e  00000178  00000178  000001ec  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.USART_Receive 0000000e  00000186  00000186  000001fa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.sendByteGPIO 00000052  00000080  00000080  000000f4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.receiveByteGPIO 0000003e  000000d2  000000d2  00000146  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.main    0000002c  00000110  00000110  00000184  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.__dummy_fini 00000002  0000019c  0000019c  00000210  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.__dummy_funcs_on_exit 00000002  0000019e  0000019e  00000212  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.__dummy_simulator_exit 00000002  000001a0  000001a0  00000214  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text.exit    00000016  00000154  00000154  000001c8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text._Exit   00000004  00000198  00000198  0000020c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 ca 00 	jmp	0x194	; 0x194 <__bad_interrupt>
   8:	0c 94 ca 00 	jmp	0x194	; 0x194 <__bad_interrupt>
   c:	0c 94 ca 00 	jmp	0x194	; 0x194 <__bad_interrupt>
  10:	0c 94 ca 00 	jmp	0x194	; 0x194 <__bad_interrupt>
  14:	0c 94 ca 00 	jmp	0x194	; 0x194 <__bad_interrupt>
  18:	0c 94 ca 00 	jmp	0x194	; 0x194 <__bad_interrupt>
  1c:	0c 94 ca 00 	jmp	0x194	; 0x194 <__bad_interrupt>
  20:	0c 94 ca 00 	jmp	0x194	; 0x194 <__bad_interrupt>
  24:	0c 94 ca 00 	jmp	0x194	; 0x194 <__bad_interrupt>
  28:	0c 94 ca 00 	jmp	0x194	; 0x194 <__bad_interrupt>
  2c:	0c 94 ca 00 	jmp	0x194	; 0x194 <__bad_interrupt>
  30:	0c 94 ca 00 	jmp	0x194	; 0x194 <__bad_interrupt>
  34:	0c 94 ca 00 	jmp	0x194	; 0x194 <__bad_interrupt>
  38:	0c 94 ca 00 	jmp	0x194	; 0x194 <__bad_interrupt>
  3c:	0c 94 ca 00 	jmp	0x194	; 0x194 <__bad_interrupt>
  40:	0c 94 ca 00 	jmp	0x194	; 0x194 <__bad_interrupt>
  44:	0c 94 ca 00 	jmp	0x194	; 0x194 <__bad_interrupt>
  48:	0c 94 ca 00 	jmp	0x194	; 0x194 <__bad_interrupt>
  4c:	0c 94 ca 00 	jmp	0x194	; 0x194 <__bad_interrupt>
  50:	0c 94 ca 00 	jmp	0x194	; 0x194 <__bad_interrupt>
  54:	0c 94 ca 00 	jmp	0x194	; 0x194 <__bad_interrupt>
  58:	0c 94 ca 00 	jmp	0x194	; 0x194 <__bad_interrupt>
  5c:	0c 94 ca 00 	jmp	0x194	; 0x194 <__bad_interrupt>
  60:	0c 94 ca 00 	jmp	0x194	; 0x194 <__bad_interrupt>
  64:	0c 94 ca 00 	jmp	0x194	; 0x194 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 88 00 	call	0x110	; 0x110 <main>
  78:	0c 94 aa 00 	jmp	0x154	; 0x154 <exit>

0000007c <_exit>:
  7c:	f8 94       	cli

0000007e <__stop_program>:
  7e:	ff cf       	rjmp	.-2      	; 0x7e <__stop_program>

Disassembly of section .text:

00000194 <__bad_interrupt>:
 194:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.initSerial:

0000016a <initSerial>:

#define d_baud 27

void initSerial() {
	// Configura PB0 como salida (TX)
	DDRB |= (1 << TX_PIN);
 16a:	84 b1       	in	r24, 0x04	; 4
 16c:	81 60       	ori	r24, 0x01	; 1
 16e:	84 b9       	out	0x04, r24	; 4
	// Configura PB1 como entrada (RX)
	DDRB &= ~(1 << RX_PIN);
 170:	84 b1       	in	r24, 0x04	; 4
 172:	8d 7f       	andi	r24, 0xFD	; 253
 174:	84 b9       	out	0x04, r24	; 4
 176:	08 95       	ret

Disassembly of section .text.USART_Init:

0000013c <USART_Init>:
}

void USART_Init() {
	UBRR0H = (MY_UBRR >> 8);
 13c:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = MY_UBRR;
 140:	87 e6       	ldi	r24, 0x67	; 103
 142:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);
 146:	88 e1       	ldi	r24, 0x18	; 24
 148:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
 14c:	86 e0       	ldi	r24, 0x06	; 6
 14e:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 152:	08 95       	ret

Disassembly of section .text.USART_Transmit:

00000178 <USART_Transmit>:
}

void USART_Transmit(unsigned char data) {
	while (!(UCSR0A & (1 << UDRE0)));
 178:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 17c:	95 ff       	sbrs	r25, 5
 17e:	fc cf       	rjmp	.-8      	; 0x178 <USART_Transmit>
	UDR0 = data;
 180:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 184:	08 95       	ret

Disassembly of section .text.USART_Receive:

00000186 <USART_Receive>:
}

unsigned char USART_Receive(void) {
	while (!(UCSR0A & (1 << RXC0)));
 186:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 18a:	88 23       	and	r24, r24
 18c:	e4 f7       	brge	.-8      	; 0x186 <USART_Receive>
	return UDR0;
 18e:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
}
 192:	08 95       	ret

Disassembly of section .text.sendByteGPIO:

00000080 <sendByteGPIO>:

void sendByteGPIO(uint8_t data) {
	// Enviar un byte a través de PB0 (TX)
	PORTB &= ~(1 << TX_PIN); // Start bit
  80:	95 b1       	in	r25, 0x05	; 5
  82:	9e 7f       	andi	r25, 0xFE	; 254
  84:	95 b9       	out	0x05, r25	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  86:	90 e9       	ldi	r25, 0x90	; 144
  88:	9a 95       	dec	r25
  8a:	f1 f7       	brne	.-4      	; 0x88 <sendByteGPIO+0x8>
	_delay_us(d_baud); // Esperar

	for (int i = 0; i < 8; i++) {
  8c:	20 e0       	ldi	r18, 0x00	; 0
  8e:	30 e0       	ldi	r19, 0x00	; 0
  90:	16 c0       	rjmp	.+44     	; 0xbe <sendByteGPIO+0x3e>
		if (data & (1 << i)) {
  92:	48 2f       	mov	r20, r24
  94:	50 e0       	ldi	r21, 0x00	; 0
  96:	02 2e       	mov	r0, r18
  98:	02 c0       	rjmp	.+4      	; 0x9e <sendByteGPIO+0x1e>
  9a:	55 95       	asr	r21
  9c:	47 95       	ror	r20
  9e:	0a 94       	dec	r0
  a0:	e2 f7       	brpl	.-8      	; 0x9a <sendByteGPIO+0x1a>
  a2:	40 ff       	sbrs	r20, 0
  a4:	04 c0       	rjmp	.+8      	; 0xae <sendByteGPIO+0x2e>
			PORTB |= (1 << TX_PIN); // Enviar bit alto
  a6:	95 b1       	in	r25, 0x05	; 5
  a8:	91 60       	ori	r25, 0x01	; 1
  aa:	95 b9       	out	0x05, r25	; 5
  ac:	03 c0       	rjmp	.+6      	; 0xb4 <sendByteGPIO+0x34>
			} else {
			PORTB &= ~(1 << TX_PIN); // Enviar bit bajo
  ae:	95 b1       	in	r25, 0x05	; 5
  b0:	9e 7f       	andi	r25, 0xFE	; 254
  b2:	95 b9       	out	0x05, r25	; 5
  b4:	90 e9       	ldi	r25, 0x90	; 144
  b6:	9a 95       	dec	r25
  b8:	f1 f7       	brne	.-4      	; 0xb6 <sendByteGPIO+0x36>
void sendByteGPIO(uint8_t data) {
	// Enviar un byte a través de PB0 (TX)
	PORTB &= ~(1 << TX_PIN); // Start bit
	_delay_us(d_baud); // Esperar

	for (int i = 0; i < 8; i++) {
  ba:	2f 5f       	subi	r18, 0xFF	; 255
  bc:	3f 4f       	sbci	r19, 0xFF	; 255
  be:	28 30       	cpi	r18, 0x08	; 8
  c0:	31 05       	cpc	r19, r1
  c2:	3c f3       	brlt	.-50     	; 0x92 <sendByteGPIO+0x12>
			PORTB &= ~(1 << TX_PIN); // Enviar bit bajo
		}
		_delay_us(d_baud); // Esperar por el siguiente bit
	}

	PORTB |= (1 << TX_PIN); // Stop bit
  c4:	85 b1       	in	r24, 0x05	; 5
  c6:	81 60       	ori	r24, 0x01	; 1
  c8:	85 b9       	out	0x05, r24	; 5
  ca:	80 e9       	ldi	r24, 0x90	; 144
  cc:	8a 95       	dec	r24
  ce:	f1 f7       	brne	.-4      	; 0xcc <sendByteGPIO+0x4c>
  d0:	08 95       	ret

Disassembly of section .text.receiveByteGPIO:

000000d2 <receiveByteGPIO>:

uint8_t receiveByteGPIO() {
	uint8_t data = 0;

	// Esperar a que el pin RX (PB1) sea bajo (start bit)
	while (PINB & (1 << RX_PIN));
  d2:	19 99       	sbic	0x03, 1	; 3
  d4:	fe cf       	rjmp	.-4      	; 0xd2 <receiveByteGPIO>
  d6:	80 e9       	ldi	r24, 0x90	; 144
  d8:	8a 95       	dec	r24
  da:	f1 f7       	brne	.-4      	; 0xd8 <receiveByteGPIO+0x6>
	_delay_us(d_baud); // Esperar a que el primer bit se estabilice

	for (int i = 0; i < 8; i++) {
  dc:	20 e0       	ldi	r18, 0x00	; 0
  de:	30 e0       	ldi	r19, 0x00	; 0
	PORTB |= (1 << TX_PIN); // Stop bit
	_delay_us(d_baud); // Esperar antes de enviar el siguiente byte
}

uint8_t receiveByteGPIO() {
	uint8_t data = 0;
  e0:	80 e0       	ldi	r24, 0x00	; 0

	// Esperar a que el pin RX (PB1) sea bajo (start bit)
	while (PINB & (1 << RX_PIN));
	_delay_us(d_baud); // Esperar a que el primer bit se estabilice

	for (int i = 0; i < 8; i++) {
  e2:	10 c0       	rjmp	.+32     	; 0x104 <receiveByteGPIO+0x32>
		if (PINB & (1 << RX_PIN)) {
  e4:	19 9b       	sbis	0x03, 1	; 3
  e6:	09 c0       	rjmp	.+18     	; 0xfa <receiveByteGPIO+0x28>
			data |= (1 << i); // Leer bit
  e8:	41 e0       	ldi	r20, 0x01	; 1
  ea:	50 e0       	ldi	r21, 0x00	; 0
  ec:	02 2e       	mov	r0, r18
  ee:	02 c0       	rjmp	.+4      	; 0xf4 <receiveByteGPIO+0x22>
  f0:	44 0f       	add	r20, r20
  f2:	55 1f       	adc	r21, r21
  f4:	0a 94       	dec	r0
  f6:	e2 f7       	brpl	.-8      	; 0xf0 <receiveByteGPIO+0x1e>
  f8:	84 2b       	or	r24, r20
  fa:	90 e9       	ldi	r25, 0x90	; 144
  fc:	9a 95       	dec	r25
  fe:	f1 f7       	brne	.-4      	; 0xfc <receiveByteGPIO+0x2a>

	// Esperar a que el pin RX (PB1) sea bajo (start bit)
	while (PINB & (1 << RX_PIN));
	_delay_us(d_baud); // Esperar a que el primer bit se estabilice

	for (int i = 0; i < 8; i++) {
 100:	2f 5f       	subi	r18, 0xFF	; 255
 102:	3f 4f       	sbci	r19, 0xFF	; 255
 104:	28 30       	cpi	r18, 0x08	; 8
 106:	31 05       	cpc	r19, r1
 108:	6c f3       	brlt	.-38     	; 0xe4 <receiveByteGPIO+0x12>
		}
		_delay_us(d_baud); // Esperar por el siguiente bit
	}

	// Esperar a que el pin RX sea alto (stop bit)
	while (!(PINB & (1 << RX_PIN)));
 10a:	19 9b       	sbis	0x03, 1	; 3
 10c:	fe cf       	rjmp	.-4      	; 0x10a <receiveByteGPIO+0x38>

	return data;
}
 10e:	08 95       	ret

Disassembly of section .text.main:

00000110 <main>:

int main() {
	initSerial();
 110:	0e 94 b5 00 	call	0x16a	; 0x16a <initSerial>
	USART_Init();
 114:	0e 94 9e 00 	call	0x13c	; 0x13c <USART_Init>
	USART_Transmit('H');
 118:	88 e4       	ldi	r24, 0x48	; 72
 11a:	0e 94 bc 00 	call	0x178	; 0x178 <USART_Transmit>
	while (1) {
		if (!(PINB & (1 << RX_PIN))) {
 11e:	19 99       	sbic	0x03, 1	; 3
 120:	04 c0       	rjmp	.+8      	; 0x12a <main+0x1a>
			uint8_t receivedGPIO = receiveByteGPIO();
 122:	0e 94 69 00 	call	0xd2	; 0xd2 <receiveByteGPIO>
			USART_Transmit(receivedGPIO); // Enviar el dato recibido por GPIO
 126:	0e 94 bc 00 	call	0x178	; 0x178 <USART_Transmit>
		}

		if (UCSR0A & (1 << RXC0)) {
 12a:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 12e:	88 23       	and	r24, r24
 130:	b4 f7       	brge	.-20     	; 0x11e <main+0xe>
			uint8_t receivedUSART = USART_Receive();
 132:	0e 94 c3 00 	call	0x186	; 0x186 <USART_Receive>
			sendByteGPIO(receivedUSART); // Enviar el dato recibido por USART
 136:	0e 94 40 00 	call	0x80	; 0x80 <__data_load_end>
 13a:	f1 cf       	rjmp	.-30     	; 0x11e <main+0xe>

Disassembly of section .text.__dummy_fini:

0000019c <_fini>:
 19c:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

0000019e <__funcs_on_exit>:
 19e:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

000001a0 <__simulator_exit>:
 1a0:	08 95       	ret

Disassembly of section .text.exit:

00000154 <exit>:
 154:	ec 01       	movw	r28, r24
 156:	0e 94 cf 00 	call	0x19e	; 0x19e <__funcs_on_exit>
 15a:	0e 94 ce 00 	call	0x19c	; 0x19c <_fini>
 15e:	ce 01       	movw	r24, r28
 160:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <__simulator_exit>
 164:	ce 01       	movw	r24, r28
 166:	0e 94 cc 00 	call	0x198	; 0x198 <_Exit>

Disassembly of section .text._Exit:

00000198 <_Exit>:
 198:	0e 94 3e 00 	call	0x7c	; 0x7c <_exit>
