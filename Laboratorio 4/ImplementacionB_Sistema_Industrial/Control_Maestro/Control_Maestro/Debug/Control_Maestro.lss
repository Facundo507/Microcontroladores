
Control_Maestro.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000234  2**0
                  ALLOC, LOAD, DATA
  1 .text         00000080  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  00000234  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000000e  00000000  00000000  00000263  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  00000271  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000c01  00000000  00000000  000002c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000743  00000000  00000000  00000ec2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003a7  00000000  00000000  00001605  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000084  00000000  00000000  000019ac  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000208  00000000  00000000  00001a30  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001ed  00000000  00000000  00001c38  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000058  00000000  00000000  00001e25  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  000001b2  000001b2  00000226  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001e80  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.initSerial 0000000e  00000188  00000188  000001fc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.USART_Init 00000018  0000015a  0000015a  000001ce  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.USART_Transmit 0000000e  00000196  00000196  0000020a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.USART_Receive 0000000e  000001a4  000001a4  00000218  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.sendByteGPIO 00000064  00000080  00000080  000000f4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.receiveByteGPIO 0000004a  000000e4  000000e4  00000158  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.main    0000002c  0000012e  0000012e  000001a2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.__dummy_fini 00000002  000001ba  000001ba  0000022e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.__dummy_funcs_on_exit 00000002  000001bc  000001bc  00000230  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.__dummy_simulator_exit 00000002  000001be  000001be  00000232  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text.exit    00000016  00000172  00000172  000001e6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text._Exit   00000004  000001b6  000001b6  0000022a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
   8:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
   c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
  10:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
  14:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
  18:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
  1c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
  20:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
  24:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
  28:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
  2c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
  30:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
  34:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
  38:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
  3c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
  40:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
  44:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
  48:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
  4c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
  50:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
  54:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
  58:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
  5c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
  60:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
  64:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 97 00 	call	0x12e	; 0x12e <main>
  78:	0c 94 b9 00 	jmp	0x172	; 0x172 <exit>

0000007c <_exit>:
  7c:	f8 94       	cli

0000007e <__stop_program>:
  7e:	ff cf       	rjmp	.-2      	; 0x7e <__stop_program>

Disassembly of section .text:

000001b2 <__bad_interrupt>:
 1b2:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.initSerial:

00000188 <initSerial>:

#define d_baud 104

void initSerial() {
	// Configura PB0 como salida (TX)
	DDRB |= (1 << TX_PIN);
 188:	84 b1       	in	r24, 0x04	; 4
 18a:	81 60       	ori	r24, 0x01	; 1
 18c:	84 b9       	out	0x04, r24	; 4
	// Configura PB1 como entrada (RX)
	DDRB &= ~(1 << RX_PIN);
 18e:	84 b1       	in	r24, 0x04	; 4
 190:	8d 7f       	andi	r24, 0xFD	; 253
 192:	84 b9       	out	0x04, r24	; 4
 194:	08 95       	ret

Disassembly of section .text.USART_Init:

0000015a <USART_Init>:
}

void USART_Init() {
	UBRR0H = (MY_UBRR >> 8);
 15a:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = MY_UBRR;
 15e:	87 e6       	ldi	r24, 0x67	; 103
 160:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);
 164:	88 e1       	ldi	r24, 0x18	; 24
 166:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
 16a:	86 e0       	ldi	r24, 0x06	; 6
 16c:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 170:	08 95       	ret

Disassembly of section .text.USART_Transmit:

00000196 <USART_Transmit>:
}

void USART_Transmit(unsigned char data) {
	while (!(UCSR0A & (1 << UDRE0)));
 196:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 19a:	95 ff       	sbrs	r25, 5
 19c:	fc cf       	rjmp	.-8      	; 0x196 <USART_Transmit>
	UDR0 = data;
 19e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 1a2:	08 95       	ret

Disassembly of section .text.USART_Receive:

000001a4 <USART_Receive>:
}

unsigned char USART_Receive(void) {
	while (!(UCSR0A & (1 << RXC0)));
 1a4:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 1a8:	88 23       	and	r24, r24
 1aa:	e4 f7       	brge	.-8      	; 0x1a4 <USART_Receive>
	return UDR0;
 1ac:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
}
 1b0:	08 95       	ret

Disassembly of section .text.sendByteGPIO:

00000080 <sendByteGPIO>:

void sendByteGPIO(uint8_t data) {
	// Enviar un byte a través de PB0 (TX)
	PORTB &= ~(1 << TX_PIN); // Start bit
  80:	95 b1       	in	r25, 0x05	; 5
  82:	9e 7f       	andi	r25, 0xFE	; 254
  84:	95 b9       	out	0x05, r25	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  86:	ef e9       	ldi	r30, 0x9F	; 159
  88:	f1 e0       	ldi	r31, 0x01	; 1
  8a:	31 97       	sbiw	r30, 0x01	; 1
  8c:	f1 f7       	brne	.-4      	; 0x8a <sendByteGPIO+0xa>
  8e:	00 c0       	rjmp	.+0      	; 0x90 <sendByteGPIO+0x10>
  90:	00 00       	nop
	_delay_us(d_baud); // Esperar

	for (int i = 0; i < 8; i++) {
  92:	20 e0       	ldi	r18, 0x00	; 0
  94:	30 e0       	ldi	r19, 0x00	; 0
  96:	19 c0       	rjmp	.+50     	; 0xca <sendByteGPIO+0x4a>
		if (data & (1 << i)) {
  98:	48 2f       	mov	r20, r24
  9a:	50 e0       	ldi	r21, 0x00	; 0
  9c:	02 2e       	mov	r0, r18
  9e:	02 c0       	rjmp	.+4      	; 0xa4 <sendByteGPIO+0x24>
  a0:	55 95       	asr	r21
  a2:	47 95       	ror	r20
  a4:	0a 94       	dec	r0
  a6:	e2 f7       	brpl	.-8      	; 0xa0 <sendByteGPIO+0x20>
  a8:	40 ff       	sbrs	r20, 0
  aa:	04 c0       	rjmp	.+8      	; 0xb4 <sendByteGPIO+0x34>
			PORTB |= (1 << TX_PIN); // Enviar bit alto
  ac:	95 b1       	in	r25, 0x05	; 5
  ae:	91 60       	ori	r25, 0x01	; 1
  b0:	95 b9       	out	0x05, r25	; 5
  b2:	03 c0       	rjmp	.+6      	; 0xba <sendByteGPIO+0x3a>
			} else {
			PORTB &= ~(1 << TX_PIN); // Enviar bit bajo
  b4:	95 b1       	in	r25, 0x05	; 5
  b6:	9e 7f       	andi	r25, 0xFE	; 254
  b8:	95 b9       	out	0x05, r25	; 5
  ba:	ef e9       	ldi	r30, 0x9F	; 159
  bc:	f1 e0       	ldi	r31, 0x01	; 1
  be:	31 97       	sbiw	r30, 0x01	; 1
  c0:	f1 f7       	brne	.-4      	; 0xbe <sendByteGPIO+0x3e>
  c2:	00 c0       	rjmp	.+0      	; 0xc4 <sendByteGPIO+0x44>
  c4:	00 00       	nop
void sendByteGPIO(uint8_t data) {
	// Enviar un byte a través de PB0 (TX)
	PORTB &= ~(1 << TX_PIN); // Start bit
	_delay_us(d_baud); // Esperar

	for (int i = 0; i < 8; i++) {
  c6:	2f 5f       	subi	r18, 0xFF	; 255
  c8:	3f 4f       	sbci	r19, 0xFF	; 255
  ca:	28 30       	cpi	r18, 0x08	; 8
  cc:	31 05       	cpc	r19, r1
  ce:	24 f3       	brlt	.-56     	; 0x98 <sendByteGPIO+0x18>
			PORTB &= ~(1 << TX_PIN); // Enviar bit bajo
		}
		_delay_us(d_baud); // Esperar por el siguiente bit
	}

	PORTB |= (1 << TX_PIN); // Stop bit
  d0:	85 b1       	in	r24, 0x05	; 5
  d2:	81 60       	ori	r24, 0x01	; 1
  d4:	85 b9       	out	0x05, r24	; 5
  d6:	8f e9       	ldi	r24, 0x9F	; 159
  d8:	91 e0       	ldi	r25, 0x01	; 1
  da:	01 97       	sbiw	r24, 0x01	; 1
  dc:	f1 f7       	brne	.-4      	; 0xda <sendByteGPIO+0x5a>
  de:	00 c0       	rjmp	.+0      	; 0xe0 <sendByteGPIO+0x60>
  e0:	00 00       	nop
  e2:	08 95       	ret

Disassembly of section .text.receiveByteGPIO:

000000e4 <receiveByteGPIO>:

uint8_t receiveByteGPIO() {
	uint8_t data = 0;

	// Esperar a que el pin RX (PB1) sea bajo (start bit)
	while (PINB & (1 << RX_PIN));
  e4:	19 99       	sbic	0x03, 1	; 3
  e6:	fe cf       	rjmp	.-4      	; 0xe4 <receiveByteGPIO>
  e8:	8f e9       	ldi	r24, 0x9F	; 159
  ea:	91 e0       	ldi	r25, 0x01	; 1
  ec:	01 97       	sbiw	r24, 0x01	; 1
  ee:	f1 f7       	brne	.-4      	; 0xec <receiveByteGPIO+0x8>
  f0:	00 c0       	rjmp	.+0      	; 0xf2 <receiveByteGPIO+0xe>
  f2:	00 00       	nop
	_delay_us(d_baud); // Esperar a que el primer bit se estabilice

	for (int i = 0; i < 8; i++) {
  f4:	20 e0       	ldi	r18, 0x00	; 0
  f6:	30 e0       	ldi	r19, 0x00	; 0
	PORTB |= (1 << TX_PIN); // Stop bit
	_delay_us(d_baud); // Esperar antes de enviar el siguiente byte
}

uint8_t receiveByteGPIO() {
	uint8_t data = 0;
  f8:	80 e0       	ldi	r24, 0x00	; 0

	// Esperar a que el pin RX (PB1) sea bajo (start bit)
	while (PINB & (1 << RX_PIN));
	_delay_us(d_baud); // Esperar a que el primer bit se estabilice

	for (int i = 0; i < 8; i++) {
  fa:	13 c0       	rjmp	.+38     	; 0x122 <receiveByteGPIO+0x3e>
		if (PINB & (1 << RX_PIN)) {
  fc:	19 9b       	sbis	0x03, 1	; 3
  fe:	09 c0       	rjmp	.+18     	; 0x112 <receiveByteGPIO+0x2e>
			data |= (1 << i); // Leer bit
 100:	41 e0       	ldi	r20, 0x01	; 1
 102:	50 e0       	ldi	r21, 0x00	; 0
 104:	02 2e       	mov	r0, r18
 106:	02 c0       	rjmp	.+4      	; 0x10c <receiveByteGPIO+0x28>
 108:	44 0f       	add	r20, r20
 10a:	55 1f       	adc	r21, r21
 10c:	0a 94       	dec	r0
 10e:	e2 f7       	brpl	.-8      	; 0x108 <receiveByteGPIO+0x24>
 110:	84 2b       	or	r24, r20
 112:	ef e9       	ldi	r30, 0x9F	; 159
 114:	f1 e0       	ldi	r31, 0x01	; 1
 116:	31 97       	sbiw	r30, 0x01	; 1
 118:	f1 f7       	brne	.-4      	; 0x116 <receiveByteGPIO+0x32>
 11a:	00 c0       	rjmp	.+0      	; 0x11c <receiveByteGPIO+0x38>
 11c:	00 00       	nop

	// Esperar a que el pin RX (PB1) sea bajo (start bit)
	while (PINB & (1 << RX_PIN));
	_delay_us(d_baud); // Esperar a que el primer bit se estabilice

	for (int i = 0; i < 8; i++) {
 11e:	2f 5f       	subi	r18, 0xFF	; 255
 120:	3f 4f       	sbci	r19, 0xFF	; 255
 122:	28 30       	cpi	r18, 0x08	; 8
 124:	31 05       	cpc	r19, r1
 126:	54 f3       	brlt	.-44     	; 0xfc <receiveByteGPIO+0x18>
		}
		_delay_us(d_baud); // Esperar por el siguiente bit
	}

	// Esperar a que el pin RX sea alto (stop bit)
	while (!(PINB & (1 << RX_PIN)));
 128:	19 9b       	sbis	0x03, 1	; 3
 12a:	fe cf       	rjmp	.-4      	; 0x128 <receiveByteGPIO+0x44>

	return data;
}
 12c:	08 95       	ret

Disassembly of section .text.main:

0000012e <main>:

int main() {
	initSerial();
 12e:	0e 94 c4 00 	call	0x188	; 0x188 <initSerial>
	USART_Init();
 132:	0e 94 ad 00 	call	0x15a	; 0x15a <USART_Init>
	USART_Transmit('H');
 136:	88 e4       	ldi	r24, 0x48	; 72
 138:	0e 94 cb 00 	call	0x196	; 0x196 <USART_Transmit>
	while (1) {
		if (!(PINB & (1 << RX_PIN))) {
 13c:	19 99       	sbic	0x03, 1	; 3
 13e:	04 c0       	rjmp	.+8      	; 0x148 <main+0x1a>
			uint8_t receivedGPIO = receiveByteGPIO();
 140:	0e 94 72 00 	call	0xe4	; 0xe4 <receiveByteGPIO>
			USART_Transmit(receivedGPIO); // Enviar el dato recibido por GPIO
 144:	0e 94 cb 00 	call	0x196	; 0x196 <USART_Transmit>
		}

		if (UCSR0A & (1 << RXC0)) {
 148:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 14c:	88 23       	and	r24, r24
 14e:	b4 f7       	brge	.-20     	; 0x13c <main+0xe>
			uint8_t receivedUSART = USART_Receive();
 150:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <USART_Receive>
			sendByteGPIO(receivedUSART); // Enviar el dato recibido por USART
 154:	0e 94 40 00 	call	0x80	; 0x80 <__data_load_end>
 158:	f1 cf       	rjmp	.-30     	; 0x13c <main+0xe>

Disassembly of section .text.__dummy_fini:

000001ba <_fini>:
 1ba:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

000001bc <__funcs_on_exit>:
 1bc:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

000001be <__simulator_exit>:
 1be:	08 95       	ret

Disassembly of section .text.exit:

00000172 <exit>:
 172:	ec 01       	movw	r28, r24
 174:	0e 94 de 00 	call	0x1bc	; 0x1bc <__funcs_on_exit>
 178:	0e 94 dd 00 	call	0x1ba	; 0x1ba <_fini>
 17c:	ce 01       	movw	r24, r28
 17e:	0e 94 df 00 	call	0x1be	; 0x1be <__simulator_exit>
 182:	ce 01       	movw	r24, r28
 184:	0e 94 db 00 	call	0x1b6	; 0x1b6 <_Exit>

Disassembly of section .text._Exit:

000001b6 <_Exit>:
 1b6:	0e 94 3e 00 	call	0x7c	; 0x7c <_exit>
