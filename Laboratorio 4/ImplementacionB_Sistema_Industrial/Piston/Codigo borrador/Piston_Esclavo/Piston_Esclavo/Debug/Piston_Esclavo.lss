
Piston_Esclavo.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000025e  2**0
                  ALLOC, LOAD, DATA
  1 .text         00000080  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  0000025e  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000000e  00000000  00000000  0000028d  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000060  00000000  00000000  0000029b  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001120  00000000  00000000  000002fb  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007e2  00000000  00000000  0000141b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000057e  00000000  00000000  00001bfd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000b0  00000000  00000000  0000217c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000023b  00000000  00000000  0000222c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000076f  00000000  00000000  00002467  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000068  00000000  00000000  00002bd6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  000001dc  000001dc  00000250  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002c40  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.initSerial 0000000e  000001b2  000001b2  00000226  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.USART_Init 00000018  00000184  00000184  000001f8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.USART_Transmit 0000000e  000001c0  000001c0  00000234  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.USART_Receive 0000000e  000001ce  000001ce  00000242  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.sendByteGPIO 00000064  00000080  00000080  000000f4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.receiveByteGPIO 0000004a  0000013a  0000013a  000001ae  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.main    00000056  000000e4  000000e4  00000158  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.__dummy_fini 00000002  000001e4  000001e4  00000258  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.__dummy_funcs_on_exit 00000002  000001e6  000001e6  0000025a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.__dummy_simulator_exit 00000002  000001e8  000001e8  0000025c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text.exit    00000016  0000019c  0000019c  00000210  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text._Exit   00000004  000001e0  000001e0  00000254  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
   8:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
   c:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
  10:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
  14:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
  18:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
  1c:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
  20:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
  24:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
  28:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
  2c:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
  30:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
  34:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
  38:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
  3c:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
  40:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
  44:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
  48:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
  4c:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
  50:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
  54:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
  58:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
  5c:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
  60:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
  64:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 72 00 	call	0xe4	; 0xe4 <main>
  78:	0c 94 ce 00 	jmp	0x19c	; 0x19c <exit>

0000007c <_exit>:
  7c:	f8 94       	cli

0000007e <__stop_program>:
  7e:	ff cf       	rjmp	.-2      	; 0x7e <__stop_program>

Disassembly of section .text:

000001dc <__bad_interrupt>:
 1dc:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.initSerial:

000001b2 <initSerial>:



void initSerial() {
	// Configura PB0 como salida (TX)
	DDRB |= (1 << TX_PIN);
 1b2:	84 b1       	in	r24, 0x04	; 4
 1b4:	81 60       	ori	r24, 0x01	; 1
 1b6:	84 b9       	out	0x04, r24	; 4
	// Configura PB1 como entrada (RX)
	DDRB &= ~(1 << RX_PIN);
 1b8:	84 b1       	in	r24, 0x04	; 4
 1ba:	8d 7f       	andi	r24, 0xFD	; 253
 1bc:	84 b9       	out	0x04, r24	; 4
 1be:	08 95       	ret

Disassembly of section .text.USART_Init:

00000184 <USART_Init>:
}

void USART_Init() {
	UBRR0H = (MY_UBRR >> 8);
 184:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = MY_UBRR;
 188:	87 e6       	ldi	r24, 0x67	; 103
 18a:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);
 18e:	88 e1       	ldi	r24, 0x18	; 24
 190:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
 194:	86 e0       	ldi	r24, 0x06	; 6
 196:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 19a:	08 95       	ret

Disassembly of section .text.USART_Transmit:

000001c0 <USART_Transmit>:
}

void USART_Transmit(unsigned char data) {
	while (!(UCSR0A & (1 << UDRE0)));
 1c0:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 1c4:	95 ff       	sbrs	r25, 5
 1c6:	fc cf       	rjmp	.-8      	; 0x1c0 <USART_Transmit>
	UDR0 = data;
 1c8:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 1cc:	08 95       	ret

Disassembly of section .text.USART_Receive:

000001ce <USART_Receive>:
}

unsigned char USART_Receive(void) {
	while (!(UCSR0A & (1 << RXC0)));
 1ce:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 1d2:	88 23       	and	r24, r24
 1d4:	e4 f7       	brge	.-8      	; 0x1ce <USART_Receive>
	return UDR0;
 1d6:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
}
 1da:	08 95       	ret

Disassembly of section .text.sendByteGPIO:

00000080 <sendByteGPIO>:
	else{
		VacioOFF
		_delay_ms(1000);
	}
	sendByteGPIO(EnviarDato);
}
  80:	95 b1       	in	r25, 0x05	; 5
  82:	9e 7f       	andi	r25, 0xFE	; 254
  84:	95 b9       	out	0x05, r25	; 5
  86:	ef e9       	ldi	r30, 0x9F	; 159
  88:	f1 e0       	ldi	r31, 0x01	; 1
  8a:	31 97       	sbiw	r30, 0x01	; 1
  8c:	f1 f7       	brne	.-4      	; 0x8a <sendByteGPIO+0xa>
  8e:	00 c0       	rjmp	.+0      	; 0x90 <sendByteGPIO+0x10>
  90:	00 00       	nop
  92:	20 e0       	ldi	r18, 0x00	; 0
  94:	30 e0       	ldi	r19, 0x00	; 0
  96:	19 c0       	rjmp	.+50     	; 0xca <sendByteGPIO+0x4a>
  98:	48 2f       	mov	r20, r24
  9a:	50 e0       	ldi	r21, 0x00	; 0
  9c:	02 2e       	mov	r0, r18
  9e:	02 c0       	rjmp	.+4      	; 0xa4 <sendByteGPIO+0x24>
  a0:	55 95       	asr	r21
  a2:	47 95       	ror	r20
  a4:	0a 94       	dec	r0
  a6:	e2 f7       	brpl	.-8      	; 0xa0 <sendByteGPIO+0x20>
  a8:	40 ff       	sbrs	r20, 0
  aa:	04 c0       	rjmp	.+8      	; 0xb4 <sendByteGPIO+0x34>
  ac:	95 b1       	in	r25, 0x05	; 5
  ae:	91 60       	ori	r25, 0x01	; 1
  b0:	95 b9       	out	0x05, r25	; 5
  b2:	03 c0       	rjmp	.+6      	; 0xba <sendByteGPIO+0x3a>
  b4:	95 b1       	in	r25, 0x05	; 5
  b6:	9e 7f       	andi	r25, 0xFE	; 254
  b8:	95 b9       	out	0x05, r25	; 5
  ba:	ef e9       	ldi	r30, 0x9F	; 159
  bc:	f1 e0       	ldi	r31, 0x01	; 1
  be:	31 97       	sbiw	r30, 0x01	; 1
  c0:	f1 f7       	brne	.-4      	; 0xbe <sendByteGPIO+0x3e>
  c2:	00 c0       	rjmp	.+0      	; 0xc4 <sendByteGPIO+0x44>
  c4:	00 00       	nop
  c6:	2f 5f       	subi	r18, 0xFF	; 255
  c8:	3f 4f       	sbci	r19, 0xFF	; 255
  ca:	28 30       	cpi	r18, 0x08	; 8
  cc:	31 05       	cpc	r19, r1
  ce:	24 f3       	brlt	.-56     	; 0x98 <sendByteGPIO+0x18>
  d0:	85 b1       	in	r24, 0x05	; 5
  d2:	81 60       	ori	r24, 0x01	; 1
  d4:	85 b9       	out	0x05, r24	; 5
  d6:	8f e9       	ldi	r24, 0x9F	; 159
  d8:	91 e0       	ldi	r25, 0x01	; 1
  da:	01 97       	sbiw	r24, 0x01	; 1
  dc:	f1 f7       	brne	.-4      	; 0xda <sendByteGPIO+0x5a>
  de:	00 c0       	rjmp	.+0      	; 0xe0 <sendByteGPIO+0x60>
  e0:	00 00       	nop
  e2:	08 95       	ret

Disassembly of section .text.receiveByteGPIO:

0000013a <receiveByteGPIO>:

uint8_t receiveByteGPIO() {
	uint8_t data = 0;

	// Esperar a que el pin RX (PB1) sea bajo (start bit)
	while (PINB & (1 << RX_PIN));
 13a:	19 99       	sbic	0x03, 1	; 3
 13c:	fe cf       	rjmp	.-4      	; 0x13a <receiveByteGPIO>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 13e:	8f e9       	ldi	r24, 0x9F	; 159
 140:	91 e0       	ldi	r25, 0x01	; 1
 142:	01 97       	sbiw	r24, 0x01	; 1
 144:	f1 f7       	brne	.-4      	; 0x142 <receiveByteGPIO+0x8>
 146:	00 c0       	rjmp	.+0      	; 0x148 <receiveByteGPIO+0xe>
 148:	00 00       	nop
	_delay_us(d_baud); // Esperar a que el primer bit se estabilice

	for (int i = 0; i < 8; i++) {
 14a:	20 e0       	ldi	r18, 0x00	; 0
 14c:	30 e0       	ldi	r19, 0x00	; 0
	PORTB |= (1 << TX_PIN); // Stop bit
	_delay_us(d_baud); // Esperar antes de enviar el siguiente byte
}

uint8_t receiveByteGPIO() {
	uint8_t data = 0;
 14e:	80 e0       	ldi	r24, 0x00	; 0

	// Esperar a que el pin RX (PB1) sea bajo (start bit)
	while (PINB & (1 << RX_PIN));
	_delay_us(d_baud); // Esperar a que el primer bit se estabilice

	for (int i = 0; i < 8; i++) {
 150:	13 c0       	rjmp	.+38     	; 0x178 <receiveByteGPIO+0x3e>
		if (PINB & (1 << RX_PIN)) {
 152:	19 9b       	sbis	0x03, 1	; 3
 154:	09 c0       	rjmp	.+18     	; 0x168 <receiveByteGPIO+0x2e>
			data |= (1 << i); // Leer bit
 156:	41 e0       	ldi	r20, 0x01	; 1
 158:	50 e0       	ldi	r21, 0x00	; 0
 15a:	02 2e       	mov	r0, r18
 15c:	02 c0       	rjmp	.+4      	; 0x162 <receiveByteGPIO+0x28>
 15e:	44 0f       	add	r20, r20
 160:	55 1f       	adc	r21, r21
 162:	0a 94       	dec	r0
 164:	e2 f7       	brpl	.-8      	; 0x15e <receiveByteGPIO+0x24>
 166:	84 2b       	or	r24, r20
 168:	ef e9       	ldi	r30, 0x9F	; 159
 16a:	f1 e0       	ldi	r31, 0x01	; 1
 16c:	31 97       	sbiw	r30, 0x01	; 1
 16e:	f1 f7       	brne	.-4      	; 0x16c <receiveByteGPIO+0x32>
 170:	00 c0       	rjmp	.+0      	; 0x172 <receiveByteGPIO+0x38>
 172:	00 00       	nop

	// Esperar a que el pin RX (PB1) sea bajo (start bit)
	while (PINB & (1 << RX_PIN));
	_delay_us(d_baud); // Esperar a que el primer bit se estabilice

	for (int i = 0; i < 8; i++) {
 174:	2f 5f       	subi	r18, 0xFF	; 255
 176:	3f 4f       	sbci	r19, 0xFF	; 255
 178:	28 30       	cpi	r18, 0x08	; 8
 17a:	31 05       	cpc	r19, r1
 17c:	54 f3       	brlt	.-44     	; 0x152 <receiveByteGPIO+0x18>
		}
		_delay_us(d_baud); // Esperar por el siguiente bit
	}

	// Esperar a que el pin RX sea alto (stop bit)
	while (!(PINB & (1 << RX_PIN)));
 17e:	19 9b       	sbis	0x03, 1	; 3
 180:	fe cf       	rjmp	.-4      	; 0x17e <receiveByteGPIO+0x44>

	return data;
}
 182:	08 95       	ret

Disassembly of section .text.main:

000000e4 <main>:
		_delay_ms(1000);
	}
	sendByteGPIO(EnviarDato);
}*/
int main() {
	initSerial();
  e4:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <initSerial>
	USART_Init();
  e8:	0e 94 c2 00 	call	0x184	; 0x184 <USART_Init>

	while (1) {
		if (!(PINB & (1 << RX_PIN))) {
  ec:	19 99       	sbic	0x03, 1	; 3
  ee:	10 c0       	rjmp	.+32     	; 0x110 <main+0x2c>
			uint8_t receivedGPIO = receiveByteGPIO();
  f0:	0e 94 9d 00 	call	0x13a	; 0x13a <receiveByteGPIO>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f4:	ef e9       	ldi	r30, 0x9F	; 159
  f6:	ff e0       	ldi	r31, 0x0F	; 15
  f8:	31 97       	sbiw	r30, 0x01	; 1
  fa:	f1 f7       	brne	.-4      	; 0xf8 <main+0x14>
  fc:	00 c0       	rjmp	.+0      	; 0xfe <main+0x1a>
  fe:	00 00       	nop
			_delay_ms(1);
			USART_Transmit(receivedGPIO); // Enviar el
 100:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <USART_Transmit>
 104:	8f e9       	ldi	r24, 0x9F	; 159
 106:	9f e0       	ldi	r25, 0x0F	; 15
 108:	01 97       	sbiw	r24, 0x01	; 1
 10a:	f1 f7       	brne	.-4      	; 0x108 <main+0x24>
 10c:	00 c0       	rjmp	.+0      	; 0x10e <main+0x2a>
 10e:	00 00       	nop
			_delay_ms(1);
		}

		if (UCSR0A & (1 << RXC0)) {
 110:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 114:	88 23       	and	r24, r24
 116:	54 f7       	brge	.-44     	; 0xec <main+0x8>
			uint8_t receivedUSART = USART_Receive();
 118:	0e 94 e7 00 	call	0x1ce	; 0x1ce <USART_Receive>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 11c:	ef e9       	ldi	r30, 0x9F	; 159
 11e:	ff e0       	ldi	r31, 0x0F	; 15
 120:	31 97       	sbiw	r30, 0x01	; 1
 122:	f1 f7       	brne	.-4      	; 0x120 <main+0x3c>
 124:	00 c0       	rjmp	.+0      	; 0x126 <main+0x42>
 126:	00 00       	nop
			_delay_us(1000);
			sendByteGPIO(receivedUSART); // Enviar el b
 128:	0e 94 40 00 	call	0x80	; 0x80 <__data_load_end>
 12c:	8f e9       	ldi	r24, 0x9F	; 159
 12e:	9f e0       	ldi	r25, 0x0F	; 15
 130:	01 97       	sbiw	r24, 0x01	; 1
 132:	f1 f7       	brne	.-4      	; 0x130 <main+0x4c>
 134:	00 c0       	rjmp	.+0      	; 0x136 <main+0x52>
 136:	00 00       	nop
 138:	d9 cf       	rjmp	.-78     	; 0xec <main+0x8>

Disassembly of section .text.__dummy_fini:

000001e4 <_fini>:
 1e4:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

000001e6 <__funcs_on_exit>:
 1e6:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

000001e8 <__simulator_exit>:
 1e8:	08 95       	ret

Disassembly of section .text.exit:

0000019c <exit>:
 19c:	ec 01       	movw	r28, r24
 19e:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <__funcs_on_exit>
 1a2:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_fini>
 1a6:	ce 01       	movw	r24, r28
 1a8:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <__simulator_exit>
 1ac:	ce 01       	movw	r24, r28
 1ae:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <_Exit>

Disassembly of section .text._Exit:

000001e0 <_Exit>:
 1e0:	0e 94 3e 00 	call	0x7c	; 0x7c <_exit>
