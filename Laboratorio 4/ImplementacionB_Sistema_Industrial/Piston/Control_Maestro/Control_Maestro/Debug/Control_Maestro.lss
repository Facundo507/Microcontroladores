
Control_Maestro.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001ec  2**0
                  ALLOC, LOAD, DATA
  1 .text         00000080  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  000001ec  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000000e  00000000  00000000  0000021b  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  00000229  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000be7  00000000  00000000  00000281  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000745  00000000  00000000  00000e68  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003e0  00000000  00000000  000015ad  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000094  00000000  00000000  00001990  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000208  00000000  00000000  00001a24  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001f2  00000000  00000000  00001c2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  00001e1e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  0000016a  0000016a  000001de  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001e80  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.initSerial 0000000e  0000014e  0000014e  000001c2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.USART_Init 00000018  00000120  00000120  00000194  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.USART_Transmit 0000000e  0000015c  0000015c  000001d0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.sendByteGPIO 00000064  00000080  00000080  000000f4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.ProcesarBotones 0000001e  000000e4  000000e4  00000158  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.main    0000001e  00000102  00000102  00000176  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.__dummy_fini 00000002  00000172  00000172  000001e6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.__dummy_funcs_on_exit 00000002  00000174  00000174  000001e8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.__dummy_simulator_exit 00000002  00000176  00000176  000001ea  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.exit    00000016  00000138  00000138  000001ac  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text._Exit   00000004  0000016e  0000016e  000001e2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
   8:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
   c:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
  10:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
  14:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
  18:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
  1c:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
  20:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
  24:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
  28:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
  2c:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
  30:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
  34:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
  38:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
  3c:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
  40:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
  44:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
  48:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
  4c:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
  50:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
  54:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
  58:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
  5c:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
  60:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
  64:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 81 00 	call	0x102	; 0x102 <main>
  78:	0c 94 9c 00 	jmp	0x138	; 0x138 <exit>

0000007c <_exit>:
  7c:	f8 94       	cli

0000007e <__stop_program>:
  7e:	ff cf       	rjmp	.-2      	; 0x7e <__stop_program>

Disassembly of section .text:

0000016a <__bad_interrupt>:
 16a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

Disassembly of section .text.initSerial:

0000014e <initSerial>:
#define PIN_Boton_Vacio 4
#define PIN_Boton_Auto 5

void initSerial() {
	// Configura PB0 como salida (TX)
	DDRB |= (1 << TX_PIN);
 14e:	84 b1       	in	r24, 0x04	; 4
 150:	81 60       	ori	r24, 0x01	; 1
 152:	84 b9       	out	0x04, r24	; 4
	// Configura PB1 como entrada (RX)
	DDRB &= ~(1 << RX_PIN);
 154:	84 b1       	in	r24, 0x04	; 4
 156:	8d 7f       	andi	r24, 0xFD	; 253
 158:	84 b9       	out	0x04, r24	; 4
 15a:	08 95       	ret

Disassembly of section .text.USART_Init:

00000120 <USART_Init>:
}

void USART_Init() {
	UBRR0H = (MY_UBRR >> 8);
 120:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = MY_UBRR;
 124:	87 e6       	ldi	r24, 0x67	; 103
 126:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);
 12a:	88 e1       	ldi	r24, 0x18	; 24
 12c:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
 130:	86 e0       	ldi	r24, 0x06	; 6
 132:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 136:	08 95       	ret

Disassembly of section .text.USART_Transmit:

0000015c <USART_Transmit>:
}

void USART_Transmit(unsigned char data) {
	while (!(UCSR0A & (1 << UDRE0)));
 15c:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 160:	95 ff       	sbrs	r25, 5
 162:	fc cf       	rjmp	.-8      	; 0x15c <USART_Transmit>
	UDR0 = data;
 164:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 168:	08 95       	ret

Disassembly of section .text.sendByteGPIO:

00000080 <sendByteGPIO>:

	// Esperar a que el pin RX sea alto (stop bit)
	while (!(PINB & (1 << RX_PIN)));

	return data;
}
  80:	95 b1       	in	r25, 0x05	; 5
  82:	9e 7f       	andi	r25, 0xFE	; 254
  84:	95 b9       	out	0x05, r25	; 5
  86:	ef e9       	ldi	r30, 0x9F	; 159
  88:	f1 e0       	ldi	r31, 0x01	; 1
  8a:	31 97       	sbiw	r30, 0x01	; 1
  8c:	f1 f7       	brne	.-4      	; 0x8a <sendByteGPIO+0xa>
  8e:	00 c0       	rjmp	.+0      	; 0x90 <sendByteGPIO+0x10>
  90:	00 00       	nop
  92:	20 e0       	ldi	r18, 0x00	; 0
  94:	30 e0       	ldi	r19, 0x00	; 0
  96:	19 c0       	rjmp	.+50     	; 0xca <sendByteGPIO+0x4a>
  98:	48 2f       	mov	r20, r24
  9a:	50 e0       	ldi	r21, 0x00	; 0
  9c:	02 2e       	mov	r0, r18
  9e:	02 c0       	rjmp	.+4      	; 0xa4 <sendByteGPIO+0x24>
  a0:	55 95       	asr	r21
  a2:	47 95       	ror	r20
  a4:	0a 94       	dec	r0
  a6:	e2 f7       	brpl	.-8      	; 0xa0 <sendByteGPIO+0x20>
  a8:	40 ff       	sbrs	r20, 0
  aa:	04 c0       	rjmp	.+8      	; 0xb4 <sendByteGPIO+0x34>
  ac:	95 b1       	in	r25, 0x05	; 5
  ae:	91 60       	ori	r25, 0x01	; 1
  b0:	95 b9       	out	0x05, r25	; 5
  b2:	03 c0       	rjmp	.+6      	; 0xba <sendByteGPIO+0x3a>
  b4:	95 b1       	in	r25, 0x05	; 5
  b6:	9e 7f       	andi	r25, 0xFE	; 254
  b8:	95 b9       	out	0x05, r25	; 5
  ba:	ef e9       	ldi	r30, 0x9F	; 159
  bc:	f1 e0       	ldi	r31, 0x01	; 1
  be:	31 97       	sbiw	r30, 0x01	; 1
  c0:	f1 f7       	brne	.-4      	; 0xbe <sendByteGPIO+0x3e>
  c2:	00 c0       	rjmp	.+0      	; 0xc4 <sendByteGPIO+0x44>
  c4:	00 00       	nop
  c6:	2f 5f       	subi	r18, 0xFF	; 255
  c8:	3f 4f       	sbci	r19, 0xFF	; 255
  ca:	28 30       	cpi	r18, 0x08	; 8
  cc:	31 05       	cpc	r19, r1
  ce:	24 f3       	brlt	.-56     	; 0x98 <sendByteGPIO+0x18>
  d0:	85 b1       	in	r24, 0x05	; 5
  d2:	81 60       	ori	r24, 0x01	; 1
  d4:	85 b9       	out	0x05, r24	; 5
  d6:	8f e9       	ldi	r24, 0x9F	; 159
  d8:	91 e0       	ldi	r25, 0x01	; 1
  da:	01 97       	sbiw	r24, 0x01	; 1
  dc:	f1 f7       	brne	.-4      	; 0xda <sendByteGPIO+0x5a>
  de:	00 c0       	rjmp	.+0      	; 0xe0 <sendByteGPIO+0x60>
  e0:	00 00       	nop
  e2:	08 95       	ret

Disassembly of section .text.ProcesarBotones:

000000e4 <ProcesarBotones>:
uint8_t ProcesarBotones(){
	uint8_t Dato = 0;
	if (!(PINB & (1<<PIN_Boton_Auto))){
  e4:	1d 9b       	sbis	0x03, 5	; 3
  e6:	0b c0       	rjmp	.+22     	; 0xfe <ProcesarBotones+0x1a>
		return 0b00000001;
	}
	if (!(PINB & (1<<PIN_Boton_Caja))){
  e8:	1a 9b       	sbis	0x03, 2	; 3
  ea:	02 c0       	rjmp	.+4      	; 0xf0 <ProcesarBotones+0xc>
	while (!(PINB & (1 << RX_PIN)));

	return data;
}
uint8_t ProcesarBotones(){
	uint8_t Dato = 0;
  ec:	80 e0       	ldi	r24, 0x00	; 0
  ee:	01 c0       	rjmp	.+2      	; 0xf2 <ProcesarBotones+0xe>
	if (!(PINB & (1<<PIN_Boton_Auto))){
		return 0b00000001;
	}
	if (!(PINB & (1<<PIN_Boton_Caja))){
		Dato |= (1 << 1);
  f0:	82 e0       	ldi	r24, 0x02	; 2
	}
	if (!(PINB & (1<<PIN_Boton_Etiqueta))){
  f2:	1b 9b       	sbis	0x03, 3	; 3
		Dato |= (1 << 2);
  f4:	84 60       	ori	r24, 0x04	; 4
	}
	if (!(PINB & (1<<PIN_Boton_Vacio))){
  f6:	1c 99       	sbic	0x03, 4	; 3
  f8:	03 c0       	rjmp	.+6      	; 0x100 <ProcesarBotones+0x1c>
		Dato |= (1 << 3);
  fa:	88 60       	ori	r24, 0x08	; 8
  fc:	08 95       	ret
	return data;
}
uint8_t ProcesarBotones(){
	uint8_t Dato = 0;
	if (!(PINB & (1<<PIN_Boton_Auto))){
		return 0b00000001;
  fe:	81 e0       	ldi	r24, 0x01	; 1
	}
	if (!(PINB & (1<<PIN_Boton_Vacio))){
		Dato |= (1 << 3);
	}
	return Dato;
}
 100:	08 95       	ret

Disassembly of section .text.main:

00000102 <main>:



int main() {
	PORTB |= (1 << PIN_Boton_Auto) | (1 <<PIN_Boton_Caja) | (1 << PIN_Boton_Etiqueta) | (1 << PIN_Boton_Vacio);
 102:	85 b1       	in	r24, 0x05	; 5
 104:	8c 63       	ori	r24, 0x3C	; 60
 106:	85 b9       	out	0x05, r24	; 5
	initSerial();
 108:	0e 94 a7 00 	call	0x14e	; 0x14e <initSerial>
	USART_Init();
 10c:	0e 94 90 00 	call	0x120	; 0x120 <USART_Init>
	USART_Transmit('H');
 110:	88 e4       	ldi	r24, 0x48	; 72
 112:	0e 94 ae 00 	call	0x15c	; 0x15c <USART_Transmit>
	while (1) {
		sendByteGPIO(ProcesarBotones());
 116:	0e 94 72 00 	call	0xe4	; 0xe4 <ProcesarBotones>
 11a:	0e 94 40 00 	call	0x80	; 0x80 <_etext>
 11e:	fb cf       	rjmp	.-10     	; 0x116 <main+0x14>

Disassembly of section .text.__dummy_fini:

00000172 <_fini>:
 172:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

00000174 <__funcs_on_exit>:
 174:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

00000176 <__simulator_exit>:
 176:	08 95       	ret

Disassembly of section .text.exit:

00000138 <exit>:
 138:	ec 01       	movw	r28, r24
 13a:	0e 94 ba 00 	call	0x174	; 0x174 <__funcs_on_exit>
 13e:	0e 94 b9 00 	call	0x172	; 0x172 <_fini>
 142:	ce 01       	movw	r24, r28
 144:	0e 94 bb 00 	call	0x176	; 0x176 <__simulator_exit>
 148:	ce 01       	movw	r24, r28
 14a:	0e 94 b7 00 	call	0x16e	; 0x16e <_Exit>

Disassembly of section .text._Exit:

0000016e <_Exit>:
 16e:	0e 94 3e 00 	call	0x7c	; 0x7c <_exit>
