
Piston_Esclavo.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000372  2**0
                  ALLOC, LOAD, DATA
  1 .text         00000080  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  00000372  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000000e  00000000  00000000  000003a1  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000060  00000000  00000000  000003af  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000e86  00000000  00000000  0000040f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007ad  00000000  00000000  00001295  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000050f  00000000  00000000  00001a42  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000ac  00000000  00000000  00001f54  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000022e  00000000  00000000  00002000  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000004cd  00000000  00000000  0000222e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000068  00000000  00000000  000026fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  000002f0  000002f0  00000364  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002764  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.initSerial 0000000e  000002c6  000002c6  0000033a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.USART_Init 00000018  00000298  00000298  0000030c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.USART_Transmit 0000000e  000002d4  000002d4  00000348  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.USART_Receive 0000000e  000002e2  000002e2  00000356  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.sendByteGPIO 00000064  0000015c  0000015c  000001d0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.receiveByteGPIO 0000004a  0000021c  0000021c  00000290  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.ModoAutomatico 000000dc  00000080  00000080  000000f4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.RecibirYMandarDatos 0000005c  000001c0  000001c0  00000234  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.main    00000032  00000266  00000266  000002da  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.__dummy_fini 00000002  000002f8  000002f8  0000036c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text.__dummy_funcs_on_exit 00000002  000002fa  000002fa  0000036e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text.__dummy_simulator_exit 00000002  000002fc  000002fc  00000370  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .text.exit    00000016  000002b0  000002b0  00000324  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .text._Exit   00000004  000002f4  000002f4  00000368  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 78 01 	jmp	0x2f0	; 0x2f0 <__bad_interrupt>
   8:	0c 94 78 01 	jmp	0x2f0	; 0x2f0 <__bad_interrupt>
   c:	0c 94 78 01 	jmp	0x2f0	; 0x2f0 <__bad_interrupt>
  10:	0c 94 78 01 	jmp	0x2f0	; 0x2f0 <__bad_interrupt>
  14:	0c 94 78 01 	jmp	0x2f0	; 0x2f0 <__bad_interrupt>
  18:	0c 94 78 01 	jmp	0x2f0	; 0x2f0 <__bad_interrupt>
  1c:	0c 94 78 01 	jmp	0x2f0	; 0x2f0 <__bad_interrupt>
  20:	0c 94 78 01 	jmp	0x2f0	; 0x2f0 <__bad_interrupt>
  24:	0c 94 78 01 	jmp	0x2f0	; 0x2f0 <__bad_interrupt>
  28:	0c 94 78 01 	jmp	0x2f0	; 0x2f0 <__bad_interrupt>
  2c:	0c 94 78 01 	jmp	0x2f0	; 0x2f0 <__bad_interrupt>
  30:	0c 94 78 01 	jmp	0x2f0	; 0x2f0 <__bad_interrupt>
  34:	0c 94 78 01 	jmp	0x2f0	; 0x2f0 <__bad_interrupt>
  38:	0c 94 78 01 	jmp	0x2f0	; 0x2f0 <__bad_interrupt>
  3c:	0c 94 78 01 	jmp	0x2f0	; 0x2f0 <__bad_interrupt>
  40:	0c 94 78 01 	jmp	0x2f0	; 0x2f0 <__bad_interrupt>
  44:	0c 94 78 01 	jmp	0x2f0	; 0x2f0 <__bad_interrupt>
  48:	0c 94 78 01 	jmp	0x2f0	; 0x2f0 <__bad_interrupt>
  4c:	0c 94 78 01 	jmp	0x2f0	; 0x2f0 <__bad_interrupt>
  50:	0c 94 78 01 	jmp	0x2f0	; 0x2f0 <__bad_interrupt>
  54:	0c 94 78 01 	jmp	0x2f0	; 0x2f0 <__bad_interrupt>
  58:	0c 94 78 01 	jmp	0x2f0	; 0x2f0 <__bad_interrupt>
  5c:	0c 94 78 01 	jmp	0x2f0	; 0x2f0 <__bad_interrupt>
  60:	0c 94 78 01 	jmp	0x2f0	; 0x2f0 <__bad_interrupt>
  64:	0c 94 78 01 	jmp	0x2f0	; 0x2f0 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 33 01 	call	0x266	; 0x266 <main>
  78:	0c 94 58 01 	jmp	0x2b0	; 0x2b0 <exit>

0000007c <_exit>:
  7c:	f8 94       	cli

0000007e <__stop_program>:
  7e:	ff cf       	rjmp	.-2      	; 0x7e <__stop_program>

Disassembly of section .text:

000002f0 <__bad_interrupt>:
 2f0:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.initSerial:

000002c6 <initSerial>:



void initSerial() {
	// Configura PB0 como salida (TX)
	DDRB |= (1 << TX_PIN);
 2c6:	84 b1       	in	r24, 0x04	; 4
 2c8:	81 60       	ori	r24, 0x01	; 1
 2ca:	84 b9       	out	0x04, r24	; 4
	// Configura PB1 como entrada (RX)
	DDRB &= ~(1 << RX_PIN);
 2cc:	84 b1       	in	r24, 0x04	; 4
 2ce:	8d 7f       	andi	r24, 0xFD	; 253
 2d0:	84 b9       	out	0x04, r24	; 4
 2d2:	08 95       	ret

Disassembly of section .text.USART_Init:

00000298 <USART_Init>:
}

void USART_Init() {
	UBRR0H = (MY_UBRR >> 8);
 298:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = MY_UBRR;
 29c:	87 e6       	ldi	r24, 0x67	; 103
 29e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);
 2a2:	88 e1       	ldi	r24, 0x18	; 24
 2a4:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
 2a8:	86 e0       	ldi	r24, 0x06	; 6
 2aa:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 2ae:	08 95       	ret

Disassembly of section .text.USART_Transmit:

000002d4 <USART_Transmit>:
}

void USART_Transmit(unsigned char data) {
	while (!(UCSR0A & (1 << UDRE0)));
 2d4:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 2d8:	95 ff       	sbrs	r25, 5
 2da:	fc cf       	rjmp	.-8      	; 0x2d4 <USART_Transmit>
	UDR0 = data;
 2dc:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 2e0:	08 95       	ret

Disassembly of section .text.USART_Receive:

000002e2 <USART_Receive>:
}

unsigned char USART_Receive(void) {
	while (!(UCSR0A & (1 << RXC0)));
 2e2:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 2e6:	88 23       	and	r24, r24
 2e8:	e4 f7       	brge	.-8      	; 0x2e2 <USART_Receive>
	return UDR0;
 2ea:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
}
 2ee:	08 95       	ret

Disassembly of section .text.sendByteGPIO:

0000015c <sendByteGPIO>:

void sendByteGPIO(uint8_t data) {
	// Enviar un byte a través de PB0 (TX)
	PORTB &= ~(1 << TX_PIN); // Start bit
 15c:	95 b1       	in	r25, 0x05	; 5
 15e:	9e 7f       	andi	r25, 0xFE	; 254
 160:	95 b9       	out	0x05, r25	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 162:	ef e9       	ldi	r30, 0x9F	; 159
 164:	f1 e0       	ldi	r31, 0x01	; 1
 166:	31 97       	sbiw	r30, 0x01	; 1
 168:	f1 f7       	brne	.-4      	; 0x166 <sendByteGPIO+0xa>
 16a:	00 c0       	rjmp	.+0      	; 0x16c <sendByteGPIO+0x10>
 16c:	00 00       	nop
	_delay_us(d_baud); // Esperar

	for (int i = 0; i < 8; i++) {
 16e:	20 e0       	ldi	r18, 0x00	; 0
 170:	30 e0       	ldi	r19, 0x00	; 0
 172:	19 c0       	rjmp	.+50     	; 0x1a6 <sendByteGPIO+0x4a>
		if (data & (1 << i)) {
 174:	48 2f       	mov	r20, r24
 176:	50 e0       	ldi	r21, 0x00	; 0
 178:	02 2e       	mov	r0, r18
 17a:	02 c0       	rjmp	.+4      	; 0x180 <sendByteGPIO+0x24>
 17c:	55 95       	asr	r21
 17e:	47 95       	ror	r20
 180:	0a 94       	dec	r0
 182:	e2 f7       	brpl	.-8      	; 0x17c <sendByteGPIO+0x20>
 184:	40 ff       	sbrs	r20, 0
 186:	04 c0       	rjmp	.+8      	; 0x190 <sendByteGPIO+0x34>
			PORTB |= (1 << TX_PIN); // Enviar bit alto
 188:	95 b1       	in	r25, 0x05	; 5
 18a:	91 60       	ori	r25, 0x01	; 1
 18c:	95 b9       	out	0x05, r25	; 5
 18e:	03 c0       	rjmp	.+6      	; 0x196 <sendByteGPIO+0x3a>
			} else {
			PORTB &= ~(1 << TX_PIN); // Enviar bit bajo
 190:	95 b1       	in	r25, 0x05	; 5
 192:	9e 7f       	andi	r25, 0xFE	; 254
 194:	95 b9       	out	0x05, r25	; 5
 196:	ef e9       	ldi	r30, 0x9F	; 159
 198:	f1 e0       	ldi	r31, 0x01	; 1
 19a:	31 97       	sbiw	r30, 0x01	; 1
 19c:	f1 f7       	brne	.-4      	; 0x19a <sendByteGPIO+0x3e>
 19e:	00 c0       	rjmp	.+0      	; 0x1a0 <sendByteGPIO+0x44>
 1a0:	00 00       	nop
void sendByteGPIO(uint8_t data) {
	// Enviar un byte a través de PB0 (TX)
	PORTB &= ~(1 << TX_PIN); // Start bit
	_delay_us(d_baud); // Esperar

	for (int i = 0; i < 8; i++) {
 1a2:	2f 5f       	subi	r18, 0xFF	; 255
 1a4:	3f 4f       	sbci	r19, 0xFF	; 255
 1a6:	28 30       	cpi	r18, 0x08	; 8
 1a8:	31 05       	cpc	r19, r1
 1aa:	24 f3       	brlt	.-56     	; 0x174 <sendByteGPIO+0x18>
			PORTB &= ~(1 << TX_PIN); // Enviar bit bajo
		}
		_delay_us(d_baud); // Esperar por el siguiente bit
	}

	PORTB |= (1 << TX_PIN); // Stop bit
 1ac:	85 b1       	in	r24, 0x05	; 5
 1ae:	81 60       	ori	r24, 0x01	; 1
 1b0:	85 b9       	out	0x05, r24	; 5
 1b2:	8f e9       	ldi	r24, 0x9F	; 159
 1b4:	91 e0       	ldi	r25, 0x01	; 1
 1b6:	01 97       	sbiw	r24, 0x01	; 1
 1b8:	f1 f7       	brne	.-4      	; 0x1b6 <sendByteGPIO+0x5a>
 1ba:	00 c0       	rjmp	.+0      	; 0x1bc <sendByteGPIO+0x60>
 1bc:	00 00       	nop
 1be:	08 95       	ret

Disassembly of section .text.receiveByteGPIO:

0000021c <receiveByteGPIO>:

uint8_t receiveByteGPIO() {
	uint8_t data = 0;

	// Esperar a que el pin RX (PB1) sea bajo (start bit)
	while (PINB & (1 << RX_PIN));
 21c:	19 99       	sbic	0x03, 1	; 3
 21e:	fe cf       	rjmp	.-4      	; 0x21c <receiveByteGPIO>
 220:	8f e9       	ldi	r24, 0x9F	; 159
 222:	91 e0       	ldi	r25, 0x01	; 1
 224:	01 97       	sbiw	r24, 0x01	; 1
 226:	f1 f7       	brne	.-4      	; 0x224 <receiveByteGPIO+0x8>
 228:	00 c0       	rjmp	.+0      	; 0x22a <receiveByteGPIO+0xe>
 22a:	00 00       	nop
	_delay_us(d_baud); // Esperar a que el primer bit se estabilice

	for (int i = 0; i < 8; i++) {
 22c:	20 e0       	ldi	r18, 0x00	; 0
 22e:	30 e0       	ldi	r19, 0x00	; 0
	PORTB |= (1 << TX_PIN); // Stop bit
	_delay_us(d_baud); // Esperar antes de enviar el siguiente byte
}

uint8_t receiveByteGPIO() {
	uint8_t data = 0;
 230:	80 e0       	ldi	r24, 0x00	; 0

	// Esperar a que el pin RX (PB1) sea bajo (start bit)
	while (PINB & (1 << RX_PIN));
	_delay_us(d_baud); // Esperar a que el primer bit se estabilice

	for (int i = 0; i < 8; i++) {
 232:	13 c0       	rjmp	.+38     	; 0x25a <receiveByteGPIO+0x3e>
		if (PINB & (1 << RX_PIN)) {
 234:	19 9b       	sbis	0x03, 1	; 3
 236:	09 c0       	rjmp	.+18     	; 0x24a <receiveByteGPIO+0x2e>
			data |= (1 << i); // Leer bit
 238:	41 e0       	ldi	r20, 0x01	; 1
 23a:	50 e0       	ldi	r21, 0x00	; 0
 23c:	02 2e       	mov	r0, r18
 23e:	02 c0       	rjmp	.+4      	; 0x244 <receiveByteGPIO+0x28>
 240:	44 0f       	add	r20, r20
 242:	55 1f       	adc	r21, r21
 244:	0a 94       	dec	r0
 246:	e2 f7       	brpl	.-8      	; 0x240 <receiveByteGPIO+0x24>
 248:	84 2b       	or	r24, r20
 24a:	ef e9       	ldi	r30, 0x9F	; 159
 24c:	f1 e0       	ldi	r31, 0x01	; 1
 24e:	31 97       	sbiw	r30, 0x01	; 1
 250:	f1 f7       	brne	.-4      	; 0x24e <receiveByteGPIO+0x32>
 252:	00 c0       	rjmp	.+0      	; 0x254 <receiveByteGPIO+0x38>
 254:	00 00       	nop

	// Esperar a que el pin RX (PB1) sea bajo (start bit)
	while (PINB & (1 << RX_PIN));
	_delay_us(d_baud); // Esperar a que el primer bit se estabilice

	for (int i = 0; i < 8; i++) {
 256:	2f 5f       	subi	r18, 0xFF	; 255
 258:	3f 4f       	sbci	r19, 0xFF	; 255
 25a:	28 30       	cpi	r18, 0x08	; 8
 25c:	31 05       	cpc	r19, r1
 25e:	54 f3       	brlt	.-44     	; 0x234 <receiveByteGPIO+0x18>
		}
		_delay_us(d_baud); // Esperar por el siguiente bit
	}

	// Esperar a que el pin RX sea alto (stop bit)
	while (!(PINB & (1 << RX_PIN)));
 260:	19 9b       	sbis	0x03, 1	; 3
 262:	fe cf       	rjmp	.-4      	; 0x260 <receiveByteGPIO+0x44>

	return data;
}
 264:	08 95       	ret

Disassembly of section .text.ModoAutomatico:

00000080 <ModoAutomatico>:
#define VacioON PORTD |= (1 << PD3);
#define VacioOFF PORTD &= ~(1 << PD3);
#define ExtenderPEtiqueta PORTD |= (1 << PD4);
#define ContraerPEtiqueta PORTD &= ~(1 << PD4);
void ModoAutomatico(){
	for (int i =0; i <2; i++){
  80:	80 e0       	ldi	r24, 0x00	; 0
  82:	90 e0       	ldi	r25, 0x00	; 0
  84:	19 c0       	rjmp	.+50     	; 0xb8 <ModoAutomatico+0x38>
		Encender13
  86:	25 b1       	in	r18, 0x05	; 5
  88:	20 62       	ori	r18, 0x20	; 32
  8a:	25 b9       	out	0x05, r18	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  8c:	2f ef       	ldi	r18, 0xFF	; 255
  8e:	39 e6       	ldi	r19, 0x69	; 105
  90:	48 e1       	ldi	r20, 0x18	; 24
  92:	21 50       	subi	r18, 0x01	; 1
  94:	30 40       	sbci	r19, 0x00	; 0
  96:	40 40       	sbci	r20, 0x00	; 0
  98:	e1 f7       	brne	.-8      	; 0x92 <ModoAutomatico+0x12>
  9a:	00 c0       	rjmp	.+0      	; 0x9c <ModoAutomatico+0x1c>
  9c:	00 00       	nop
		_delay_ms(500);
		Apagar13
  9e:	25 b1       	in	r18, 0x05	; 5
  a0:	2f 7d       	andi	r18, 0xDF	; 223
  a2:	25 b9       	out	0x05, r18	; 5
  a4:	2f ef       	ldi	r18, 0xFF	; 255
  a6:	39 e6       	ldi	r19, 0x69	; 105
  a8:	48 e1       	ldi	r20, 0x18	; 24
  aa:	21 50       	subi	r18, 0x01	; 1
  ac:	30 40       	sbci	r19, 0x00	; 0
  ae:	40 40       	sbci	r20, 0x00	; 0
  b0:	e1 f7       	brne	.-8      	; 0xaa <ModoAutomatico+0x2a>
  b2:	00 c0       	rjmp	.+0      	; 0xb4 <ModoAutomatico+0x34>
  b4:	00 00       	nop
#define VacioON PORTD |= (1 << PD3);
#define VacioOFF PORTD &= ~(1 << PD3);
#define ExtenderPEtiqueta PORTD |= (1 << PD4);
#define ContraerPEtiqueta PORTD &= ~(1 << PD4);
void ModoAutomatico(){
	for (int i =0; i <2; i++){
  b6:	01 96       	adiw	r24, 0x01	; 1
  b8:	82 30       	cpi	r24, 0x02	; 2
  ba:	91 05       	cpc	r25, r1
  bc:	24 f3       	brlt	.-56     	; 0x86 <ModoAutomatico+0x6>
		Encender13
		_delay_ms(500);
		Apagar13
		_delay_ms(500); //Enciendo unos leds para indicar que se entró en el modo de etiquetar.
	}
	ExtenderPCaja
  be:	8b b1       	in	r24, 0x0b	; 11
  c0:	84 60       	ori	r24, 0x04	; 4
  c2:	8b b9       	out	0x0b, r24	; 11
  c4:	8f ef       	ldi	r24, 0xFF	; 255
  c6:	93 e2       	ldi	r25, 0x23	; 35
  c8:	24 ef       	ldi	r18, 0xF4	; 244
  ca:	81 50       	subi	r24, 0x01	; 1
  cc:	90 40       	sbci	r25, 0x00	; 0
  ce:	20 40       	sbci	r18, 0x00	; 0
  d0:	e1 f7       	brne	.-8      	; 0xca <ModoAutomatico+0x4a>
  d2:	00 c0       	rjmp	.+0      	; 0xd4 <ModoAutomatico+0x54>
  d4:	00 00       	nop
	_delay_ms(5000);
	ExtenderPEtiqueta
  d6:	8b b1       	in	r24, 0x0b	; 11
  d8:	80 61       	ori	r24, 0x10	; 16
  da:	8b b9       	out	0x0b, r24	; 11
  dc:	3f ef       	ldi	r19, 0xFF	; 255
  de:	4d e3       	ldi	r20, 0x3D	; 61
  e0:	89 e4       	ldi	r24, 0x49	; 73
  e2:	31 50       	subi	r19, 0x01	; 1
  e4:	40 40       	sbci	r20, 0x00	; 0
  e6:	80 40       	sbci	r24, 0x00	; 0
  e8:	e1 f7       	brne	.-8      	; 0xe2 <ModoAutomatico+0x62>
  ea:	00 c0       	rjmp	.+0      	; 0xec <ModoAutomatico+0x6c>
  ec:	00 00       	nop
	_delay_ms(1500);
	VacioON //Es para que el pistón de la etiqueta agarre una etiqueta, la suelta con OFF
  ee:	8b b1       	in	r24, 0x0b	; 11
  f0:	88 60       	ori	r24, 0x08	; 8
  f2:	8b b9       	out	0x0b, r24	; 11
  f4:	9f ef       	ldi	r25, 0xFF	; 255
  f6:	21 ee       	ldi	r18, 0xE1	; 225
  f8:	34 e0       	ldi	r19, 0x04	; 4
  fa:	91 50       	subi	r25, 0x01	; 1
  fc:	20 40       	sbci	r18, 0x00	; 0
  fe:	30 40       	sbci	r19, 0x00	; 0
 100:	e1 f7       	brne	.-8      	; 0xfa <ModoAutomatico+0x7a>
 102:	00 c0       	rjmp	.+0      	; 0x104 <ModoAutomatico+0x84>
 104:	00 00       	nop
	_delay_ms(100);
	ContraerPEtiqueta
 106:	8b b1       	in	r24, 0x0b	; 11
 108:	8f 7e       	andi	r24, 0xEF	; 239
 10a:	8b b9       	out	0x0b, r24	; 11
 10c:	4f ef       	ldi	r20, 0xFF	; 255
 10e:	83 ed       	ldi	r24, 0xD3	; 211
 110:	90 e3       	ldi	r25, 0x30	; 48
 112:	41 50       	subi	r20, 0x01	; 1
 114:	80 40       	sbci	r24, 0x00	; 0
 116:	90 40       	sbci	r25, 0x00	; 0
 118:	e1 f7       	brne	.-8      	; 0x112 <ModoAutomatico+0x92>
 11a:	00 c0       	rjmp	.+0      	; 0x11c <ModoAutomatico+0x9c>
 11c:	00 00       	nop
	_delay_ms(1000);
	ContraerPCaja
 11e:	8b b1       	in	r24, 0x0b	; 11
 120:	8b 7f       	andi	r24, 0xFB	; 251
 122:	8b b9       	out	0x0b, r24	; 11
 124:	2f ef       	ldi	r18, 0xFF	; 255
 126:	37 ea       	ldi	r19, 0xA7	; 167
 128:	41 e6       	ldi	r20, 0x61	; 97
 12a:	21 50       	subi	r18, 0x01	; 1
 12c:	30 40       	sbci	r19, 0x00	; 0
 12e:	40 40       	sbci	r20, 0x00	; 0
 130:	e1 f7       	brne	.-8      	; 0x12a <ModoAutomatico+0xaa>
 132:	00 c0       	rjmp	.+0      	; 0x134 <ModoAutomatico+0xb4>
 134:	00 00       	nop
	_delay_ms(2000);
	ExtenderPEtiqueta
 136:	8b b1       	in	r24, 0x0b	; 11
 138:	80 61       	ori	r24, 0x10	; 16
 13a:	8b b9       	out	0x0b, r24	; 11
 13c:	8f ef       	ldi	r24, 0xFF	; 255
 13e:	97 ea       	ldi	r25, 0xA7	; 167
 140:	21 e6       	ldi	r18, 0x61	; 97
 142:	81 50       	subi	r24, 0x01	; 1
 144:	90 40       	sbci	r25, 0x00	; 0
 146:	20 40       	sbci	r18, 0x00	; 0
 148:	e1 f7       	brne	.-8      	; 0x142 <ModoAutomatico+0xc2>
 14a:	00 c0       	rjmp	.+0      	; 0x14c <ModoAutomatico+0xcc>
 14c:	00 00       	nop
	_delay_ms(2000);
	VacioOFF
 14e:	8b b1       	in	r24, 0x0b	; 11
 150:	87 7f       	andi	r24, 0xF7	; 247
 152:	8b b9       	out	0x0b, r24	; 11
	ContraerPEtiqueta
 154:	8b b1       	in	r24, 0x0b	; 11
 156:	8f 7e       	andi	r24, 0xEF	; 239
 158:	8b b9       	out	0x0b, r24	; 11
 15a:	08 95       	ret

Disassembly of section .text.RecibirYMandarDatos:

000001c0 <RecibirYMandarDatos>:
}

void RecibirYMandarDatos(){
 1c0:	cf 93       	push	r28
	uint8_t receivedGPIO = receiveByteGPIO();
 1c2:	0e 94 0e 01 	call	0x21c	; 0x21c <receiveByteGPIO>
 1c6:	c8 2f       	mov	r28, r24
	uint8_t EnviarDato = 0;
	USART_Transmit(receivedGPIO); // Enviar el dato recibido por GPIO
 1c8:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <USART_Transmit>
	if (receivedGPIO & (1<< BitAuto)){
 1cc:	c0 ff       	sbrs	r28, 0
 1ce:	03 c0       	rjmp	.+6      	; 0x1d6 <RecibirYMandarDatos+0x16>
		ModoAutomatico();
 1d0:	0e 94 40 00 	call	0x80	; 0x80 <__data_load_end>
		EnviarDato |= (1<<BitAuto);
		return;
 1d4:	21 c0       	rjmp	.+66     	; 0x218 <RecibirYMandarDatos+0x58>
	}
	if (receivedGPIO & (1<< BitCaja)){
 1d6:	c1 ff       	sbrs	r28, 1
 1d8:	05 c0       	rjmp	.+10     	; 0x1e4 <RecibirYMandarDatos+0x24>
		ExtenderPCaja
 1da:	8b b1       	in	r24, 0x0b	; 11
 1dc:	84 60       	ori	r24, 0x04	; 4
 1de:	8b b9       	out	0x0b, r24	; 11
		EnviarDato |= (1<<BitCaja);
 1e0:	82 e0       	ldi	r24, 0x02	; 2
 1e2:	04 c0       	rjmp	.+8      	; 0x1ec <RecibirYMandarDatos+0x2c>
	}
	else
	{
		ContraerPCaja
 1e4:	8b b1       	in	r24, 0x0b	; 11
 1e6:	8b 7f       	andi	r24, 0xFB	; 251
 1e8:	8b b9       	out	0x0b, r24	; 11
	ContraerPEtiqueta
}

void RecibirYMandarDatos(){
	uint8_t receivedGPIO = receiveByteGPIO();
	uint8_t EnviarDato = 0;
 1ea:	80 e0       	ldi	r24, 0x00	; 0
	}
	else
	{
		ContraerPCaja
	}
	if (receivedGPIO & (1<< BitEtiqueta)){
 1ec:	c2 ff       	sbrs	r28, 2
 1ee:	05 c0       	rjmp	.+10     	; 0x1fa <RecibirYMandarDatos+0x3a>
		ExtenderPEtiqueta
 1f0:	9b b1       	in	r25, 0x0b	; 11
 1f2:	90 61       	ori	r25, 0x10	; 16
 1f4:	9b b9       	out	0x0b, r25	; 11
		EnviarDato |= (1<<BitEtiqueta);
 1f6:	84 60       	ori	r24, 0x04	; 4
 1f8:	03 c0       	rjmp	.+6      	; 0x200 <RecibirYMandarDatos+0x40>
	}
	else
	{
		ContraerPEtiqueta
 1fa:	9b b1       	in	r25, 0x0b	; 11
 1fc:	9f 7e       	andi	r25, 0xEF	; 239
 1fe:	9b b9       	out	0x0b, r25	; 11
		
	}
	if (receivedGPIO & (1<< BitVacio)){
 200:	c3 ff       	sbrs	r28, 3
 202:	05 c0       	rjmp	.+10     	; 0x20e <RecibirYMandarDatos+0x4e>
		VacioON
 204:	9b b1       	in	r25, 0x0b	; 11
 206:	98 60       	ori	r25, 0x08	; 8
 208:	9b b9       	out	0x0b, r25	; 11
		EnviarDato |= (1<<BitVacio);
 20a:	88 60       	ori	r24, 0x08	; 8
 20c:	03 c0       	rjmp	.+6      	; 0x214 <RecibirYMandarDatos+0x54>
	}
	else{
		VacioOFF
 20e:	9b b1       	in	r25, 0x0b	; 11
 210:	97 7f       	andi	r25, 0xF7	; 247
 212:	9b b9       	out	0x0b, r25	; 11
	}
	sendByteGPIO(EnviarDato);
 214:	0e 94 ae 00 	call	0x15c	; 0x15c <sendByteGPIO>
}
 218:	cf 91       	pop	r28
 21a:	08 95       	ret

Disassembly of section .text.main:

00000266 <main>:
int main() {
	initSerial();
 266:	0e 94 63 01 	call	0x2c6	; 0x2c6 <initSerial>
	USART_Init();
 26a:	0e 94 4c 01 	call	0x298	; 0x298 <USART_Init>
	USART_Transmit('H');
 26e:	88 e4       	ldi	r24, 0x48	; 72
 270:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <USART_Transmit>
	DDRB |= (1 << PB5);
 274:	84 b1       	in	r24, 0x04	; 4
 276:	80 62       	ori	r24, 0x20	; 32
 278:	84 b9       	out	0x04, r24	; 4
	DDRD |= (1 << PD2) | (1 << PD3) | (1 << PD4);
 27a:	8a b1       	in	r24, 0x0a	; 10
 27c:	8c 61       	ori	r24, 0x1C	; 28
 27e:	8a b9       	out	0x0a, r24	; 10
	
	while (1) {
		if (!(PINB & (1 << RX_PIN))) {
 280:	19 9b       	sbis	0x03, 1	; 3
			RecibirYMandarDatos();
 282:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <RecibirYMandarDatos>
		}
		
		if (UCSR0A & (1 << RXC0)) {
 286:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 28a:	88 23       	and	r24, r24
 28c:	cc f7       	brge	.-14     	; 0x280 <main+0x1a>
			uint8_t receivedUSART = USART_Receive();
 28e:	0e 94 71 01 	call	0x2e2	; 0x2e2 <USART_Receive>
			sendByteGPIO(receivedUSART); // Enviar el dato recibido por USART
 292:	0e 94 ae 00 	call	0x15c	; 0x15c <sendByteGPIO>
 296:	f4 cf       	rjmp	.-24     	; 0x280 <main+0x1a>

Disassembly of section .text.__dummy_fini:

000002f8 <_fini>:
 2f8:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

000002fa <__funcs_on_exit>:
 2fa:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

000002fc <__simulator_exit>:
 2fc:	08 95       	ret

Disassembly of section .text.exit:

000002b0 <exit>:
 2b0:	ec 01       	movw	r28, r24
 2b2:	0e 94 7d 01 	call	0x2fa	; 0x2fa <__funcs_on_exit>
 2b6:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <_fini>
 2ba:	ce 01       	movw	r24, r28
 2bc:	0e 94 7e 01 	call	0x2fc	; 0x2fc <__simulator_exit>
 2c0:	ce 01       	movw	r24, r28
 2c2:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <_Exit>

Disassembly of section .text._Exit:

000002f4 <_Exit>:
 2f4:	0e 94 3e 00 	call	0x7c	; 0x7c <_exit>
