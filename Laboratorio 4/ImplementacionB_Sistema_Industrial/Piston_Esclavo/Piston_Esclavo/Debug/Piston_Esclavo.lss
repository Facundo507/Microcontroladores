
Piston_Esclavo.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000003a2  2**0
                  ALLOC, LOAD, DATA
  1 .text         00000080  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  000003a2  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000000e  00000000  00000000  000003d1  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  000003df  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000efc  00000000  00000000  0000042f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000784  00000000  00000000  0000132b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004eb  00000000  00000000  00001aaf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000084  00000000  00000000  00001f9c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000022e  00000000  00000000  00002020  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000005a8  00000000  00000000  0000224e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000088  00000000  00000000  000027f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  00000320  00000320  00000394  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002880  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.initSerial 0000000e  000002f6  000002f6  0000036a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.USART_Init 00000018  000002c8  000002c8  0000033c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.USART_Transmit 0000000e  00000304  00000304  00000378  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.USART_Receive 0000000e  00000312  00000312  00000386  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.sendByteGPIO 00000064  0000021a  0000021a  0000028e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.receiveByteGPIO 0000004a  0000027e  0000027e  000002f2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.main    0000019a  00000080  00000080  000000f4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.__dummy_fini 00000002  00000328  00000328  0000039c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.__dummy_funcs_on_exit 00000002  0000032a  0000032a  0000039e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.__dummy_simulator_exit 00000002  0000032c  0000032c  000003a0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text.exit    00000016  000002e0  000002e0  00000354  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text._Exit   00000004  00000324  00000324  00000398  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 90 01 	jmp	0x320	; 0x320 <__bad_interrupt>
   8:	0c 94 90 01 	jmp	0x320	; 0x320 <__bad_interrupt>
   c:	0c 94 90 01 	jmp	0x320	; 0x320 <__bad_interrupt>
  10:	0c 94 90 01 	jmp	0x320	; 0x320 <__bad_interrupt>
  14:	0c 94 90 01 	jmp	0x320	; 0x320 <__bad_interrupt>
  18:	0c 94 90 01 	jmp	0x320	; 0x320 <__bad_interrupt>
  1c:	0c 94 90 01 	jmp	0x320	; 0x320 <__bad_interrupt>
  20:	0c 94 90 01 	jmp	0x320	; 0x320 <__bad_interrupt>
  24:	0c 94 90 01 	jmp	0x320	; 0x320 <__bad_interrupt>
  28:	0c 94 90 01 	jmp	0x320	; 0x320 <__bad_interrupt>
  2c:	0c 94 90 01 	jmp	0x320	; 0x320 <__bad_interrupt>
  30:	0c 94 90 01 	jmp	0x320	; 0x320 <__bad_interrupt>
  34:	0c 94 90 01 	jmp	0x320	; 0x320 <__bad_interrupt>
  38:	0c 94 90 01 	jmp	0x320	; 0x320 <__bad_interrupt>
  3c:	0c 94 90 01 	jmp	0x320	; 0x320 <__bad_interrupt>
  40:	0c 94 90 01 	jmp	0x320	; 0x320 <__bad_interrupt>
  44:	0c 94 90 01 	jmp	0x320	; 0x320 <__bad_interrupt>
  48:	0c 94 90 01 	jmp	0x320	; 0x320 <__bad_interrupt>
  4c:	0c 94 90 01 	jmp	0x320	; 0x320 <__bad_interrupt>
  50:	0c 94 90 01 	jmp	0x320	; 0x320 <__bad_interrupt>
  54:	0c 94 90 01 	jmp	0x320	; 0x320 <__bad_interrupt>
  58:	0c 94 90 01 	jmp	0x320	; 0x320 <__bad_interrupt>
  5c:	0c 94 90 01 	jmp	0x320	; 0x320 <__bad_interrupt>
  60:	0c 94 90 01 	jmp	0x320	; 0x320 <__bad_interrupt>
  64:	0c 94 90 01 	jmp	0x320	; 0x320 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <_etext>
  78:	0c 94 70 01 	jmp	0x2e0	; 0x2e0 <exit>

0000007c <_exit>:
  7c:	f8 94       	cli

0000007e <__stop_program>:
  7e:	ff cf       	rjmp	.-2      	; 0x7e <__stop_program>

Disassembly of section .text:

00000320 <__bad_interrupt>:
 320:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.initSerial:

000002f6 <initSerial>:

#define d_baud 104

void initSerial() {
	// Configura PB0 como salida (TX)
	DDRB |= (1 << TX_PIN);
 2f6:	84 b1       	in	r24, 0x04	; 4
 2f8:	81 60       	ori	r24, 0x01	; 1
 2fa:	84 b9       	out	0x04, r24	; 4
	// Configura PB1 como entrada (RX)
	DDRB &= ~(1 << RX_PIN);
 2fc:	84 b1       	in	r24, 0x04	; 4
 2fe:	8d 7f       	andi	r24, 0xFD	; 253
 300:	84 b9       	out	0x04, r24	; 4
 302:	08 95       	ret

Disassembly of section .text.USART_Init:

000002c8 <USART_Init>:
}

void USART_Init() {
	UBRR0H = (MY_UBRR >> 8);
 2c8:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = MY_UBRR;
 2cc:	87 e6       	ldi	r24, 0x67	; 103
 2ce:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);
 2d2:	88 e1       	ldi	r24, 0x18	; 24
 2d4:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
 2d8:	86 e0       	ldi	r24, 0x06	; 6
 2da:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 2de:	08 95       	ret

Disassembly of section .text.USART_Transmit:

00000304 <USART_Transmit>:
}

void USART_Transmit(unsigned char data) {
	while (!(UCSR0A & (1 << UDRE0)));
 304:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 308:	95 ff       	sbrs	r25, 5
 30a:	fc cf       	rjmp	.-8      	; 0x304 <USART_Transmit>
	UDR0 = data;
 30c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 310:	08 95       	ret

Disassembly of section .text.USART_Receive:

00000312 <USART_Receive>:
}

unsigned char USART_Receive(void) {
	while (!(UCSR0A & (1 << RXC0)));
 312:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 316:	88 23       	and	r24, r24
 318:	e4 f7       	brge	.-8      	; 0x312 <USART_Receive>
	return UDR0;
 31a:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
}
 31e:	08 95       	ret

Disassembly of section .text.sendByteGPIO:

0000021a <sendByteGPIO>:

void sendByteGPIO(uint8_t data) {
	// Enviar un byte a través de PB0 (TX)
	PORTB &= ~(1 << TX_PIN); // Start bit
 21a:	95 b1       	in	r25, 0x05	; 5
 21c:	9e 7f       	andi	r25, 0xFE	; 254
 21e:	95 b9       	out	0x05, r25	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 220:	ef e9       	ldi	r30, 0x9F	; 159
 222:	f1 e0       	ldi	r31, 0x01	; 1
 224:	31 97       	sbiw	r30, 0x01	; 1
 226:	f1 f7       	brne	.-4      	; 0x224 <sendByteGPIO+0xa>
 228:	00 c0       	rjmp	.+0      	; 0x22a <sendByteGPIO+0x10>
 22a:	00 00       	nop
	_delay_us(d_baud); // Esperar

	for (int i = 0; i < 8; i++) {
 22c:	20 e0       	ldi	r18, 0x00	; 0
 22e:	30 e0       	ldi	r19, 0x00	; 0
 230:	19 c0       	rjmp	.+50     	; 0x264 <sendByteGPIO+0x4a>
		if (data & (1 << i)) {
 232:	48 2f       	mov	r20, r24
 234:	50 e0       	ldi	r21, 0x00	; 0
 236:	02 2e       	mov	r0, r18
 238:	02 c0       	rjmp	.+4      	; 0x23e <sendByteGPIO+0x24>
 23a:	55 95       	asr	r21
 23c:	47 95       	ror	r20
 23e:	0a 94       	dec	r0
 240:	e2 f7       	brpl	.-8      	; 0x23a <sendByteGPIO+0x20>
 242:	40 ff       	sbrs	r20, 0
 244:	04 c0       	rjmp	.+8      	; 0x24e <sendByteGPIO+0x34>
			PORTB |= (1 << TX_PIN); // Enviar bit alto
 246:	95 b1       	in	r25, 0x05	; 5
 248:	91 60       	ori	r25, 0x01	; 1
 24a:	95 b9       	out	0x05, r25	; 5
 24c:	03 c0       	rjmp	.+6      	; 0x254 <sendByteGPIO+0x3a>
			} else {
			PORTB &= ~(1 << TX_PIN); // Enviar bit bajo
 24e:	95 b1       	in	r25, 0x05	; 5
 250:	9e 7f       	andi	r25, 0xFE	; 254
 252:	95 b9       	out	0x05, r25	; 5
 254:	ef e9       	ldi	r30, 0x9F	; 159
 256:	f1 e0       	ldi	r31, 0x01	; 1
 258:	31 97       	sbiw	r30, 0x01	; 1
 25a:	f1 f7       	brne	.-4      	; 0x258 <sendByteGPIO+0x3e>
 25c:	00 c0       	rjmp	.+0      	; 0x25e <sendByteGPIO+0x44>
 25e:	00 00       	nop
void sendByteGPIO(uint8_t data) {
	// Enviar un byte a través de PB0 (TX)
	PORTB &= ~(1 << TX_PIN); // Start bit
	_delay_us(d_baud); // Esperar

	for (int i = 0; i < 8; i++) {
 260:	2f 5f       	subi	r18, 0xFF	; 255
 262:	3f 4f       	sbci	r19, 0xFF	; 255
 264:	28 30       	cpi	r18, 0x08	; 8
 266:	31 05       	cpc	r19, r1
 268:	24 f3       	brlt	.-56     	; 0x232 <sendByteGPIO+0x18>
			PORTB &= ~(1 << TX_PIN); // Enviar bit bajo
		}
		_delay_us(d_baud); // Esperar por el siguiente bit
	}

	PORTB |= (1 << TX_PIN); // Stop bit
 26a:	85 b1       	in	r24, 0x05	; 5
 26c:	81 60       	ori	r24, 0x01	; 1
 26e:	85 b9       	out	0x05, r24	; 5
 270:	8f e9       	ldi	r24, 0x9F	; 159
 272:	91 e0       	ldi	r25, 0x01	; 1
 274:	01 97       	sbiw	r24, 0x01	; 1
 276:	f1 f7       	brne	.-4      	; 0x274 <sendByteGPIO+0x5a>
 278:	00 c0       	rjmp	.+0      	; 0x27a <sendByteGPIO+0x60>
 27a:	00 00       	nop
 27c:	08 95       	ret

Disassembly of section .text.receiveByteGPIO:

0000027e <receiveByteGPIO>:

uint8_t receiveByteGPIO() {
	uint8_t data = 0;

	// Esperar a que el pin RX (PB1) sea bajo (start bit)
	while (PINB & (1 << RX_PIN));
 27e:	19 99       	sbic	0x03, 1	; 3
 280:	fe cf       	rjmp	.-4      	; 0x27e <receiveByteGPIO>
 282:	8f e9       	ldi	r24, 0x9F	; 159
 284:	91 e0       	ldi	r25, 0x01	; 1
 286:	01 97       	sbiw	r24, 0x01	; 1
 288:	f1 f7       	brne	.-4      	; 0x286 <receiveByteGPIO+0x8>
 28a:	00 c0       	rjmp	.+0      	; 0x28c <receiveByteGPIO+0xe>
 28c:	00 00       	nop
	_delay_us(d_baud); // Esperar a que el primer bit se estabilice

	for (int i = 0; i < 8; i++) {
 28e:	20 e0       	ldi	r18, 0x00	; 0
 290:	30 e0       	ldi	r19, 0x00	; 0
	PORTB |= (1 << TX_PIN); // Stop bit
	_delay_us(d_baud); // Esperar antes de enviar el siguiente byte
}

uint8_t receiveByteGPIO() {
	uint8_t data = 0;
 292:	80 e0       	ldi	r24, 0x00	; 0

	// Esperar a que el pin RX (PB1) sea bajo (start bit)
	while (PINB & (1 << RX_PIN));
	_delay_us(d_baud); // Esperar a que el primer bit se estabilice

	for (int i = 0; i < 8; i++) {
 294:	13 c0       	rjmp	.+38     	; 0x2bc <receiveByteGPIO+0x3e>
		if (PINB & (1 << RX_PIN)) {
 296:	19 9b       	sbis	0x03, 1	; 3
 298:	09 c0       	rjmp	.+18     	; 0x2ac <receiveByteGPIO+0x2e>
			data |= (1 << i); // Leer bit
 29a:	41 e0       	ldi	r20, 0x01	; 1
 29c:	50 e0       	ldi	r21, 0x00	; 0
 29e:	02 2e       	mov	r0, r18
 2a0:	02 c0       	rjmp	.+4      	; 0x2a6 <receiveByteGPIO+0x28>
 2a2:	44 0f       	add	r20, r20
 2a4:	55 1f       	adc	r21, r21
 2a6:	0a 94       	dec	r0
 2a8:	e2 f7       	brpl	.-8      	; 0x2a2 <receiveByteGPIO+0x24>
 2aa:	84 2b       	or	r24, r20
 2ac:	ef e9       	ldi	r30, 0x9F	; 159
 2ae:	f1 e0       	ldi	r31, 0x01	; 1
 2b0:	31 97       	sbiw	r30, 0x01	; 1
 2b2:	f1 f7       	brne	.-4      	; 0x2b0 <receiveByteGPIO+0x32>
 2b4:	00 c0       	rjmp	.+0      	; 0x2b6 <receiveByteGPIO+0x38>
 2b6:	00 00       	nop

	// Esperar a que el pin RX (PB1) sea bajo (start bit)
	while (PINB & (1 << RX_PIN));
	_delay_us(d_baud); // Esperar a que el primer bit se estabilice

	for (int i = 0; i < 8; i++) {
 2b8:	2f 5f       	subi	r18, 0xFF	; 255
 2ba:	3f 4f       	sbci	r19, 0xFF	; 255
 2bc:	28 30       	cpi	r18, 0x08	; 8
 2be:	31 05       	cpc	r19, r1
 2c0:	54 f3       	brlt	.-44     	; 0x296 <receiveByteGPIO+0x18>
		}
		_delay_us(d_baud); // Esperar por el siguiente bit
	}

	// Esperar a que el pin RX sea alto (stop bit)
	while (!(PINB & (1 << RX_PIN)));
 2c2:	19 9b       	sbis	0x03, 1	; 3
 2c4:	fe cf       	rjmp	.-4      	; 0x2c2 <receiveByteGPIO+0x44>

	return data;
}
 2c6:	08 95       	ret

Disassembly of section .text.main:

00000080 <main>:
#define VacioOFF PORTD &= ~(1 << PD3);
#define ExtenderPEtiqueta PORTD |= (1 << PD4);
#define ContraerPEtiqueta PORTD &= ~(1 << PD4);

int main() {
	initSerial();
  80:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <initSerial>
	USART_Init();
  84:	0e 94 64 01 	call	0x2c8	; 0x2c8 <USART_Init>
	USART_Transmit('H');
  88:	88 e4       	ldi	r24, 0x48	; 72
  8a:	0e 94 82 01 	call	0x304	; 0x304 <USART_Transmit>
	DDRB |= (1 << PB5);
  8e:	84 b1       	in	r24, 0x04	; 4
  90:	80 62       	ori	r24, 0x20	; 32
  92:	84 b9       	out	0x04, r24	; 4
	DDRD |= (1 << PD2) | (1 << PD3) | (1 << PD4);
  94:	8a b1       	in	r24, 0x0a	; 10
  96:	8c 61       	ori	r24, 0x1C	; 28
  98:	8a b9       	out	0x0a, r24	; 10
	
	while (1) {
		if (!(PINB & (1 << RX_PIN))) {
  9a:	19 99       	sbic	0x03, 1	; 3
  9c:	b4 c0       	rjmp	.+360    	; 0x206 <main+0x186>
			uint8_t receivedGPIO = receiveByteGPIO();
  9e:	0e 94 3f 01 	call	0x27e	; 0x27e <receiveByteGPIO>
  a2:	c8 2f       	mov	r28, r24
			USART_Transmit(receivedGPIO); // Enviar el dato recibido por GPIO
  a4:	0e 94 82 01 	call	0x304	; 0x304 <USART_Transmit>
			if (receivedGPIO == 'a'){
  a8:	c1 36       	cpi	r28, 0x61	; 97
  aa:	09 f0       	breq	.+2      	; 0xae <main+0x2e>
  ac:	70 c0       	rjmp	.+224    	; 0x18e <main+0x10e>
  ae:	1b c0       	rjmp	.+54     	; 0xe6 <main+0x66>
				for (int i =0; i <2; i++){
					Encender13
  b0:	85 b1       	in	r24, 0x05	; 5
  b2:	80 62       	ori	r24, 0x20	; 32
  b4:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b6:	4f ef       	ldi	r20, 0xFF	; 255
  b8:	89 e6       	ldi	r24, 0x69	; 105
  ba:	98 e1       	ldi	r25, 0x18	; 24
  bc:	41 50       	subi	r20, 0x01	; 1
  be:	80 40       	sbci	r24, 0x00	; 0
  c0:	90 40       	sbci	r25, 0x00	; 0
  c2:	e1 f7       	brne	.-8      	; 0xbc <main+0x3c>
  c4:	00 c0       	rjmp	.+0      	; 0xc6 <main+0x46>
  c6:	00 00       	nop
					_delay_ms(500);
					Apagar13
  c8:	85 b1       	in	r24, 0x05	; 5
  ca:	8f 7d       	andi	r24, 0xDF	; 223
  cc:	85 b9       	out	0x05, r24	; 5
  ce:	4f ef       	ldi	r20, 0xFF	; 255
  d0:	89 e6       	ldi	r24, 0x69	; 105
  d2:	98 e1       	ldi	r25, 0x18	; 24
  d4:	41 50       	subi	r20, 0x01	; 1
  d6:	80 40       	sbci	r24, 0x00	; 0
  d8:	90 40       	sbci	r25, 0x00	; 0
  da:	e1 f7       	brne	.-8      	; 0xd4 <main+0x54>
  dc:	00 c0       	rjmp	.+0      	; 0xde <main+0x5e>
  de:	00 00       	nop
	while (1) {
		if (!(PINB & (1 << RX_PIN))) {
			uint8_t receivedGPIO = receiveByteGPIO();
			USART_Transmit(receivedGPIO); // Enviar el dato recibido por GPIO
			if (receivedGPIO == 'a'){
				for (int i =0; i <2; i++){
  e0:	2f 5f       	subi	r18, 0xFF	; 255
  e2:	3f 4f       	sbci	r19, 0xFF	; 255
  e4:	02 c0       	rjmp	.+4      	; 0xea <main+0x6a>
  e6:	20 e0       	ldi	r18, 0x00	; 0
  e8:	30 e0       	ldi	r19, 0x00	; 0
  ea:	22 30       	cpi	r18, 0x02	; 2
  ec:	31 05       	cpc	r19, r1
  ee:	04 f3       	brlt	.-64     	; 0xb0 <main+0x30>
					Encender13
					_delay_ms(500);
					Apagar13
					_delay_ms(500); //Enciendo unos leds para indicar que se entró en el modo de etiquetar.
				}
				ExtenderPCaja
  f0:	8b b1       	in	r24, 0x0b	; 11
  f2:	84 60       	ori	r24, 0x04	; 4
  f4:	8b b9       	out	0x0b, r24	; 11
  f6:	2f ef       	ldi	r18, 0xFF	; 255
  f8:	43 e2       	ldi	r20, 0x23	; 35
  fa:	84 ef       	ldi	r24, 0xF4	; 244
  fc:	21 50       	subi	r18, 0x01	; 1
  fe:	40 40       	sbci	r20, 0x00	; 0
 100:	80 40       	sbci	r24, 0x00	; 0
 102:	e1 f7       	brne	.-8      	; 0xfc <main+0x7c>
 104:	00 c0       	rjmp	.+0      	; 0x106 <main+0x86>
 106:	00 00       	nop
				_delay_ms(5000);
				ExtenderPEtiqueta
 108:	8b b1       	in	r24, 0x0b	; 11
 10a:	80 61       	ori	r24, 0x10	; 16
 10c:	8b b9       	out	0x0b, r24	; 11
 10e:	9f ef       	ldi	r25, 0xFF	; 255
 110:	2d e3       	ldi	r18, 0x3D	; 61
 112:	49 e4       	ldi	r20, 0x49	; 73
 114:	91 50       	subi	r25, 0x01	; 1
 116:	20 40       	sbci	r18, 0x00	; 0
 118:	40 40       	sbci	r20, 0x00	; 0
 11a:	e1 f7       	brne	.-8      	; 0x114 <main+0x94>
 11c:	00 c0       	rjmp	.+0      	; 0x11e <main+0x9e>
 11e:	00 00       	nop
				_delay_ms(1500);
				VacioON //Es para que el pistón de la etiqueta agarre una etiqueta, la suelta con OFF
 120:	8b b1       	in	r24, 0x0b	; 11
 122:	88 60       	ori	r24, 0x08	; 8
 124:	8b b9       	out	0x0b, r24	; 11
 126:	8f ef       	ldi	r24, 0xFF	; 255
 128:	91 ee       	ldi	r25, 0xE1	; 225
 12a:	24 e0       	ldi	r18, 0x04	; 4
 12c:	81 50       	subi	r24, 0x01	; 1
 12e:	90 40       	sbci	r25, 0x00	; 0
 130:	20 40       	sbci	r18, 0x00	; 0
 132:	e1 f7       	brne	.-8      	; 0x12c <main+0xac>
 134:	00 c0       	rjmp	.+0      	; 0x136 <main+0xb6>
 136:	00 00       	nop
				_delay_ms(100);
				ContraerPEtiqueta
 138:	8b b1       	in	r24, 0x0b	; 11
 13a:	8f 7e       	andi	r24, 0xEF	; 239
 13c:	8b b9       	out	0x0b, r24	; 11
 13e:	4f ef       	ldi	r20, 0xFF	; 255
 140:	83 ed       	ldi	r24, 0xD3	; 211
 142:	90 e3       	ldi	r25, 0x30	; 48
 144:	41 50       	subi	r20, 0x01	; 1
 146:	80 40       	sbci	r24, 0x00	; 0
 148:	90 40       	sbci	r25, 0x00	; 0
 14a:	e1 f7       	brne	.-8      	; 0x144 <main+0xc4>
 14c:	00 c0       	rjmp	.+0      	; 0x14e <main+0xce>
 14e:	00 00       	nop
				_delay_ms(1000);
				ContraerPCaja
 150:	8b b1       	in	r24, 0x0b	; 11
 152:	8b 7f       	andi	r24, 0xFB	; 251
 154:	8b b9       	out	0x0b, r24	; 11
 156:	2f ef       	ldi	r18, 0xFF	; 255
 158:	47 ea       	ldi	r20, 0xA7	; 167
 15a:	81 e6       	ldi	r24, 0x61	; 97
 15c:	21 50       	subi	r18, 0x01	; 1
 15e:	40 40       	sbci	r20, 0x00	; 0
 160:	80 40       	sbci	r24, 0x00	; 0
 162:	e1 f7       	brne	.-8      	; 0x15c <main+0xdc>
 164:	00 c0       	rjmp	.+0      	; 0x166 <main+0xe6>
 166:	00 00       	nop
				_delay_ms(2000);
				ExtenderPEtiqueta
 168:	8b b1       	in	r24, 0x0b	; 11
 16a:	80 61       	ori	r24, 0x10	; 16
 16c:	8b b9       	out	0x0b, r24	; 11
 16e:	9f ef       	ldi	r25, 0xFF	; 255
 170:	27 ea       	ldi	r18, 0xA7	; 167
 172:	41 e6       	ldi	r20, 0x61	; 97
 174:	91 50       	subi	r25, 0x01	; 1
 176:	20 40       	sbci	r18, 0x00	; 0
 178:	40 40       	sbci	r20, 0x00	; 0
 17a:	e1 f7       	brne	.-8      	; 0x174 <main+0xf4>
 17c:	00 c0       	rjmp	.+0      	; 0x17e <main+0xfe>
 17e:	00 00       	nop
				_delay_ms(2000);
				VacioOFF
 180:	8b b1       	in	r24, 0x0b	; 11
 182:	87 7f       	andi	r24, 0xF7	; 247
 184:	8b b9       	out	0x0b, r24	; 11
				ContraerPEtiqueta
 186:	8b b1       	in	r24, 0x0b	; 11
 188:	8f 7e       	andi	r24, 0xEF	; 239
 18a:	8b b9       	out	0x0b, r24	; 11
 18c:	3c c0       	rjmp	.+120    	; 0x206 <main+0x186>
			}
			else if (receivedGPIO == 'b'){
 18e:	c2 36       	cpi	r28, 0x62	; 98
 190:	11 f5       	brne	.+68     	; 0x1d6 <main+0x156>
 192:	1b c0       	rjmp	.+54     	; 0x1ca <main+0x14a>
				for (int i =0; i <10; i++){
					Encender13
 194:	85 b1       	in	r24, 0x05	; 5
 196:	80 62       	ori	r24, 0x20	; 32
 198:	85 b9       	out	0x05, r24	; 5
 19a:	8f ef       	ldi	r24, 0xFF	; 255
 19c:	93 ec       	ldi	r25, 0xC3	; 195
 19e:	49 e0       	ldi	r20, 0x09	; 9
 1a0:	81 50       	subi	r24, 0x01	; 1
 1a2:	90 40       	sbci	r25, 0x00	; 0
 1a4:	40 40       	sbci	r20, 0x00	; 0
 1a6:	e1 f7       	brne	.-8      	; 0x1a0 <main+0x120>
 1a8:	00 c0       	rjmp	.+0      	; 0x1aa <main+0x12a>
 1aa:	00 00       	nop
					_delay_ms(200); // Leds de referencia del pin 13 de la arduino nomás.
					Apagar13
 1ac:	85 b1       	in	r24, 0x05	; 5
 1ae:	8f 7d       	andi	r24, 0xDF	; 223
 1b0:	85 b9       	out	0x05, r24	; 5
 1b2:	8f ef       	ldi	r24, 0xFF	; 255
 1b4:	93 ec       	ldi	r25, 0xC3	; 195
 1b6:	49 e0       	ldi	r20, 0x09	; 9
 1b8:	81 50       	subi	r24, 0x01	; 1
 1ba:	90 40       	sbci	r25, 0x00	; 0
 1bc:	40 40       	sbci	r20, 0x00	; 0
 1be:	e1 f7       	brne	.-8      	; 0x1b8 <main+0x138>
 1c0:	00 c0       	rjmp	.+0      	; 0x1c2 <main+0x142>
 1c2:	00 00       	nop
				_delay_ms(2000);
				VacioOFF
				ContraerPEtiqueta
			}
			else if (receivedGPIO == 'b'){
				for (int i =0; i <10; i++){
 1c4:	2f 5f       	subi	r18, 0xFF	; 255
 1c6:	3f 4f       	sbci	r19, 0xFF	; 255
 1c8:	02 c0       	rjmp	.+4      	; 0x1ce <main+0x14e>
 1ca:	20 e0       	ldi	r18, 0x00	; 0
 1cc:	30 e0       	ldi	r19, 0x00	; 0
 1ce:	2a 30       	cpi	r18, 0x0A	; 10
 1d0:	31 05       	cpc	r19, r1
 1d2:	04 f3       	brlt	.-64     	; 0x194 <main+0x114>
 1d4:	18 c0       	rjmp	.+48     	; 0x206 <main+0x186>
					Apagar13
					_delay_ms(200);
				}
			}
			else{
				Encender13
 1d6:	85 b1       	in	r24, 0x05	; 5
 1d8:	80 62       	ori	r24, 0x20	; 32
 1da:	85 b9       	out	0x05, r24	; 5
 1dc:	8f ef       	ldi	r24, 0xFF	; 255
 1de:	93 ec       	ldi	r25, 0xC3	; 195
 1e0:	29 e0       	ldi	r18, 0x09	; 9
 1e2:	81 50       	subi	r24, 0x01	; 1
 1e4:	90 40       	sbci	r25, 0x00	; 0
 1e6:	20 40       	sbci	r18, 0x00	; 0
 1e8:	e1 f7       	brne	.-8      	; 0x1e2 <main+0x162>
 1ea:	00 c0       	rjmp	.+0      	; 0x1ec <main+0x16c>
 1ec:	00 00       	nop
				_delay_ms(200);
				Apagar13
 1ee:	85 b1       	in	r24, 0x05	; 5
 1f0:	8f 7d       	andi	r24, 0xDF	; 223
 1f2:	85 b9       	out	0x05, r24	; 5
 1f4:	4f ef       	ldi	r20, 0xFF	; 255
 1f6:	83 ec       	ldi	r24, 0xC3	; 195
 1f8:	99 e0       	ldi	r25, 0x09	; 9
 1fa:	41 50       	subi	r20, 0x01	; 1
 1fc:	80 40       	sbci	r24, 0x00	; 0
 1fe:	90 40       	sbci	r25, 0x00	; 0
 200:	e1 f7       	brne	.-8      	; 0x1fa <main+0x17a>
 202:	00 c0       	rjmp	.+0      	; 0x204 <main+0x184>
 204:	00 00       	nop
				_delay_ms(200);
			}
			
		}

		if (UCSR0A & (1 << RXC0)) {
 206:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 20a:	88 23       	and	r24, r24
 20c:	0c f0       	brlt	.+2      	; 0x210 <main+0x190>
 20e:	45 cf       	rjmp	.-374    	; 0x9a <main+0x1a>
			uint8_t receivedUSART = USART_Receive();
 210:	0e 94 89 01 	call	0x312	; 0x312 <USART_Receive>
			sendByteGPIO(receivedUSART); // Enviar el dato recibido por USART
 214:	0e 94 0d 01 	call	0x21a	; 0x21a <sendByteGPIO>
 218:	40 cf       	rjmp	.-384    	; 0x9a <main+0x1a>

Disassembly of section .text.__dummy_fini:

00000328 <_fini>:
 328:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

0000032a <__funcs_on_exit>:
 32a:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

0000032c <__simulator_exit>:
 32c:	08 95       	ret

Disassembly of section .text.exit:

000002e0 <exit>:
 2e0:	ec 01       	movw	r28, r24
 2e2:	0e 94 95 01 	call	0x32a	; 0x32a <__funcs_on_exit>
 2e6:	0e 94 94 01 	call	0x328	; 0x328 <_fini>
 2ea:	ce 01       	movw	r24, r28
 2ec:	0e 94 96 01 	call	0x32c	; 0x32c <__simulator_exit>
 2f0:	ce 01       	movw	r24, r28
 2f2:	0e 94 92 01 	call	0x324	; 0x324 <_Exit>

Disassembly of section .text._Exit:

00000324 <_Exit>:
 324:	0e 94 3e 00 	call	0x7c	; 0x7c <_exit>
