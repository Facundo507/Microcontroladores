
SPI_Maestro.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000004a0  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000c2  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  000004a0  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000000e  00000000  00000000  000004cf  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000000c0  00000000  00000000  000004dd  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000011f0  00000000  00000000  0000059d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000080b  00000000  00000000  0000178d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000006d6  00000000  00000000  00001f98  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000194  00000000  00000000  00002670  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000022e  00000000  00000000  00002804  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000057f  00000000  00000000  00002a32  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000b0  00000000  00000000  00002fb1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  000003de  000003de  00000492  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003064  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.twi_init 00000028  000002bc  000002bc  00000370  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.twi_start 0000001a  0000037a  0000037a  0000042e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.twi_write_cmd 0000001e  00000306  00000306  000003ba  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.twi_write_dwr 0000001e  00000324  00000324  000003d8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.twi_stop 00000008  000003ce  000003ce  00000482  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.PCF8574_write 0000001c  00000342  00000342  000003f6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.twi_lcd_4bit_send 00000074  000000e0  000000e0  00000194  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.twi_lcd_cmd 00000018  00000394  00000394  00000448  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.twi_lcd_dwr 0000001c  0000035e  0000035e  00000412  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.twi_lcd_msg 0000002c  00000266  00000266  0000031a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text.twi_lcd_clear 00000008  000003d6  000003d6  0000048a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .progmemx.data 0000001d  000000c2  000000c2  00000176  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 26 .text.twi_lcd_init 00000070  00000154  00000154  00000208  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .text.SetupADC 00000022  000002e4  000002e4  00000398  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .text.LeerADC 0000002a  00000292  00000292  00000346  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .text.SPI_MasterInit 0000000c  000003c2  000003c2  00000476  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .text.SPI_MasterTransmit 00000040  00000226  00000226  000002da  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 31 .text.main    00000062  000001c4  000001c4  00000278  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 32 .bss.lcd      00000001  00800100  00800100  000004a0  2**0
                  ALLOC
 33 .text.__dummy_fini 00000002  000003e6  000003e6  0000049a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 34 .text.__dummy_funcs_on_exit 00000002  000003e8  000003e8  0000049c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 35 .text.__dummy_simulator_exit 00000002  000003ea  000003ea  0000049e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 36 .text.exit    00000016  000003ac  000003ac  00000460  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 37 .text._Exit   00000004  000003e2  000003e2  00000496  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 37 00 	jmp	0x6e	; 0x6e <__ctors_end>
   4:	0c 94 ef 01 	jmp	0x3de	; 0x3de <__bad_interrupt>
   8:	0c 94 ef 01 	jmp	0x3de	; 0x3de <__bad_interrupt>
   c:	0c 94 ef 01 	jmp	0x3de	; 0x3de <__bad_interrupt>
  10:	0c 94 ef 01 	jmp	0x3de	; 0x3de <__bad_interrupt>
  14:	0c 94 ef 01 	jmp	0x3de	; 0x3de <__bad_interrupt>
  18:	0c 94 ef 01 	jmp	0x3de	; 0x3de <__bad_interrupt>
  1c:	0c 94 ef 01 	jmp	0x3de	; 0x3de <__bad_interrupt>
  20:	0c 94 ef 01 	jmp	0x3de	; 0x3de <__bad_interrupt>
  24:	0c 94 ef 01 	jmp	0x3de	; 0x3de <__bad_interrupt>
  28:	0c 94 ef 01 	jmp	0x3de	; 0x3de <__bad_interrupt>
  2c:	0c 94 ef 01 	jmp	0x3de	; 0x3de <__bad_interrupt>
  30:	0c 94 ef 01 	jmp	0x3de	; 0x3de <__bad_interrupt>
  34:	0c 94 ef 01 	jmp	0x3de	; 0x3de <__bad_interrupt>
  38:	0c 94 ef 01 	jmp	0x3de	; 0x3de <__bad_interrupt>
  3c:	0c 94 ef 01 	jmp	0x3de	; 0x3de <__bad_interrupt>
  40:	0c 94 ef 01 	jmp	0x3de	; 0x3de <__bad_interrupt>
  44:	0c 94 ef 01 	jmp	0x3de	; 0x3de <__bad_interrupt>
  48:	0c 94 ef 01 	jmp	0x3de	; 0x3de <__bad_interrupt>
  4c:	0c 94 ef 01 	jmp	0x3de	; 0x3de <__bad_interrupt>
  50:	0c 94 ef 01 	jmp	0x3de	; 0x3de <__bad_interrupt>
  54:	0c 94 ef 01 	jmp	0x3de	; 0x3de <__bad_interrupt>
  58:	0c 94 ef 01 	jmp	0x3de	; 0x3de <__bad_interrupt>
  5c:	0c 94 ef 01 	jmp	0x3de	; 0x3de <__bad_interrupt>
  60:	0c 94 ef 01 	jmp	0x3de	; 0x3de <__bad_interrupt>
  64:	0c 94 ef 01 	jmp	0x3de	; 0x3de <__bad_interrupt>

00000068 <.dinit>:
  68:	01 00       	.word	0x0001	; ????
  6a:	01 01       	movw	r0, r2
  6c:	80 00       	.word	0x0080	; ????

0000006e <__ctors_end>:
  6e:	11 24       	eor	r1, r1
  70:	1f be       	out	0x3f, r1	; 63
  72:	cf ef       	ldi	r28, 0xFF	; 255
  74:	d8 e0       	ldi	r29, 0x08	; 8
  76:	de bf       	out	0x3e, r29	; 62
  78:	cd bf       	out	0x3d, r28	; 61

0000007a <__do_copy_data>:
  7a:	e8 e6       	ldi	r30, 0x68	; 104
  7c:	f0 e0       	ldi	r31, 0x00	; 0
  7e:	40 e0       	ldi	r20, 0x00	; 0
  80:	17 c0       	rjmp	.+46     	; 0xb0 <__do_clear_bss+0x8>
  82:	b5 91       	lpm	r27, Z+
  84:	a5 91       	lpm	r26, Z+
  86:	35 91       	lpm	r19, Z+
  88:	25 91       	lpm	r18, Z+
  8a:	05 91       	lpm	r16, Z+
  8c:	07 fd       	sbrc	r16, 7
  8e:	0c c0       	rjmp	.+24     	; 0xa8 <__do_clear_bss>
  90:	95 91       	lpm	r25, Z+
  92:	85 91       	lpm	r24, Z+
  94:	ef 01       	movw	r28, r30
  96:	f9 2f       	mov	r31, r25
  98:	e8 2f       	mov	r30, r24
  9a:	05 90       	lpm	r0, Z+
  9c:	0d 92       	st	X+, r0
  9e:	a2 17       	cp	r26, r18
  a0:	b3 07       	cpc	r27, r19
  a2:	d9 f7       	brne	.-10     	; 0x9a <__do_copy_data+0x20>
  a4:	fe 01       	movw	r30, r28
  a6:	04 c0       	rjmp	.+8      	; 0xb0 <__do_clear_bss+0x8>

000000a8 <__do_clear_bss>:
  a8:	1d 92       	st	X+, r1
  aa:	a2 17       	cp	r26, r18
  ac:	b3 07       	cpc	r27, r19
  ae:	e1 f7       	brne	.-8      	; 0xa8 <__do_clear_bss>
  b0:	ed 36       	cpi	r30, 0x6D	; 109
  b2:	f4 07       	cpc	r31, r20
  b4:	31 f7       	brne	.-52     	; 0x82 <__do_copy_data+0x8>
  b6:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <main>
  ba:	0c 94 d6 01 	jmp	0x3ac	; 0x3ac <exit>

000000be <_exit>:
  be:	f8 94       	cli

000000c0 <__stop_program>:
  c0:	ff cf       	rjmp	.-2      	; 0xc0 <__stop_program>

Disassembly of section .text:

000003de <__bad_interrupt>:
 3de:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.twi_init:

000002bc <twi_init>:
{
	TWCR=(1<<TWEN)|(1<<TWINT);					//--- No Acknowledgment Condition as per Datasheet
	while (!(TWCR & (1<<TWINT)));				//--- Wait until No Acknowledgment Condition is transmitted to Slave
	while(TW_STATUS != TW_MR_DATA_NACK);		//--- Check for Acknowledgment
	return TWDR;								//--- Return received data
}
 2bc:	83 e0       	ldi	r24, 0x03	; 3
 2be:	87 b9       	out	0x07, r24	; 7
 2c0:	88 b9       	out	0x08, r24	; 8
 2c2:	ec eb       	ldi	r30, 0xBC	; 188
 2c4:	f0 e0       	ldi	r31, 0x00	; 0
 2c6:	80 81       	ld	r24, Z
 2c8:	8b 7f       	andi	r24, 0xFB	; 251
 2ca:	80 83       	st	Z, r24
 2cc:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 2d0:	8c e0       	ldi	r24, 0x0C	; 12
 2d2:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
 2d6:	84 e0       	ldi	r24, 0x04	; 4
 2d8:	80 83       	st	Z, r24
 2da:	85 e3       	ldi	r24, 0x35	; 53
 2dc:	8a 95       	dec	r24
 2de:	f1 f7       	brne	.-4      	; 0x2dc <twi_init+0x20>
 2e0:	00 00       	nop
 2e2:	08 95       	ret

Disassembly of section .text.twi_start:

0000037a <twi_start>:

/* Function to Send Start Condition */

void twi_start()
{
	TWCR= (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);		//--- Start Condition as per Datasheet
 37a:	84 ea       	ldi	r24, 0xA4	; 164
 37c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while(!(TWCR & (1<<TWINT)));				//--- Wait till start condition is transmitted to Slave
 380:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 384:	88 23       	and	r24, r24
 386:	e4 f7       	brge	.-8      	; 0x380 <twi_start+0x6>
	while(TW_STATUS != TW_START);				//--- Check for the acknowledgment 0x08 = TW_START
 388:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 38c:	88 7f       	andi	r24, 0xF8	; 248
 38e:	88 30       	cpi	r24, 0x08	; 8
 390:	d9 f7       	brne	.-10     	; 0x388 <twi_start+0xe>
}
 392:	08 95       	ret

Disassembly of section .text.twi_write_cmd:

00000306 <twi_write_cmd>:
{
	TWCR=(1<<TWEN)|(1<<TWINT);					//--- No Acknowledgment Condition as per Datasheet
	while (!(TWCR & (1<<TWINT)));				//--- Wait until No Acknowledgment Condition is transmitted to Slave
	while(TW_STATUS != TW_MR_DATA_NACK);		//--- Check for Acknowledgment
	return TWDR;								//--- Return received data
}
 306:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 30a:	84 e8       	ldi	r24, 0x84	; 132
 30c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 310:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 314:	88 23       	and	r24, r24
 316:	e4 f7       	brge	.-8      	; 0x310 <twi_write_cmd+0xa>
 318:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 31c:	88 7f       	andi	r24, 0xF8	; 248
 31e:	88 31       	cpi	r24, 0x18	; 24
 320:	d9 f7       	brne	.-10     	; 0x318 <twi_write_cmd+0x12>
 322:	08 95       	ret

Disassembly of section .text.twi_write_dwr:

00000324 <twi_write_dwr>:
 324:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 328:	84 e8       	ldi	r24, 0x84	; 132
 32a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 32e:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 332:	88 23       	and	r24, r24
 334:	e4 f7       	brge	.-8      	; 0x32e <twi_write_dwr+0xa>
 336:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 33a:	88 7f       	andi	r24, 0xF8	; 248
 33c:	88 32       	cpi	r24, 0x28	; 40
 33e:	d9 f7       	brne	.-10     	; 0x336 <twi_write_dwr+0x12>
 340:	08 95       	ret

Disassembly of section .text.twi_stop:

000003ce <twi_stop>:

/* Function to Send Stop Condition */

void twi_stop()
{
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);		//--- Stop Condition as per Datasheet
 3ce:	84 e9       	ldi	r24, 0x94	; 148
 3d0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 3d4:	08 95       	ret

Disassembly of section .text.PCF8574_write:

00000342 <PCF8574_write>:

unsigned char lcd = 0x00;						//--- Declaring a variable as lcd for data operation

/* Function to Write data in PCF8574 */
void PCF8574_write(unsigned char x)
{
 342:	cf 93       	push	r28
 344:	c8 2f       	mov	r28, r24
		twi_start();							//--- Start Condition 
 346:	0e 94 bd 01 	call	0x37a	; 0x37a <twi_start>
		twi_write_cmd((PCF8574 << 1)| WRITE);	//--- SLA+W is Send 0x40 
 34a:	8e e4       	ldi	r24, 0x4E	; 78
 34c:	0e 94 83 01 	call	0x306	; 0x306 <twi_write_cmd>
		twi_write_dwr(x);						//--- Data to Slave Device
 350:	8c 2f       	mov	r24, r28
 352:	0e 94 92 01 	call	0x324	; 0x324 <twi_write_dwr>
		twi_stop();								//--- Stop Condition 
 356:	0e 94 e7 01 	call	0x3ce	; 0x3ce <twi_stop>
}
 35a:	cf 91       	pop	r28
 35c:	08 95       	ret

Disassembly of section .text.twi_lcd_4bit_send:

000000e0 <twi_lcd_4bit_send>:
{
	TWCR=(1<<TWEN)|(1<<TWINT);					//--- No Acknowledgment Condition as per Datasheet
	while (!(TWCR & (1<<TWINT)));				//--- Wait until No Acknowledgment Condition is transmitted to Slave
	while(TW_STATUS != TW_MR_DATA_NACK);		//--- Check for Acknowledgment
	return TWDR;								//--- Return received data
}
  e0:	cf 93       	push	r28
  e2:	c8 2f       	mov	r28, r24
  e4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  e8:	8f 70       	andi	r24, 0x0F	; 15
  ea:	9c 2f       	mov	r25, r28
  ec:	90 7f       	andi	r25, 0xF0	; 240
  ee:	89 2b       	or	r24, r25
  f0:	84 60       	ori	r24, 0x04	; 4
  f2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
  f6:	0e 94 a1 01 	call	0x342	; 0x342 <PCF8574_write>
  fa:	85 e0       	ldi	r24, 0x05	; 5
  fc:	8a 95       	dec	r24
  fe:	f1 f7       	brne	.-4      	; 0xfc <twi_lcd_4bit_send+0x1c>
 100:	00 00       	nop
 102:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 106:	8b 7f       	andi	r24, 0xFB	; 251
 108:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 10c:	0e 94 a1 01 	call	0x342	; 0x342 <PCF8574_write>
 110:	8a e1       	ldi	r24, 0x1A	; 26
 112:	8a 95       	dec	r24
 114:	f1 f7       	brne	.-4      	; 0x112 <twi_lcd_4bit_send+0x32>
 116:	00 c0       	rjmp	.+0      	; 0x118 <twi_lcd_4bit_send+0x38>
 118:	80 e1       	ldi	r24, 0x10	; 16
 11a:	c8 9f       	mul	r28, r24
 11c:	90 01       	movw	r18, r0
 11e:	11 24       	eor	r1, r1
 120:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 124:	8f 70       	andi	r24, 0x0F	; 15
 126:	82 2b       	or	r24, r18
 128:	84 60       	ori	r24, 0x04	; 4
 12a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 12e:	0e 94 a1 01 	call	0x342	; 0x342 <PCF8574_write>
 132:	85 e0       	ldi	r24, 0x05	; 5
 134:	8a 95       	dec	r24
 136:	f1 f7       	brne	.-4      	; 0x134 <twi_lcd_4bit_send+0x54>
 138:	00 00       	nop
 13a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 13e:	8b 7f       	andi	r24, 0xFB	; 251
 140:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 144:	0e 94 a1 01 	call	0x342	; 0x342 <PCF8574_write>
 148:	8a e1       	ldi	r24, 0x1A	; 26
 14a:	8a 95       	dec	r24
 14c:	f1 f7       	brne	.-4      	; 0x14a <twi_lcd_4bit_send+0x6a>
 14e:	00 c0       	rjmp	.+0      	; 0x150 <twi_lcd_4bit_send+0x70>
 150:	cf 91       	pop	r28
 152:	08 95       	ret

Disassembly of section .text.twi_lcd_cmd:

00000394 <twi_lcd_cmd>:
	
}

/* Function to Write to LCD Command Register */
void twi_lcd_cmd(const unsigned char x)
{
 394:	cf 93       	push	r28
 396:	c8 2f       	mov	r28, r24
	lcd = 0x08;									//--- Enable Backlight Pin
 398:	88 e0       	ldi	r24, 0x08	; 8
 39a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	lcd &= ~(0x01);								//--- Select Command Register By RS = 0
	PCF8574_write(lcd);							//--- Send Data From PCF8574 to LCD PORT
 39e:	0e 94 a1 01 	call	0x342	; 0x342 <PCF8574_write>
	twi_lcd_4bit_send(x);						//--- Function to Write 4-bit data to LCD 	
 3a2:	8c 2f       	mov	r24, r28
 3a4:	0e 94 70 00 	call	0xe0	; 0xe0 <twi_lcd_4bit_send>
}
 3a8:	cf 91       	pop	r28
 3aa:	08 95       	ret

Disassembly of section .text.twi_lcd_dwr:

0000035e <twi_lcd_dwr>:

/* Function to Write to LCD Command Register */
void twi_lcd_dwr(unsigned char x)
{
 35e:	cf 93       	push	r28
 360:	c8 2f       	mov	r28, r24
	lcd |= 0x09;								//--- Enable Backlight Pin & Select Data Register By RS = 1
 362:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 366:	89 60       	ori	r24, 0x09	; 9
 368:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	PCF8574_write(lcd);							//--- Send Data From PCF8574 to LCD PORT	
 36c:	0e 94 a1 01 	call	0x342	; 0x342 <PCF8574_write>
	twi_lcd_4bit_send(x);						//--- Function to Write 4-bit data to LCD
 370:	8c 2f       	mov	r24, r28
 372:	0e 94 70 00 	call	0xe0	; 0xe0 <twi_lcd_4bit_send>
}
 376:	cf 91       	pop	r28
 378:	08 95       	ret

Disassembly of section .text.twi_lcd_msg:

00000266 <twi_lcd_msg>:
 266:	cf 92       	push	r12
 268:	df 92       	push	r13
 26a:	ef 92       	push	r14
 26c:	6b 01       	movw	r12, r22
 26e:	e8 2e       	mov	r14, r24
 270:	06 c0       	rjmp	.+12     	; 0x27e <twi_lcd_msg+0x18>
 272:	9f ef       	ldi	r25, 0xFF	; 255
 274:	c9 1a       	sub	r12, r25
 276:	d9 0a       	sbc	r13, r25
 278:	e9 0a       	sbc	r14, r25
 27a:	0e 94 af 01 	call	0x35e	; 0x35e <twi_lcd_dwr>
 27e:	f6 01       	movw	r30, r12
 280:	84 91       	lpm	r24, Z
 282:	e7 fc       	sbrc	r14, 7
 284:	80 81       	ld	r24, Z
 286:	81 11       	cpse	r24, r1
 288:	f4 cf       	rjmp	.-24     	; 0x272 <twi_lcd_msg+0xc>
 28a:	ef 90       	pop	r14
 28c:	df 90       	pop	r13
 28e:	cf 90       	pop	r12
 290:	08 95       	ret

Disassembly of section .text.twi_lcd_clear:

000003d6 <twi_lcd_clear>:
}

/* Function to Execute Clear LCD Command */
void twi_lcd_clear()
{
	twi_lcd_cmd(0x01);
 3d6:	81 e0       	ldi	r24, 0x01	; 1
 3d8:	0e 94 ca 01 	call	0x394	; 0x394 <twi_lcd_cmd>
 3dc:	08 95       	ret

Disassembly of section .text.twi_lcd_init:

00000154 <twi_lcd_init>:
 154:	84 e0       	ldi	r24, 0x04	; 4
 156:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 15a:	0e 94 a1 01 	call	0x342	; 0x342 <PCF8574_write>
 15e:	25 e8       	ldi	r18, 0x85	; 133
 160:	2a 95       	dec	r18
 162:	f1 f7       	brne	.-4      	; 0x160 <twi_lcd_init+0xc>
 164:	00 00       	nop
 166:	83 e0       	ldi	r24, 0x03	; 3
 168:	0e 94 ca 01 	call	0x394	; 0x394 <twi_lcd_cmd>
 16c:	83 e0       	ldi	r24, 0x03	; 3
 16e:	0e 94 ca 01 	call	0x394	; 0x394 <twi_lcd_cmd>
 172:	83 e0       	ldi	r24, 0x03	; 3
 174:	0e 94 ca 01 	call	0x394	; 0x394 <twi_lcd_cmd>
 178:	82 e0       	ldi	r24, 0x02	; 2
 17a:	0e 94 ca 01 	call	0x394	; 0x394 <twi_lcd_cmd>
 17e:	88 e2       	ldi	r24, 0x28	; 40
 180:	0e 94 ca 01 	call	0x394	; 0x394 <twi_lcd_cmd>
 184:	8f e0       	ldi	r24, 0x0F	; 15
 186:	0e 94 ca 01 	call	0x394	; 0x394 <twi_lcd_cmd>
 18a:	81 e0       	ldi	r24, 0x01	; 1
 18c:	0e 94 ca 01 	call	0x394	; 0x394 <twi_lcd_cmd>
 190:	86 e0       	ldi	r24, 0x06	; 6
 192:	0e 94 ca 01 	call	0x394	; 0x394 <twi_lcd_cmd>
 196:	80 e8       	ldi	r24, 0x80	; 128
 198:	0e 94 ca 01 	call	0x394	; 0x394 <twi_lcd_cmd>
 19c:	62 ec       	ldi	r22, 0xC2	; 194
 19e:	70 e0       	ldi	r23, 0x00	; 0
 1a0:	80 e0       	ldi	r24, 0x00	; 0
 1a2:	0e 94 33 01 	call	0x266	; 0x266 <twi_lcd_msg>
 1a6:	8f ef       	ldi	r24, 0xFF	; 255
 1a8:	93 ed       	ldi	r25, 0xD3	; 211
 1aa:	20 e3       	ldi	r18, 0x30	; 48
 1ac:	81 50       	subi	r24, 0x01	; 1
 1ae:	90 40       	sbci	r25, 0x00	; 0
 1b0:	20 40       	sbci	r18, 0x00	; 0
 1b2:	e1 f7       	brne	.-8      	; 0x1ac <twi_lcd_init+0x58>
 1b4:	00 c0       	rjmp	.+0      	; 0x1b6 <twi_lcd_init+0x62>
 1b6:	00 00       	nop
 1b8:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <twi_lcd_clear>
 1bc:	80 e8       	ldi	r24, 0x80	; 128
 1be:	0e 94 ca 01 	call	0x394	; 0x394 <twi_lcd_cmd>
 1c2:	08 95       	ret

Disassembly of section .text.SetupADC:

000002e4 <SetupADC>:
 2e4:	ec e7       	ldi	r30, 0x7C	; 124
 2e6:	f0 e0       	ldi	r31, 0x00	; 0
 2e8:	80 81       	ld	r24, Z
 2ea:	80 64       	ori	r24, 0x40	; 64
 2ec:	80 83       	st	Z, r24
 2ee:	80 81       	ld	r24, Z
 2f0:	8f 7d       	andi	r24, 0xDF	; 223
 2f2:	80 83       	st	Z, r24
 2f4:	ea e7       	ldi	r30, 0x7A	; 122
 2f6:	f0 e0       	ldi	r31, 0x00	; 0
 2f8:	80 81       	ld	r24, Z
 2fa:	86 60       	ori	r24, 0x06	; 6
 2fc:	80 83       	st	Z, r24
 2fe:	80 81       	ld	r24, Z
 300:	80 68       	ori	r24, 0x80	; 128
 302:	80 83       	st	Z, r24
 304:	08 95       	ret

Disassembly of section .text.LeerADC:

00000292 <LeerADC>:
 292:	ec e7       	ldi	r30, 0x7C	; 124
 294:	f0 e0       	ldi	r31, 0x00	; 0
 296:	90 81       	ld	r25, Z
 298:	90 7f       	andi	r25, 0xF0	; 240
 29a:	8f 70       	andi	r24, 0x0F	; 15
 29c:	89 2b       	or	r24, r25
 29e:	80 83       	st	Z, r24
 2a0:	ea e7       	ldi	r30, 0x7A	; 122
 2a2:	f0 e0       	ldi	r31, 0x00	; 0
 2a4:	80 81       	ld	r24, Z
 2a6:	80 64       	ori	r24, 0x40	; 64
 2a8:	80 83       	st	Z, r24
 2aa:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 2ae:	86 fd       	sbrc	r24, 6
 2b0:	fc cf       	rjmp	.-8      	; 0x2aa <LeerADC+0x18>
 2b2:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 2b6:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 2ba:	08 95       	ret

Disassembly of section .text.SPI_MasterInit:

000003c2 <SPI_MasterInit>:
	return 0;
}

void SPI_MasterInit() {
	// Configura el ATMega328P como maestro en el bus SPI
	DDRB |= (1 << MOSI) | (1 << MISO) | (1 << SCLK) | (1 << SS) | (1 << SS2);  // Configura pines de salida
 3c2:	84 b1       	in	r24, 0x04	; 4
 3c4:	8c 67       	ori	r24, 0x7C	; 124
 3c6:	84 b9       	out	0x04, r24	; 4
	SPCR = (1 << SPIE) | (1 << SPE) | (1 << MSTR) | (1 << SPR0); // Habilita interrupcion, Habilita SPI, modo maestro, velocidad de reloj f/16
 3c8:	81 ed       	ldi	r24, 0xD1	; 209
 3ca:	8c bd       	out	0x2c, r24	; 44
 3cc:	08 95       	ret

Disassembly of section .text.SPI_MasterTransmit:

00000226 <SPI_MasterTransmit>:
 226:	95 b1       	in	r25, 0x05	; 5
 228:	21 e0       	ldi	r18, 0x01	; 1
 22a:	30 e0       	ldi	r19, 0x00	; 0
 22c:	02 c0       	rjmp	.+4      	; 0x232 <SPI_MasterTransmit+0xc>
 22e:	22 0f       	add	r18, r18
 230:	33 1f       	adc	r19, r19
 232:	6a 95       	dec	r22
 234:	e2 f7       	brpl	.-8      	; 0x22e <SPI_MasterTransmit+0x8>
 236:	42 2f       	mov	r20, r18
 238:	40 95       	com	r20
 23a:	94 23       	and	r25, r20
 23c:	95 b9       	out	0x05, r25	; 5
 23e:	ef e3       	ldi	r30, 0x3F	; 63
 240:	fc e9       	ldi	r31, 0x9C	; 156
 242:	31 97       	sbiw	r30, 0x01	; 1
 244:	f1 f7       	brne	.-4      	; 0x242 <SPI_MasterTransmit+0x1c>
 246:	00 c0       	rjmp	.+0      	; 0x248 <SPI_MasterTransmit+0x22>
 248:	00 00       	nop
 24a:	8e bd       	out	0x2e, r24	; 46
 24c:	0d b4       	in	r0, 0x2d	; 45
 24e:	07 fe       	sbrs	r0, 7
 250:	fd cf       	rjmp	.-6      	; 0x24c <SPI_MasterTransmit+0x26>
 252:	8f e3       	ldi	r24, 0x3F	; 63
 254:	9c e9       	ldi	r25, 0x9C	; 156
 256:	01 97       	sbiw	r24, 0x01	; 1
 258:	f1 f7       	brne	.-4      	; 0x256 <SPI_MasterTransmit+0x30>
 25a:	00 c0       	rjmp	.+0      	; 0x25c <SPI_MasterTransmit+0x36>
 25c:	00 00       	nop
 25e:	85 b1       	in	r24, 0x05	; 5
 260:	28 2b       	or	r18, r24
 262:	25 b9       	out	0x05, r18	; 5
 264:	08 95       	ret

Disassembly of section .text.main:

000001c4 <main>:
 1c4:	0e 94 5e 01 	call	0x2bc	; 0x2bc <twi_init>
 1c8:	0e 94 aa 00 	call	0x154	; 0x154 <twi_lcd_init>
 1cc:	80 e8       	ldi	r24, 0x80	; 128
 1ce:	0e 94 ca 01 	call	0x394	; 0x394 <twi_lcd_cmd>
 1d2:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <twi_lcd_clear>
 1d6:	0e 94 72 01 	call	0x2e4	; 0x2e4 <SetupADC>
 1da:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <SPI_MasterInit>
 1de:	8f e3       	ldi	r24, 0x3F	; 63
 1e0:	9c e9       	ldi	r25, 0x9C	; 156
 1e2:	01 97       	sbiw	r24, 0x01	; 1
 1e4:	f1 f7       	brne	.-4      	; 0x1e2 <main+0x1e>
 1e6:	00 c0       	rjmp	.+0      	; 0x1e8 <main+0x24>
 1e8:	00 00       	nop
 1ea:	c0 e0       	ldi	r28, 0x00	; 0
 1ec:	83 e0       	ldi	r24, 0x03	; 3
 1ee:	0e 94 49 01 	call	0x292	; 0x292 <LeerADC>
 1f2:	8c 01       	movw	r16, r24
 1f4:	80 ec       	ldi	r24, 0xC0	; 192
 1f6:	0e 94 ca 01 	call	0x394	; 0x394 <twi_lcd_cmd>
 1fa:	62 ed       	ldi	r22, 0xD2	; 210
 1fc:	70 e0       	ldi	r23, 0x00	; 0
 1fe:	80 e0       	ldi	r24, 0x00	; 0
 200:	0e 94 33 01 	call	0x266	; 0x266 <twi_lcd_msg>
 204:	09 35       	cpi	r16, 0x59	; 89
 206:	12 40       	sbci	r17, 0x02	; 2
 208:	10 f4       	brcc	.+4      	; 0x20e <main+0x4a>
 20a:	c1 60       	ori	r28, 0x01	; 1
 20c:	01 c0       	rjmp	.+2      	; 0x210 <main+0x4c>
 20e:	c1 70       	andi	r28, 0x01	; 1
 210:	62 e0       	ldi	r22, 0x02	; 2
 212:	8c 2f       	mov	r24, r28
 214:	0e 94 13 01 	call	0x226	; 0x226 <SPI_MasterTransmit>
 218:	8f e3       	ldi	r24, 0x3F	; 63
 21a:	9c e9       	ldi	r25, 0x9C	; 156
 21c:	01 97       	sbiw	r24, 0x01	; 1
 21e:	f1 f7       	brne	.-4      	; 0x21c <main+0x58>
 220:	00 c0       	rjmp	.+0      	; 0x222 <main+0x5e>
 222:	00 00       	nop
 224:	e3 cf       	rjmp	.-58     	; 0x1ec <main+0x28>

Disassembly of section .text.__dummy_fini:

000003e6 <_fini>:
 3e6:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

000003e8 <__funcs_on_exit>:
 3e8:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

000003ea <__simulator_exit>:
 3ea:	08 95       	ret

Disassembly of section .text.exit:

000003ac <exit>:
 3ac:	ec 01       	movw	r28, r24
 3ae:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <__funcs_on_exit>
 3b2:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <_fini>
 3b6:	ce 01       	movw	r24, r28
 3b8:	0e 94 f5 01 	call	0x3ea	; 0x3ea <__simulator_exit>
 3bc:	ce 01       	movw	r24, r28
 3be:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <_Exit>

Disassembly of section .text._Exit:

000003e2 <_Exit>:
 3e2:	0e 94 5f 00 	call	0xbe	; 0xbe <_exit>
