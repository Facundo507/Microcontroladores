
SPI_Maestro.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000210  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000c2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  00000210  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000000e  00000000  00000000  0000023f  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  0000024d  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b38  00000000  00000000  00000285  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000736  00000000  00000000  00000dbd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002c7  00000000  00000000  000014f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000054  00000000  00000000  000017bc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000208  00000000  00000000  00001810  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000014d  00000000  00000000  00001a18  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00001b65  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  0000016e  0000016e  00000202  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001b90  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.SPI_MasterInit 0000000c  00000158  00000158  000001ec  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.SPI_MasterTransmit 00000040  000000c2  000000c2  00000156  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.SPI_MasterReceive 0000000a  00000164  00000164  000001f8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.main    00000040  00000102  00000102  00000196  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .bss.dato1    00000001  00800100  00800100  00000210  2**0
                  ALLOC
 19 .text.__dummy_fini 00000002  00000176  00000176  0000020a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.__dummy_funcs_on_exit 00000002  00000178  00000178  0000020c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.__dummy_simulator_exit 00000002  0000017a  0000017a  0000020e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.exit    00000016  00000142  00000142  000001d6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text._Exit   00000004  00000172  00000172  00000206  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 37 00 	jmp	0x6e	; 0x6e <__ctors_end>
   4:	0c 94 b7 00 	jmp	0x16e	; 0x16e <__bad_interrupt>
   8:	0c 94 b7 00 	jmp	0x16e	; 0x16e <__bad_interrupt>
   c:	0c 94 b7 00 	jmp	0x16e	; 0x16e <__bad_interrupt>
  10:	0c 94 b7 00 	jmp	0x16e	; 0x16e <__bad_interrupt>
  14:	0c 94 b7 00 	jmp	0x16e	; 0x16e <__bad_interrupt>
  18:	0c 94 b7 00 	jmp	0x16e	; 0x16e <__bad_interrupt>
  1c:	0c 94 b7 00 	jmp	0x16e	; 0x16e <__bad_interrupt>
  20:	0c 94 b7 00 	jmp	0x16e	; 0x16e <__bad_interrupt>
  24:	0c 94 b7 00 	jmp	0x16e	; 0x16e <__bad_interrupt>
  28:	0c 94 b7 00 	jmp	0x16e	; 0x16e <__bad_interrupt>
  2c:	0c 94 b7 00 	jmp	0x16e	; 0x16e <__bad_interrupt>
  30:	0c 94 b7 00 	jmp	0x16e	; 0x16e <__bad_interrupt>
  34:	0c 94 b7 00 	jmp	0x16e	; 0x16e <__bad_interrupt>
  38:	0c 94 b7 00 	jmp	0x16e	; 0x16e <__bad_interrupt>
  3c:	0c 94 b7 00 	jmp	0x16e	; 0x16e <__bad_interrupt>
  40:	0c 94 b7 00 	jmp	0x16e	; 0x16e <__bad_interrupt>
  44:	0c 94 b7 00 	jmp	0x16e	; 0x16e <__bad_interrupt>
  48:	0c 94 b7 00 	jmp	0x16e	; 0x16e <__bad_interrupt>
  4c:	0c 94 b7 00 	jmp	0x16e	; 0x16e <__bad_interrupt>
  50:	0c 94 b7 00 	jmp	0x16e	; 0x16e <__bad_interrupt>
  54:	0c 94 b7 00 	jmp	0x16e	; 0x16e <__bad_interrupt>
  58:	0c 94 b7 00 	jmp	0x16e	; 0x16e <__bad_interrupt>
  5c:	0c 94 b7 00 	jmp	0x16e	; 0x16e <__bad_interrupt>
  60:	0c 94 b7 00 	jmp	0x16e	; 0x16e <__bad_interrupt>
  64:	0c 94 b7 00 	jmp	0x16e	; 0x16e <__bad_interrupt>

00000068 <.dinit>:
  68:	01 00       	.word	0x0001	; ????
  6a:	01 01       	movw	r0, r2
  6c:	80 00       	.word	0x0080	; ????

0000006e <__ctors_end>:
  6e:	11 24       	eor	r1, r1
  70:	1f be       	out	0x3f, r1	; 63
  72:	cf ef       	ldi	r28, 0xFF	; 255
  74:	d8 e0       	ldi	r29, 0x08	; 8
  76:	de bf       	out	0x3e, r29	; 62
  78:	cd bf       	out	0x3d, r28	; 61

0000007a <__do_copy_data>:
  7a:	e8 e6       	ldi	r30, 0x68	; 104
  7c:	f0 e0       	ldi	r31, 0x00	; 0
  7e:	40 e0       	ldi	r20, 0x00	; 0
  80:	17 c0       	rjmp	.+46     	; 0xb0 <__do_clear_bss+0x8>
  82:	b5 91       	lpm	r27, Z+
  84:	a5 91       	lpm	r26, Z+
  86:	35 91       	lpm	r19, Z+
  88:	25 91       	lpm	r18, Z+
  8a:	05 91       	lpm	r16, Z+
  8c:	07 fd       	sbrc	r16, 7
  8e:	0c c0       	rjmp	.+24     	; 0xa8 <__do_clear_bss>
  90:	95 91       	lpm	r25, Z+
  92:	85 91       	lpm	r24, Z+
  94:	ef 01       	movw	r28, r30
  96:	f9 2f       	mov	r31, r25
  98:	e8 2f       	mov	r30, r24
  9a:	05 90       	lpm	r0, Z+
  9c:	0d 92       	st	X+, r0
  9e:	a2 17       	cp	r26, r18
  a0:	b3 07       	cpc	r27, r19
  a2:	d9 f7       	brne	.-10     	; 0x9a <__do_copy_data+0x20>
  a4:	fe 01       	movw	r30, r28
  a6:	04 c0       	rjmp	.+8      	; 0xb0 <__do_clear_bss+0x8>

000000a8 <__do_clear_bss>:
  a8:	1d 92       	st	X+, r1
  aa:	a2 17       	cp	r26, r18
  ac:	b3 07       	cpc	r27, r19
  ae:	e1 f7       	brne	.-8      	; 0xa8 <__do_clear_bss>
  b0:	ed 36       	cpi	r30, 0x6D	; 109
  b2:	f4 07       	cpc	r31, r20
  b4:	31 f7       	brne	.-52     	; 0x82 <__do_copy_data+0x8>
  b6:	0e 94 81 00 	call	0x102	; 0x102 <main>
  ba:	0c 94 a1 00 	jmp	0x142	; 0x142 <exit>

000000be <_exit>:
  be:	f8 94       	cli

000000c0 <__stop_program>:
  c0:	ff cf       	rjmp	.-2      	; 0xc0 <__stop_program>

Disassembly of section .text:

0000016e <__bad_interrupt>:
 16e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

Disassembly of section .text.SPI_MasterInit:

00000158 <SPI_MasterInit>:
	return 0;
}

void SPI_MasterInit() {
	// Configura el ATMega328P como maestro en el bus SPI
	DDRB |= (1 << MOSI) | (1 << MISO) | (1 << SCLK) | (1 << SS) | (1 << SS2);  // Configura pines de salida
 158:	84 b1       	in	r24, 0x04	; 4
 15a:	8c 67       	ori	r24, 0x7C	; 124
 15c:	84 b9       	out	0x04, r24	; 4
	SPCR = (1 << SPIE) | (1 << SPE) | (1 << MSTR) | (1 << SPR0); // Habilita interrupcion, Habilita SPI, modo maestro, velocidad de reloj f/16
 15e:	81 ed       	ldi	r24, 0xD1	; 209
 160:	8c bd       	out	0x2c, r24	; 44
 162:	08 95       	ret

Disassembly of section .text.SPI_MasterTransmit:

000000c2 <SPI_MasterTransmit>:
}

void SPI_MasterTransmit(char data, char slave) {
	
	PORTB &= ~(1 << slave);        // Inicia la transmisión de datos
  c2:	95 b1       	in	r25, 0x05	; 5
  c4:	21 e0       	ldi	r18, 0x01	; 1
  c6:	30 e0       	ldi	r19, 0x00	; 0
  c8:	02 c0       	rjmp	.+4      	; 0xce <SPI_MasterTransmit+0xc>
  ca:	22 0f       	add	r18, r18
  cc:	33 1f       	adc	r19, r19
  ce:	6a 95       	dec	r22
  d0:	e2 f7       	brpl	.-8      	; 0xca <SPI_MasterTransmit+0x8>
  d2:	42 2f       	mov	r20, r18
  d4:	40 95       	com	r20
  d6:	94 23       	and	r25, r20
  d8:	95 b9       	out	0x05, r25	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  da:	ef e3       	ldi	r30, 0x3F	; 63
  dc:	fc e9       	ldi	r31, 0x9C	; 156
  de:	31 97       	sbiw	r30, 0x01	; 1
  e0:	f1 f7       	brne	.-4      	; 0xde <SPI_MasterTransmit+0x1c>
  e2:	00 c0       	rjmp	.+0      	; 0xe4 <SPI_MasterTransmit+0x22>
  e4:	00 00       	nop
	_delay_ms(10);
	SPDR = data;
  e6:	8e bd       	out	0x2e, r24	; 46
	while (!(SPSR & (1 << SPIF))); // Espera a que se complete la transmisión
  e8:	0d b4       	in	r0, 0x2d	; 45
  ea:	07 fe       	sbrs	r0, 7
  ec:	fd cf       	rjmp	.-6      	; 0xe8 <SPI_MasterTransmit+0x26>
  ee:	8f e3       	ldi	r24, 0x3F	; 63
  f0:	9c e9       	ldi	r25, 0x9C	; 156
  f2:	01 97       	sbiw	r24, 0x01	; 1
  f4:	f1 f7       	brne	.-4      	; 0xf2 <SPI_MasterTransmit+0x30>
  f6:	00 c0       	rjmp	.+0      	; 0xf8 <SPI_MasterTransmit+0x36>
  f8:	00 00       	nop
	_delay_ms(10);
	PORTB |= (1 << slave);
  fa:	85 b1       	in	r24, 0x05	; 5
  fc:	28 2b       	or	r18, r24
  fe:	25 b9       	out	0x05, r18	; 5
 100:	08 95       	ret

Disassembly of section .text.SPI_MasterReceive:

00000164 <SPI_MasterReceive>:
}

uint8_t SPI_MasterReceive(){
	
	while(!(SPSR & (1 << SPIF)));   //Esperando a que la recepción se complete
 164:	0d b4       	in	r0, 0x2d	; 45
 166:	07 fe       	sbrs	r0, 7
 168:	fd cf       	rjmp	.-6      	; 0x164 <SPI_MasterReceive>

	return SPDR;                    //Devuelve información recibida
 16a:	8e b5       	in	r24, 0x2e	; 46
 16c:	08 95       	ret

Disassembly of section .text.main:

00000102 <main>:
uint8_t SPI_MasterReceive();


int main() {
	
	SPI_MasterInit();		      // Inicializa la comunicación SPI como maestro
 102:	0e 94 ac 00 	call	0x158	; 0x158 <SPI_MasterInit>
 106:	8f e3       	ldi	r24, 0x3F	; 63
 108:	9c e9       	ldi	r25, 0x9C	; 156
 10a:	01 97       	sbiw	r24, 0x01	; 1
 10c:	f1 f7       	brne	.-4      	; 0x10a <main+0x8>
 10e:	00 c0       	rjmp	.+0      	; 0x110 <main+0xe>
 110:	00 00       	nop
	char data_to_send = 0x00;
	
	while (1) {
		data_to_send = 'R';     // Datos a enviar a un Esclavo
		
		SPI_MasterTransmit(data_to_send, SS);
 112:	62 e0       	ldi	r22, 0x02	; 2
 114:	82 e5       	ldi	r24, 0x52	; 82
 116:	0e 94 61 00 	call	0xc2	; 0xc2 <_etext>
 11a:	8f e3       	ldi	r24, 0x3F	; 63
 11c:	9c e9       	ldi	r25, 0x9C	; 156
 11e:	01 97       	sbiw	r24, 0x01	; 1
 120:	f1 f7       	brne	.-4      	; 0x11e <main+0x1c>
 122:	00 c0       	rjmp	.+0      	; 0x124 <main+0x22>
 124:	00 00       	nop
		_delay_ms(10);
		
		dato1 = SPI_MasterReceive(); // Leer datos
 126:	0e 94 b2 00 	call	0x164	; 0x164 <SPI_MasterReceive>
 12a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 12e:	9f ef       	ldi	r25, 0xFF	; 255
 130:	29 e6       	ldi	r18, 0x69	; 105
 132:	88 e1       	ldi	r24, 0x18	; 24
 134:	91 50       	subi	r25, 0x01	; 1
 136:	20 40       	sbci	r18, 0x00	; 0
 138:	80 40       	sbci	r24, 0x00	; 0
 13a:	e1 f7       	brne	.-8      	; 0x134 <main+0x32>
 13c:	00 c0       	rjmp	.+0      	; 0x13e <main+0x3c>
 13e:	00 00       	nop
 140:	e8 cf       	rjmp	.-48     	; 0x112 <main+0x10>

Disassembly of section .text.__dummy_fini:

00000176 <_fini>:
 176:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

00000178 <__funcs_on_exit>:
 178:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

0000017a <__simulator_exit>:
 17a:	08 95       	ret

Disassembly of section .text.exit:

00000142 <exit>:
 142:	ec 01       	movw	r28, r24
 144:	0e 94 bc 00 	call	0x178	; 0x178 <__funcs_on_exit>
 148:	0e 94 bb 00 	call	0x176	; 0x176 <_fini>
 14c:	ce 01       	movw	r24, r28
 14e:	0e 94 bd 00 	call	0x17a	; 0x17a <__simulator_exit>
 152:	ce 01       	movw	r24, r28
 154:	0e 94 b9 00 	call	0x172	; 0x172 <_Exit>

Disassembly of section .text._Exit:

00000172 <_Exit>:
 172:	0e 94 5f 00 	call	0xbe	; 0xbe <_exit>
