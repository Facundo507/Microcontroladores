
SPI_Esclavo.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001ea  2**0
                  ALLOC, LOAD, DATA
  1 .text         00000080  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  000001ea  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000000e  00000000  00000000  00000219  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  00000227  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b45  00000000  00000000  00000277  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000755  00000000  00000000  00000dbc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000337  00000000  00000000  00001511  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000094  00000000  00000000  00001848  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000208  00000000  00000000  000018dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000014a  00000000  00000000  00001ae4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00001c2e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  00000168  00000168  000001dc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001c70  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.UART_init 00000016  00000118  00000118  0000018c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.UART_sendChar 0000000e  00000144  00000144  000001b8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.UART_sendString 0000002c  000000ec  000000ec  00000160  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.SPI_SlaveInit 0000000c  00000152  00000152  000001c6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.SPI_SlaveReceive 0000000a  0000015e  0000015e  000001d2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .progmemx.data 0000000c  00000080  00000080  000000f4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 20 .text.main    00000060  0000008c  0000008c  00000100  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.__dummy_fini 00000002  00000170  00000170  000001e4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.__dummy_funcs_on_exit 00000002  00000172  00000172  000001e6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.__dummy_simulator_exit 00000002  00000174  00000174  000001e8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text.exit    00000016  0000012e  0000012e  000001a2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text._Exit   00000004  0000016c  0000016c  000001e0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
   8:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
   c:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
  10:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
  14:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
  18:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
  1c:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
  20:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
  24:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
  28:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
  2c:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
  30:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
  34:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
  38:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
  3c:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
  40:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
  44:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
  48:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
  4c:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
  50:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
  54:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
  58:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
  5c:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
  60:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
  64:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 46 00 	call	0x8c	; 0x8c <main>
  78:	0c 94 97 00 	jmp	0x12e	; 0x12e <exit>

0000007c <_exit>:
  7c:	f8 94       	cli

0000007e <__stop_program>:
  7e:	ff cf       	rjmp	.-2      	; 0x7e <__stop_program>

Disassembly of section .text:

00000168 <__bad_interrupt>:
 168:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.UART_init:

00000118 <UART_init>:
#include <avr/io.h>
#include <util/delay.h>

void UART_init(unsigned int ubrr) {
	// Configurar el valor de UBRR (Baud Rate Register)
	UBRR0H = (unsigned char)(ubrr >> 8);
 118:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = (unsigned char)ubrr;
 11c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);
 120:	88 e1       	ldi	r24, 0x18	; 24
 122:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
 126:	86 e0       	ldi	r24, 0x06	; 6
 128:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 12c:	08 95       	ret

Disassembly of section .text.UART_sendChar:

00000144 <UART_sendChar>:
}

void UART_sendChar(char data) {
	while (!(UCSR0A & (1 << UDRE0))){}
 144:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 148:	95 ff       	sbrs	r25, 5
 14a:	fc cf       	rjmp	.-8      	; 0x144 <UART_sendChar>
	UDR0 = data;
 14c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 150:	08 95       	ret

Disassembly of section .text.UART_sendString:

000000ec <UART_sendString>:
char UART_receiveChar(void) {
	while (!(UCSR0A & (1 << RXC0))){}
	return UDR0;
}

void UART_sendString(const char *str) {
  ec:	cf 92       	push	r12
  ee:	df 92       	push	r13
  f0:	ef 92       	push	r14
  f2:	6b 01       	movw	r12, r22
  f4:	e8 2e       	mov	r14, r24
	while (*str) {
  f6:	06 c0       	rjmp	.+12     	; 0x104 <UART_sendString+0x18>
		UART_sendChar(*str++);
  f8:	9f ef       	ldi	r25, 0xFF	; 255
  fa:	c9 1a       	sub	r12, r25
  fc:	d9 0a       	sbc	r13, r25
  fe:	e9 0a       	sbc	r14, r25
 100:	0e 94 a2 00 	call	0x144	; 0x144 <UART_sendChar>
	while (!(UCSR0A & (1 << RXC0))){}
	return UDR0;
}

void UART_sendString(const char *str) {
	while (*str) {
 104:	f6 01       	movw	r30, r12
 106:	84 91       	lpm	r24, Z
 108:	e7 fc       	sbrc	r14, 7
 10a:	80 81       	ld	r24, Z
 10c:	81 11       	cpse	r24, r1
 10e:	f4 cf       	rjmp	.-24     	; 0xf8 <UART_sendString+0xc>
		UART_sendChar(*str++);
	}
}
 110:	ef 90       	pop	r14
 112:	df 90       	pop	r13
 114:	cf 90       	pop	r12
 116:	08 95       	ret

Disassembly of section .text.SPI_SlaveInit:

00000152 <SPI_SlaveInit>:
#define MISO 4   // Pin conectado a MISO Master input Slave output
#define SCLK  5   // Pin conectado a SCLK Serial Clock

void SPI_SlaveInit() {
	// Configura el ATMega328P como maestro en el bus SPI
	DDRB |= (1 << MISO);  // Configura pin de salida
 152:	84 b1       	in	r24, 0x04	; 4
 154:	80 61       	ori	r24, 0x10	; 16
 156:	84 b9       	out	0x04, r24	; 4
	SPCR = (1 << SPE); // Habilita SPI
 158:	80 e4       	ldi	r24, 0x40	; 64
 15a:	8c bd       	out	0x2c, r24	; 44
 15c:	08 95       	ret

Disassembly of section .text.SPI_SlaveReceive:

0000015e <SPI_SlaveReceive>:
}

uint8_t SPI_SlaveReceive(){
	
	while(!(SPSR & (1 << SPIF)));   //Esperando a que la recepci?n se complete
 15e:	0d b4       	in	r0, 0x2d	; 45
 160:	07 fe       	sbrs	r0, 7
 162:	fd cf       	rjmp	.-6      	; 0x15e <SPI_SlaveReceive>

	return SPDR;                    //Devuelve informaci?n recibida
 164:	8e b5       	in	r24, 0x2e	; 46
}
 166:	08 95       	ret

Disassembly of section .text.main:

0000008c <main>:
}

char UART_receiveChar(void) {
	while (!(UCSR0A & (1 << RXC0))){}
	return UDR0;
}
  8c:	8a b1       	in	r24, 0x0a	; 10
  8e:	80 68       	ori	r24, 0x80	; 128
  90:	8a b9       	out	0x0a, r24	; 10
  92:	0e 94 a9 00 	call	0x152	; 0x152 <SPI_SlaveInit>
  96:	8f e3       	ldi	r24, 0x3F	; 63
  98:	9c e9       	ldi	r25, 0x9C	; 156
  9a:	01 97       	sbiw	r24, 0x01	; 1
  9c:	f1 f7       	brne	.-4      	; 0x9a <main+0xe>
  9e:	00 c0       	rjmp	.+0      	; 0xa0 <main+0x14>
  a0:	00 00       	nop
  a2:	87 e6       	ldi	r24, 0x67	; 103
  a4:	90 e0       	ldi	r25, 0x00	; 0
  a6:	0e 94 8c 00 	call	0x118	; 0x118 <UART_init>
  aa:	0e 94 af 00 	call	0x15e	; 0x15e <SPI_SlaveReceive>
  ae:	c8 2f       	mov	r28, r24
  b0:	0e 94 a2 00 	call	0x144	; 0x144 <UART_sendChar>
  b4:	60 e8       	ldi	r22, 0x80	; 128
  b6:	70 e0       	ldi	r23, 0x00	; 0
  b8:	80 e0       	ldi	r24, 0x00	; 0
  ba:	0e 94 76 00 	call	0xec	; 0xec <UART_sendString>
  be:	c2 35       	cpi	r28, 0x52	; 82
  c0:	a1 f7       	brne	.-24     	; 0xaa <main+0x1e>
  c2:	63 e8       	ldi	r22, 0x83	; 131
  c4:	70 e0       	ldi	r23, 0x00	; 0
  c6:	80 e0       	ldi	r24, 0x00	; 0
  c8:	0e 94 76 00 	call	0xec	; 0xec <UART_sendString>
  cc:	8b b1       	in	r24, 0x0b	; 11
  ce:	80 68       	ori	r24, 0x80	; 128
  d0:	8b b9       	out	0x0b, r24	; 11
  d2:	9f ef       	ldi	r25, 0xFF	; 255
  d4:	23 ec       	ldi	r18, 0xC3	; 195
  d6:	89 e0       	ldi	r24, 0x09	; 9
  d8:	91 50       	subi	r25, 0x01	; 1
  da:	20 40       	sbci	r18, 0x00	; 0
  dc:	80 40       	sbci	r24, 0x00	; 0
  de:	e1 f7       	brne	.-8      	; 0xd8 <main+0x4c>
  e0:	00 c0       	rjmp	.+0      	; 0xe2 <main+0x56>
  e2:	00 00       	nop
  e4:	8b b1       	in	r24, 0x0b	; 11
  e6:	8f 77       	andi	r24, 0x7F	; 127
  e8:	8b b9       	out	0x0b, r24	; 11
  ea:	df cf       	rjmp	.-66     	; 0xaa <main+0x1e>

Disassembly of section .text.__dummy_fini:

00000170 <_fini>:
 170:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

00000172 <__funcs_on_exit>:
 172:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

00000174 <__simulator_exit>:
 174:	08 95       	ret

Disassembly of section .text.exit:

0000012e <exit>:
 12e:	ec 01       	movw	r28, r24
 130:	0e 94 b9 00 	call	0x172	; 0x172 <__funcs_on_exit>
 134:	0e 94 b8 00 	call	0x170	; 0x170 <_fini>
 138:	ce 01       	movw	r24, r28
 13a:	0e 94 ba 00 	call	0x174	; 0x174 <__simulator_exit>
 13e:	ce 01       	movw	r24, r28
 140:	0e 94 b6 00 	call	0x16c	; 0x16c <_Exit>

Disassembly of section .text._Exit:

0000016c <_Exit>:
 16c:	0e 94 3e 00 	call	0x7c	; 0x7c <_exit>
