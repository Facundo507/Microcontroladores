
SPI_Esclavo.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000236  2**0
                  ALLOC, LOAD, DATA
  1 .text         00000080  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  00000236  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000000e  00000000  00000000  00000265  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  00000273  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b4a  00000000  00000000  000002c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000755  00000000  00000000  00000e0d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000343  00000000  00000000  00001562  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000094  00000000  00000000  000018a8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000208  00000000  00000000  0000193c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000102  00000000  00000000  00001b44  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00001c46  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  00000194  00000194  00000228  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001c88  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.UART_init 00000016  00000144  00000144  000001d8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.UART_sendChar 0000000e  00000170  00000170  00000204  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.UART_sendString 0000002c  00000118  00000118  000001ac  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.SPI_SlaveInit 0000000c  0000017e  0000017e  00000212  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.SPI_SlaveReceive 0000000a  0000018a  0000018a  0000021e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .progmemx.data 00000027  00000080  00000080  00000114  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 20 .text.main    00000070  000000a8  000000a8  0000013c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.__dummy_fini 00000002  0000019c  0000019c  00000230  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.__dummy_funcs_on_exit 00000002  0000019e  0000019e  00000232  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.__dummy_simulator_exit 00000002  000001a0  000001a0  00000234  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text.exit    00000016  0000015a  0000015a  000001ee  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text._Exit   00000004  00000198  00000198  0000022c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 ca 00 	jmp	0x194	; 0x194 <__bad_interrupt>
   8:	0c 94 ca 00 	jmp	0x194	; 0x194 <__bad_interrupt>
   c:	0c 94 ca 00 	jmp	0x194	; 0x194 <__bad_interrupt>
  10:	0c 94 ca 00 	jmp	0x194	; 0x194 <__bad_interrupt>
  14:	0c 94 ca 00 	jmp	0x194	; 0x194 <__bad_interrupt>
  18:	0c 94 ca 00 	jmp	0x194	; 0x194 <__bad_interrupt>
  1c:	0c 94 ca 00 	jmp	0x194	; 0x194 <__bad_interrupt>
  20:	0c 94 ca 00 	jmp	0x194	; 0x194 <__bad_interrupt>
  24:	0c 94 ca 00 	jmp	0x194	; 0x194 <__bad_interrupt>
  28:	0c 94 ca 00 	jmp	0x194	; 0x194 <__bad_interrupt>
  2c:	0c 94 ca 00 	jmp	0x194	; 0x194 <__bad_interrupt>
  30:	0c 94 ca 00 	jmp	0x194	; 0x194 <__bad_interrupt>
  34:	0c 94 ca 00 	jmp	0x194	; 0x194 <__bad_interrupt>
  38:	0c 94 ca 00 	jmp	0x194	; 0x194 <__bad_interrupt>
  3c:	0c 94 ca 00 	jmp	0x194	; 0x194 <__bad_interrupt>
  40:	0c 94 ca 00 	jmp	0x194	; 0x194 <__bad_interrupt>
  44:	0c 94 ca 00 	jmp	0x194	; 0x194 <__bad_interrupt>
  48:	0c 94 ca 00 	jmp	0x194	; 0x194 <__bad_interrupt>
  4c:	0c 94 ca 00 	jmp	0x194	; 0x194 <__bad_interrupt>
  50:	0c 94 ca 00 	jmp	0x194	; 0x194 <__bad_interrupt>
  54:	0c 94 ca 00 	jmp	0x194	; 0x194 <__bad_interrupt>
  58:	0c 94 ca 00 	jmp	0x194	; 0x194 <__bad_interrupt>
  5c:	0c 94 ca 00 	jmp	0x194	; 0x194 <__bad_interrupt>
  60:	0c 94 ca 00 	jmp	0x194	; 0x194 <__bad_interrupt>
  64:	0c 94 ca 00 	jmp	0x194	; 0x194 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 54 00 	call	0xa8	; 0xa8 <main>
  78:	0c 94 ad 00 	jmp	0x15a	; 0x15a <exit>

0000007c <_exit>:
  7c:	f8 94       	cli

0000007e <__stop_program>:
  7e:	ff cf       	rjmp	.-2      	; 0x7e <__stop_program>

Disassembly of section .text:

00000194 <__bad_interrupt>:
 194:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

Disassembly of section .text.UART_init:

00000144 <UART_init>:
#include <avr/io.h>
#include <util/delay.h>

void UART_init(unsigned int ubrr) {
	// Configurar el valor de UBRR (Baud Rate Register)
	UBRR0H = (unsigned char)(ubrr >> 8);
 144:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = (unsigned char)ubrr;
 148:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);
 14c:	88 e1       	ldi	r24, 0x18	; 24
 14e:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
 152:	86 e0       	ldi	r24, 0x06	; 6
 154:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 158:	08 95       	ret

Disassembly of section .text.UART_sendChar:

00000170 <UART_sendChar>:
}

void UART_sendChar(char data) {
	while (!(UCSR0A & (1 << UDRE0))){}
 170:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 174:	95 ff       	sbrs	r25, 5
 176:	fc cf       	rjmp	.-8      	; 0x170 <UART_sendChar>
	UDR0 = data;
 178:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 17c:	08 95       	ret

Disassembly of section .text.UART_sendString:

00000118 <UART_sendString>:
char UART_receiveChar(void) {
	while (!(UCSR0A & (1 << RXC0))){}
	return UDR0;
}

void UART_sendString(const char *str) {
 118:	cf 92       	push	r12
 11a:	df 92       	push	r13
 11c:	ef 92       	push	r14
 11e:	6b 01       	movw	r12, r22
 120:	e8 2e       	mov	r14, r24
	while (*str) {
 122:	06 c0       	rjmp	.+12     	; 0x130 <UART_sendString+0x18>
		UART_sendChar(*str++);
 124:	9f ef       	ldi	r25, 0xFF	; 255
 126:	c9 1a       	sub	r12, r25
 128:	d9 0a       	sbc	r13, r25
 12a:	e9 0a       	sbc	r14, r25
 12c:	0e 94 b8 00 	call	0x170	; 0x170 <UART_sendChar>
	while (!(UCSR0A & (1 << RXC0))){}
	return UDR0;
}

void UART_sendString(const char *str) {
	while (*str) {
 130:	f6 01       	movw	r30, r12
 132:	84 91       	lpm	r24, Z
 134:	e7 fc       	sbrc	r14, 7
 136:	80 81       	ld	r24, Z
 138:	81 11       	cpse	r24, r1
 13a:	f4 cf       	rjmp	.-24     	; 0x124 <UART_sendString+0xc>
		UART_sendChar(*str++);
	}
}
 13c:	ef 90       	pop	r14
 13e:	df 90       	pop	r13
 140:	cf 90       	pop	r12
 142:	08 95       	ret

Disassembly of section .text.SPI_SlaveInit:

0000017e <SPI_SlaveInit>:
#define PINLuz 7


void SPI_SlaveInit() {
	// Configura el ATMega328P como maestro en el bus SPI
	DDRB |= (1 << MISO);  // Configura pin de salida
 17e:	84 b1       	in	r24, 0x04	; 4
 180:	80 61       	ori	r24, 0x10	; 16
 182:	84 b9       	out	0x04, r24	; 4
	SPCR = (1 << SPE); // Habilita SPI
 184:	80 e4       	ldi	r24, 0x40	; 64
 186:	8c bd       	out	0x2c, r24	; 44
 188:	08 95       	ret

Disassembly of section .text.SPI_SlaveReceive:

0000018a <SPI_SlaveReceive>:
}

uint8_t SPI_SlaveReceive(){
	
	while(!(SPSR & (1 << SPIF)));   //Esperando a que la recepci?n se complete
 18a:	0d b4       	in	r0, 0x2d	; 45
 18c:	07 fe       	sbrs	r0, 7
 18e:	fd cf       	rjmp	.-6      	; 0x18a <SPI_SlaveReceive>

	return SPDR;                    //Devuelve informaci?n recibida
 190:	8e b5       	in	r24, 0x2e	; 46
}
 192:	08 95       	ret

Disassembly of section .text.main:

000000a8 <main>:
}

char UART_receiveChar(void) {
	while (!(UCSR0A & (1 << RXC0))){}
	return UDR0;
}
  a8:	8a b1       	in	r24, 0x0a	; 10
  aa:	80 68       	ori	r24, 0x80	; 128
  ac:	8a b9       	out	0x0a, r24	; 10
  ae:	0e 94 bf 00 	call	0x17e	; 0x17e <SPI_SlaveInit>
  b2:	8f e3       	ldi	r24, 0x3F	; 63
  b4:	9c e9       	ldi	r25, 0x9C	; 156
  b6:	01 97       	sbiw	r24, 0x01	; 1
  b8:	f1 f7       	brne	.-4      	; 0xb6 <main+0xe>
  ba:	00 c0       	rjmp	.+0      	; 0xbc <main+0x14>
  bc:	00 00       	nop
  be:	87 e6       	ldi	r24, 0x67	; 103
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	0e 94 a2 00 	call	0x144	; 0x144 <UART_init>
  c6:	0e 94 c5 00 	call	0x18a	; 0x18a <SPI_SlaveReceive>
  ca:	c8 2f       	mov	r28, r24
  cc:	0e 94 b8 00 	call	0x170	; 0x170 <UART_sendChar>
  d0:	60 e8       	ldi	r22, 0x80	; 128
  d2:	70 e0       	ldi	r23, 0x00	; 0
  d4:	80 e0       	ldi	r24, 0x00	; 0
  d6:	0e 94 8c 00 	call	0x118	; 0x118 <UART_sendString>
  da:	c1 30       	cpi	r28, 0x01	; 1
  dc:	49 f4       	brne	.+18     	; 0xf0 <main+0x48>
  de:	63 e8       	ldi	r22, 0x83	; 131
  e0:	70 e0       	ldi	r23, 0x00	; 0
  e2:	80 e0       	ldi	r24, 0x00	; 0
  e4:	0e 94 8c 00 	call	0x118	; 0x118 <UART_sendString>
  e8:	8b b1       	in	r24, 0x0b	; 11
  ea:	80 68       	ori	r24, 0x80	; 128
  ec:	8b b9       	out	0x0b, r24	; 11
  ee:	eb cf       	rjmp	.-42     	; 0xc6 <main+0x1e>
  f0:	c1 11       	cpse	r28, r1
  f2:	09 c0       	rjmp	.+18     	; 0x106 <main+0x5e>
  f4:	8b b1       	in	r24, 0x0b	; 11
  f6:	8f 77       	andi	r24, 0x7F	; 127
  f8:	8b b9       	out	0x0b, r24	; 11
  fa:	6f e8       	ldi	r22, 0x8F	; 143
  fc:	70 e0       	ldi	r23, 0x00	; 0
  fe:	80 e0       	ldi	r24, 0x00	; 0
 100:	0e 94 8c 00 	call	0x118	; 0x118 <UART_sendString>
 104:	e0 cf       	rjmp	.-64     	; 0xc6 <main+0x1e>
 106:	8b b1       	in	r24, 0x0b	; 11
 108:	8f 77       	andi	r24, 0x7F	; 127
 10a:	8b b9       	out	0x0b, r24	; 11
 10c:	69 e9       	ldi	r22, 0x99	; 153
 10e:	70 e0       	ldi	r23, 0x00	; 0
 110:	80 e0       	ldi	r24, 0x00	; 0
 112:	0e 94 8c 00 	call	0x118	; 0x118 <UART_sendString>
 116:	d7 cf       	rjmp	.-82     	; 0xc6 <main+0x1e>

Disassembly of section .text.__dummy_fini:

0000019c <_fini>:
 19c:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

0000019e <__funcs_on_exit>:
 19e:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

000001a0 <__simulator_exit>:
 1a0:	08 95       	ret

Disassembly of section .text.exit:

0000015a <exit>:
 15a:	ec 01       	movw	r28, r24
 15c:	0e 94 cf 00 	call	0x19e	; 0x19e <__funcs_on_exit>
 160:	0e 94 ce 00 	call	0x19c	; 0x19c <_fini>
 164:	ce 01       	movw	r24, r28
 166:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <__simulator_exit>
 16a:	ce 01       	movw	r24, r28
 16c:	0e 94 cc 00 	call	0x198	; 0x198 <_Exit>

Disassembly of section .text._Exit:

00000198 <_Exit>:
 198:	0e 94 3e 00 	call	0x7c	; 0x7c <_exit>
