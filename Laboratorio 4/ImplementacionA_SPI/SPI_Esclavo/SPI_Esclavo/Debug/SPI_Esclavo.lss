
SPI_Esclavo.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000212  2**0
                  ALLOC, LOAD, DATA
  1 .text         00000080  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  00000212  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000000e  00000000  00000000  00000241  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  0000024f  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b2b  00000000  00000000  0000029f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000755  00000000  00000000  00000dca  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000331  00000000  00000000  0000151f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000094  00000000  00000000  00001850  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000208  00000000  00000000  000018e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000102  00000000  00000000  00001aec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00001bee  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  00000170  00000170  00000204  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001c30  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.UART_init 00000016  00000120  00000120  000001b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.UART_sendChar 0000000e  0000014c  0000014c  000001e0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.UART_sendString 0000002c  000000f4  000000f4  00000188  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.SPI_SlaveInit 0000000c  0000015a  0000015a  000001ee  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.SPI_SlaveReceive 0000000a  00000166  00000166  000001fa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .progmemx.data 00000019  00000080  00000080  00000114  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 20 .text.main    0000005a  0000009a  0000009a  0000012e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.__dummy_fini 00000002  00000178  00000178  0000020c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.__dummy_funcs_on_exit 00000002  0000017a  0000017a  0000020e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.__dummy_simulator_exit 00000002  0000017c  0000017c  00000210  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text.exit    00000016  00000136  00000136  000001ca  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text._Exit   00000004  00000174  00000174  00000208  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
   8:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
   c:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
  10:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
  14:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
  18:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
  1c:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
  20:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
  24:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
  28:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
  2c:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
  30:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
  34:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
  38:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
  3c:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
  40:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
  44:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
  48:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
  4c:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
  50:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
  54:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
  58:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
  5c:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
  60:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
  64:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 4d 00 	call	0x9a	; 0x9a <main>
  78:	0c 94 9b 00 	jmp	0x136	; 0x136 <exit>

0000007c <_exit>:
  7c:	f8 94       	cli

0000007e <__stop_program>:
  7e:	ff cf       	rjmp	.-2      	; 0x7e <__stop_program>

Disassembly of section .text:

00000170 <__bad_interrupt>:
 170:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.UART_init:

00000120 <UART_init>:
#include <avr/io.h>
#include <util/delay.h>

void UART_init(unsigned int ubrr) {
	// Configurar el valor de UBRR (Baud Rate Register)
	UBRR0H = (unsigned char)(ubrr >> 8);
 120:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = (unsigned char)ubrr;
 124:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);
 128:	88 e1       	ldi	r24, 0x18	; 24
 12a:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
 12e:	86 e0       	ldi	r24, 0x06	; 6
 130:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 134:	08 95       	ret

Disassembly of section .text.UART_sendChar:

0000014c <UART_sendChar>:
}

void UART_sendChar(char data) {
	while (!(UCSR0A & (1 << UDRE0))){}
 14c:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 150:	95 ff       	sbrs	r25, 5
 152:	fc cf       	rjmp	.-8      	; 0x14c <UART_sendChar>
	UDR0 = data;
 154:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 158:	08 95       	ret

Disassembly of section .text.UART_sendString:

000000f4 <UART_sendString>:
char UART_receiveChar(void) {
	while (!(UCSR0A & (1 << RXC0))){}
	return UDR0;
}

void UART_sendString(const char *str) {
  f4:	cf 92       	push	r12
  f6:	df 92       	push	r13
  f8:	ef 92       	push	r14
  fa:	6b 01       	movw	r12, r22
  fc:	e8 2e       	mov	r14, r24
	while (*str) {
  fe:	06 c0       	rjmp	.+12     	; 0x10c <UART_sendString+0x18>
		UART_sendChar(*str++);
 100:	9f ef       	ldi	r25, 0xFF	; 255
 102:	c9 1a       	sub	r12, r25
 104:	d9 0a       	sbc	r13, r25
 106:	e9 0a       	sbc	r14, r25
 108:	0e 94 a6 00 	call	0x14c	; 0x14c <UART_sendChar>
	while (!(UCSR0A & (1 << RXC0))){}
	return UDR0;
}

void UART_sendString(const char *str) {
	while (*str) {
 10c:	f6 01       	movw	r30, r12
 10e:	84 91       	lpm	r24, Z
 110:	e7 fc       	sbrc	r14, 7
 112:	80 81       	ld	r24, Z
 114:	81 11       	cpse	r24, r1
 116:	f4 cf       	rjmp	.-24     	; 0x100 <UART_sendString+0xc>
		UART_sendChar(*str++);
	}
}
 118:	ef 90       	pop	r14
 11a:	df 90       	pop	r13
 11c:	cf 90       	pop	r12
 11e:	08 95       	ret

Disassembly of section .text.SPI_SlaveInit:

0000015a <SPI_SlaveInit>:
#define PINLuz 7
#define BitLuz 0

void SPI_SlaveInit() {
	// Configura el ATMega328P como maestro en el bus SPI
	DDRB |= (1 << MISO);  // Configura pin de salida
 15a:	84 b1       	in	r24, 0x04	; 4
 15c:	80 61       	ori	r24, 0x10	; 16
 15e:	84 b9       	out	0x04, r24	; 4
	SPCR = (1 << SPE); // Habilita SPI
 160:	80 e4       	ldi	r24, 0x40	; 64
 162:	8c bd       	out	0x2c, r24	; 44
 164:	08 95       	ret

Disassembly of section .text.SPI_SlaveReceive:

00000166 <SPI_SlaveReceive>:
}

uint8_t SPI_SlaveReceive(){
	
	while(!(SPSR & (1 << SPIF)));   //Esperando a que la recepci?n se complete
 166:	0d b4       	in	r0, 0x2d	; 45
 168:	07 fe       	sbrs	r0, 7
 16a:	fd cf       	rjmp	.-6      	; 0x166 <SPI_SlaveReceive>

	return SPDR;                    //Devuelve informaci?n recibida
 16c:	8e b5       	in	r24, 0x2e	; 46
}
 16e:	08 95       	ret

Disassembly of section .text.main:

0000009a <main>:
}

char UART_receiveChar(void) {
	while (!(UCSR0A & (1 << RXC0))){}
	return UDR0;
}
  9a:	8a b1       	in	r24, 0x0a	; 10
  9c:	80 68       	ori	r24, 0x80	; 128
  9e:	8a b9       	out	0x0a, r24	; 10
  a0:	0e 94 ad 00 	call	0x15a	; 0x15a <SPI_SlaveInit>
  a4:	8f e3       	ldi	r24, 0x3F	; 63
  a6:	9c e9       	ldi	r25, 0x9C	; 156
  a8:	01 97       	sbiw	r24, 0x01	; 1
  aa:	f1 f7       	brne	.-4      	; 0xa8 <main+0xe>
  ac:	00 c0       	rjmp	.+0      	; 0xae <main+0x14>
  ae:	00 00       	nop
  b0:	87 e6       	ldi	r24, 0x67	; 103
  b2:	90 e0       	ldi	r25, 0x00	; 0
  b4:	0e 94 90 00 	call	0x120	; 0x120 <UART_init>
  b8:	0e 94 b3 00 	call	0x166	; 0x166 <SPI_SlaveReceive>
  bc:	c8 2f       	mov	r28, r24
  be:	0e 94 a6 00 	call	0x14c	; 0x14c <UART_sendChar>
  c2:	60 e8       	ldi	r22, 0x80	; 128
  c4:	70 e0       	ldi	r23, 0x00	; 0
  c6:	80 e0       	ldi	r24, 0x00	; 0
  c8:	0e 94 7a 00 	call	0xf4	; 0xf4 <UART_sendString>
  cc:	c0 ff       	sbrs	r28, 0
  ce:	09 c0       	rjmp	.+18     	; 0xe2 <main+0x48>
  d0:	63 e8       	ldi	r22, 0x83	; 131
  d2:	70 e0       	ldi	r23, 0x00	; 0
  d4:	80 e0       	ldi	r24, 0x00	; 0
  d6:	0e 94 7a 00 	call	0xf4	; 0xf4 <UART_sendString>
  da:	8b b1       	in	r24, 0x0b	; 11
  dc:	80 68       	ori	r24, 0x80	; 128
  de:	8b b9       	out	0x0b, r24	; 11
  e0:	eb cf       	rjmp	.-42     	; 0xb8 <main+0x1e>
  e2:	8b b1       	in	r24, 0x0b	; 11
  e4:	8f 77       	andi	r24, 0x7F	; 127
  e6:	8b b9       	out	0x0b, r24	; 11
  e8:	6f e8       	ldi	r22, 0x8F	; 143
  ea:	70 e0       	ldi	r23, 0x00	; 0
  ec:	80 e0       	ldi	r24, 0x00	; 0
  ee:	0e 94 7a 00 	call	0xf4	; 0xf4 <UART_sendString>
  f2:	e2 cf       	rjmp	.-60     	; 0xb8 <main+0x1e>

Disassembly of section .text.__dummy_fini:

00000178 <_fini>:
 178:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

0000017a <__funcs_on_exit>:
 17a:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

0000017c <__simulator_exit>:
 17c:	08 95       	ret

Disassembly of section .text.exit:

00000136 <exit>:
 136:	ec 01       	movw	r28, r24
 138:	0e 94 bd 00 	call	0x17a	; 0x17a <__funcs_on_exit>
 13c:	0e 94 bc 00 	call	0x178	; 0x178 <_fini>
 140:	ce 01       	movw	r24, r28
 142:	0e 94 be 00 	call	0x17c	; 0x17c <__simulator_exit>
 146:	ce 01       	movw	r24, r28
 148:	0e 94 ba 00 	call	0x174	; 0x174 <_Exit>

Disassembly of section .text._Exit:

00000174 <_Exit>:
 174:	0e 94 3e 00 	call	0x7c	; 0x7c <_exit>
