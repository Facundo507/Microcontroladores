
MODO_Sleep.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000248  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000c2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  00000248  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000000e  00000000  00000000  00000277  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  00000285  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a02  00000000  00000000  000002cd  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000702  00000000  00000000  00000ccf  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000301  00000000  00000000  000013d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000084  00000000  00000000  000016d4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000208  00000000  00000000  00001758  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000a5  00000000  00000000  00001960  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00001a05  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  000001a6  000001a6  0000023a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001a40  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.setup   0000002c  0000013c  0000013c  000001d0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.sleep_mode_config 00000018  00000168  00000168  000001fc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.led_on  00000008  00000196  00000196  0000022a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.led_off 00000008  0000019e  0000019e  00000232  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.__vector_1 0000002e  0000010e  0000010e  000001a2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.main    0000004c  000000c2  000000c2  00000156  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .bss.state    00000001  00800100  00800100  00000248  2**0
                  ALLOC
 21 .text.__dummy_fini 00000002  000001ae  000001ae  00000242  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.__dummy_funcs_on_exit 00000002  000001b0  000001b0  00000244  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.__dummy_simulator_exit 00000002  000001b2  000001b2  00000246  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text.exit    00000016  00000180  00000180  00000214  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text._Exit   00000004  000001aa  000001aa  0000023e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 37 00 	jmp	0x6e	; 0x6e <__ctors_end>
   4:	0c 94 87 00 	jmp	0x10e	; 0x10e <__vector_1>
   8:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
   c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  10:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  14:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  18:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  1c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  20:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  24:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  28:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  2c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  30:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  34:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  38:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  3c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  40:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  44:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  48:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  4c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  50:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  54:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  58:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  5c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  60:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  64:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>

00000068 <.dinit>:
  68:	01 00       	.word	0x0001	; ????
  6a:	01 01       	movw	r0, r2
  6c:	80 00       	.word	0x0080	; ????

0000006e <__ctors_end>:
  6e:	11 24       	eor	r1, r1
  70:	1f be       	out	0x3f, r1	; 63
  72:	cf ef       	ldi	r28, 0xFF	; 255
  74:	d8 e0       	ldi	r29, 0x08	; 8
  76:	de bf       	out	0x3e, r29	; 62
  78:	cd bf       	out	0x3d, r28	; 61

0000007a <__do_copy_data>:
  7a:	e8 e6       	ldi	r30, 0x68	; 104
  7c:	f0 e0       	ldi	r31, 0x00	; 0
  7e:	40 e0       	ldi	r20, 0x00	; 0
  80:	17 c0       	rjmp	.+46     	; 0xb0 <__do_clear_bss+0x8>
  82:	b5 91       	lpm	r27, Z+
  84:	a5 91       	lpm	r26, Z+
  86:	35 91       	lpm	r19, Z+
  88:	25 91       	lpm	r18, Z+
  8a:	05 91       	lpm	r16, Z+
  8c:	07 fd       	sbrc	r16, 7
  8e:	0c c0       	rjmp	.+24     	; 0xa8 <__do_clear_bss>
  90:	95 91       	lpm	r25, Z+
  92:	85 91       	lpm	r24, Z+
  94:	ef 01       	movw	r28, r30
  96:	f9 2f       	mov	r31, r25
  98:	e8 2f       	mov	r30, r24
  9a:	05 90       	lpm	r0, Z+
  9c:	0d 92       	st	X+, r0
  9e:	a2 17       	cp	r26, r18
  a0:	b3 07       	cpc	r27, r19
  a2:	d9 f7       	brne	.-10     	; 0x9a <__do_copy_data+0x20>
  a4:	fe 01       	movw	r30, r28
  a6:	04 c0       	rjmp	.+8      	; 0xb0 <__do_clear_bss+0x8>

000000a8 <__do_clear_bss>:
  a8:	1d 92       	st	X+, r1
  aa:	a2 17       	cp	r26, r18
  ac:	b3 07       	cpc	r27, r19
  ae:	e1 f7       	brne	.-8      	; 0xa8 <__do_clear_bss>
  b0:	ed 36       	cpi	r30, 0x6D	; 109
  b2:	f4 07       	cpc	r31, r20
  b4:	31 f7       	brne	.-52     	; 0x82 <__do_copy_data+0x8>
  b6:	0e 94 61 00 	call	0xc2	; 0xc2 <_etext>
  ba:	0c 94 c0 00 	jmp	0x180	; 0x180 <exit>

000000be <_exit>:
  be:	f8 94       	cli

000000c0 <__stop_program>:
  c0:	ff cf       	rjmp	.-2      	; 0xc0 <__stop_program>

Disassembly of section .text:

000001a6 <__bad_interrupt>:
 1a6:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.setup:

0000013c <setup>:
#define LEDS_MASK 0x1F 

volatile uint8_t state = 0; 

void setup() {
	LEDS_DDR |= LEDS_MASK;
 13c:	84 b1       	in	r24, 0x04	; 4
 13e:	8f 61       	ori	r24, 0x1F	; 31
 140:	84 b9       	out	0x04, r24	; 4

	LEDS_PORT &= ~LEDS_MASK;
 142:	85 b1       	in	r24, 0x05	; 5
 144:	80 7e       	andi	r24, 0xE0	; 224
 146:	85 b9       	out	0x05, r24	; 5

	DDRD &= ~(1 << PD2);
 148:	8a b1       	in	r24, 0x0a	; 10
 14a:	8b 7f       	andi	r24, 0xFB	; 251
 14c:	8a b9       	out	0x0a, r24	; 10
	PORTD |= (1 << PD2);
 14e:	8b b1       	in	r24, 0x0b	; 11
 150:	84 60       	ori	r24, 0x04	; 4
 152:	8b b9       	out	0x0b, r24	; 11

	EICRA |= (1 << ISC01);  // ISC01 = 1, ISC00 = 0: flanco de bajada
 154:	e9 e6       	ldi	r30, 0x69	; 105
 156:	f0 e0       	ldi	r31, 0x00	; 0
 158:	80 81       	ld	r24, Z
 15a:	82 60       	ori	r24, 0x02	; 2
 15c:	80 83       	st	Z, r24
	EIMSK |= (1 << INT0);   // Habilitar interrupción externa INT0
 15e:	8d b3       	in	r24, 0x1d	; 29
 160:	81 60       	ori	r24, 0x01	; 1
 162:	8d bb       	out	0x1d, r24	; 29

	sei();
 164:	78 94       	sei
 166:	08 95       	ret

Disassembly of section .text.sleep_mode_config:

00000168 <sleep_mode_config>:
}

void sleep_mode_config(uint8_t mode) {
	set_sleep_mode(mode);
 168:	93 b7       	in	r25, 0x33	; 51
 16a:	91 7f       	andi	r25, 0xF1	; 241
 16c:	89 2b       	or	r24, r25
 16e:	83 bf       	out	0x33, r24	; 51
	sleep_enable();
 170:	83 b7       	in	r24, 0x33	; 51
 172:	81 60       	ori	r24, 0x01	; 1
 174:	83 bf       	out	0x33, r24	; 51
	sleep_cpu();  
 176:	88 95       	sleep
	sleep_disable(); 
 178:	83 b7       	in	r24, 0x33	; 51
 17a:	8e 7f       	andi	r24, 0xFE	; 254
 17c:	83 bf       	out	0x33, r24	; 51
 17e:	08 95       	ret

Disassembly of section .text.led_on:

00000196 <led_on>:
}

void led_on() {
	LEDS_PORT |= LEDS_MASK; 
 196:	85 b1       	in	r24, 0x05	; 5
 198:	8f 61       	ori	r24, 0x1F	; 31
 19a:	85 b9       	out	0x05, r24	; 5
 19c:	08 95       	ret

Disassembly of section .text.led_off:

0000019e <led_off>:
}

void led_off() {
	LEDS_PORT &= ~LEDS_MASK;
 19e:	85 b1       	in	r24, 0x05	; 5
 1a0:	80 7e       	andi	r24, 0xE0	; 224
 1a2:	85 b9       	out	0x05, r24	; 5
 1a4:	08 95       	ret

Disassembly of section .text.__vector_1:

0000010e <__vector_1>:
}

ISR(INT0_vect) {
 10e:	1f 92       	push	r1
 110:	0f 92       	push	r0
 112:	0f b6       	in	r0, 0x3f	; 63
 114:	0f 92       	push	r0
 116:	11 24       	eor	r1, r1
 118:	8f 93       	push	r24
	state++;
 11a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 11e:	8f 5f       	subi	r24, 0xFF	; 255
 120:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	if (state > 3) {
 124:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 128:	84 30       	cpi	r24, 0x04	; 4
 12a:	10 f0       	brcs	.+4      	; 0x130 <__vector_1+0x22>
		state = 0;
 12c:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
	}
}
 130:	8f 91       	pop	r24
 132:	0f 90       	pop	r0
 134:	0f be       	out	0x3f, r0	; 63
 136:	0f 90       	pop	r0
 138:	1f 90       	pop	r1
 13a:	18 95       	reti

Disassembly of section .text.main:

000000c2 <main>:

int main(void) {
	setup();
  c2:	0e 94 9e 00 	call	0x13c	; 0x13c <setup>

	while (1) {
		switch (state) {
  c6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  ca:	81 30       	cpi	r24, 0x01	; 1
  cc:	a1 f0       	breq	.+40     	; 0xf6 <main+0x34>
  ce:	28 f0       	brcs	.+10     	; 0xda <main+0x18>
  d0:	82 30       	cpi	r24, 0x02	; 2
  d2:	a9 f0       	breq	.+42     	; 0xfe <main+0x3c>
  d4:	83 30       	cpi	r24, 0x03	; 3
  d6:	b9 f0       	breq	.+46     	; 0x106 <main+0x44>
  d8:	f6 cf       	rjmp	.-20     	; 0xc6 <main+0x4>
			case 0:
			// Estado 0: Encender LEDs por 1 segundo y luego apagarlos
			led_on();
  da:	0e 94 cb 00 	call	0x196	; 0x196 <led_on>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  de:	2f ef       	ldi	r18, 0xFF	; 255
  e0:	83 ed       	ldi	r24, 0xD3	; 211
  e2:	90 e3       	ldi	r25, 0x30	; 48
  e4:	21 50       	subi	r18, 0x01	; 1
  e6:	80 40       	sbci	r24, 0x00	; 0
  e8:	90 40       	sbci	r25, 0x00	; 0
  ea:	e1 f7       	brne	.-8      	; 0xe4 <main+0x22>
  ec:	00 c0       	rjmp	.+0      	; 0xee <main+0x2c>
  ee:	00 00       	nop
			_delay_ms(1000);
			led_off();
  f0:	0e 94 cf 00 	call	0x19e	; 0x19e <led_off>
			break;
  f4:	e8 cf       	rjmp	.-48     	; 0xc6 <main+0x4>

			case 1:
			// Estado 1: Entrar en modo Idle durante 30 segundos
			sleep_mode_config(SLEEP_MODE_IDLE);
  f6:	80 e0       	ldi	r24, 0x00	; 0
  f8:	0e 94 b4 00 	call	0x168	; 0x168 <sleep_mode_config>
			break;
  fc:	e4 cf       	rjmp	.-56     	; 0xc6 <main+0x4>

			case 2:
			// Estado 2: Entrar en modo Power-down durante 30 segundos
			sleep_mode_config(SLEEP_MODE_PWR_DOWN);
  fe:	84 e0       	ldi	r24, 0x04	; 4
 100:	0e 94 b4 00 	call	0x168	; 0x168 <sleep_mode_config>
			break;
 104:	e0 cf       	rjmp	.-64     	; 0xc6 <main+0x4>

			case 3:
			// Estado 3: Entrar en modo Power-save durante 30 segundos
			sleep_mode_config(SLEEP_MODE_PWR_SAVE);
 106:	86 e0       	ldi	r24, 0x06	; 6
 108:	0e 94 b4 00 	call	0x168	; 0x168 <sleep_mode_config>
			break;
 10c:	dc cf       	rjmp	.-72     	; 0xc6 <main+0x4>

Disassembly of section .text.__dummy_fini:

000001ae <_fini>:
 1ae:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

000001b0 <__funcs_on_exit>:
 1b0:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

000001b2 <__simulator_exit>:
 1b2:	08 95       	ret

Disassembly of section .text.exit:

00000180 <exit>:
 180:	ec 01       	movw	r28, r24
 182:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <__funcs_on_exit>
 186:	0e 94 d7 00 	call	0x1ae	; 0x1ae <_fini>
 18a:	ce 01       	movw	r24, r28
 18c:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <__simulator_exit>
 190:	ce 01       	movw	r24, r28
 192:	0e 94 d5 00 	call	0x1aa	; 0x1aa <_Exit>

Disassembly of section .text._Exit:

000001aa <_Exit>:
 1aa:	0e 94 5f 00 	call	0xbe	; 0xbe <_exit>
